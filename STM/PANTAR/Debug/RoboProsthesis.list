
RoboProsthesis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005700  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080058b0  080058b0  000068b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058f8  080058f8  00007064  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080058f8  080058f8  000068f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005900  08005900  00007064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005900  08005900  00006900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005904  08005904  00006904  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08005908  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007064  2**0
                  CONTENTS
 10 .bss          000045b4  20000064  20000064  00007064  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004618  20004618  00007064  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007064  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016e40  00000000  00000000  00007094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d4b  00000000  00000000  0001ded4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001480  00000000  00000000  00021c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc1  00000000  00000000  000230a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d42  00000000  00000000  00024061  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f7c  00000000  00000000  0004ada3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e4100  00000000  00000000  00064d1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00148e1f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056a0  00000000  00000000  00148e64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  0014e504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000064 	.word	0x20000064
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005898 	.word	0x08005898

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000068 	.word	0x20000068
 80001ec:	08005898 	.word	0x08005898

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000200:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000204:	f000 b988 	b.w	8000518 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	468e      	mov	lr, r1
 8000228:	4604      	mov	r4, r0
 800022a:	4688      	mov	r8, r1
 800022c:	2b00      	cmp	r3, #0
 800022e:	d14a      	bne.n	80002c6 <__udivmoddi4+0xa6>
 8000230:	428a      	cmp	r2, r1
 8000232:	4617      	mov	r7, r2
 8000234:	d962      	bls.n	80002fc <__udivmoddi4+0xdc>
 8000236:	fab2 f682 	clz	r6, r2
 800023a:	b14e      	cbz	r6, 8000250 <__udivmoddi4+0x30>
 800023c:	f1c6 0320 	rsb	r3, r6, #32
 8000240:	fa01 f806 	lsl.w	r8, r1, r6
 8000244:	fa20 f303 	lsr.w	r3, r0, r3
 8000248:	40b7      	lsls	r7, r6
 800024a:	ea43 0808 	orr.w	r8, r3, r8
 800024e:	40b4      	lsls	r4, r6
 8000250:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000254:	fa1f fc87 	uxth.w	ip, r7
 8000258:	fbb8 f1fe 	udiv	r1, r8, lr
 800025c:	0c23      	lsrs	r3, r4, #16
 800025e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000262:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000266:	fb01 f20c 	mul.w	r2, r1, ip
 800026a:	429a      	cmp	r2, r3
 800026c:	d909      	bls.n	8000282 <__udivmoddi4+0x62>
 800026e:	18fb      	adds	r3, r7, r3
 8000270:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000274:	f080 80ea 	bcs.w	800044c <__udivmoddi4+0x22c>
 8000278:	429a      	cmp	r2, r3
 800027a:	f240 80e7 	bls.w	800044c <__udivmoddi4+0x22c>
 800027e:	3902      	subs	r1, #2
 8000280:	443b      	add	r3, r7
 8000282:	1a9a      	subs	r2, r3, r2
 8000284:	b2a3      	uxth	r3, r4
 8000286:	fbb2 f0fe 	udiv	r0, r2, lr
 800028a:	fb0e 2210 	mls	r2, lr, r0, r2
 800028e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000292:	fb00 fc0c 	mul.w	ip, r0, ip
 8000296:	459c      	cmp	ip, r3
 8000298:	d909      	bls.n	80002ae <__udivmoddi4+0x8e>
 800029a:	18fb      	adds	r3, r7, r3
 800029c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002a0:	f080 80d6 	bcs.w	8000450 <__udivmoddi4+0x230>
 80002a4:	459c      	cmp	ip, r3
 80002a6:	f240 80d3 	bls.w	8000450 <__udivmoddi4+0x230>
 80002aa:	443b      	add	r3, r7
 80002ac:	3802      	subs	r0, #2
 80002ae:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b2:	eba3 030c 	sub.w	r3, r3, ip
 80002b6:	2100      	movs	r1, #0
 80002b8:	b11d      	cbz	r5, 80002c2 <__udivmoddi4+0xa2>
 80002ba:	40f3      	lsrs	r3, r6
 80002bc:	2200      	movs	r2, #0
 80002be:	e9c5 3200 	strd	r3, r2, [r5]
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d905      	bls.n	80002d6 <__udivmoddi4+0xb6>
 80002ca:	b10d      	cbz	r5, 80002d0 <__udivmoddi4+0xb0>
 80002cc:	e9c5 0100 	strd	r0, r1, [r5]
 80002d0:	2100      	movs	r1, #0
 80002d2:	4608      	mov	r0, r1
 80002d4:	e7f5      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002d6:	fab3 f183 	clz	r1, r3
 80002da:	2900      	cmp	r1, #0
 80002dc:	d146      	bne.n	800036c <__udivmoddi4+0x14c>
 80002de:	4573      	cmp	r3, lr
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xc8>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 8105 	bhi.w	80004f2 <__udivmoddi4+0x2d2>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	4690      	mov	r8, r2
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e5      	beq.n	80002c2 <__udivmoddi4+0xa2>
 80002f6:	e9c5 4800 	strd	r4, r8, [r5]
 80002fa:	e7e2      	b.n	80002c2 <__udivmoddi4+0xa2>
 80002fc:	2a00      	cmp	r2, #0
 80002fe:	f000 8090 	beq.w	8000422 <__udivmoddi4+0x202>
 8000302:	fab2 f682 	clz	r6, r2
 8000306:	2e00      	cmp	r6, #0
 8000308:	f040 80a4 	bne.w	8000454 <__udivmoddi4+0x234>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	0c03      	lsrs	r3, r0, #16
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	b280      	uxth	r0, r0
 8000316:	b2bc      	uxth	r4, r7
 8000318:	2101      	movs	r1, #1
 800031a:	fbb2 fcfe 	udiv	ip, r2, lr
 800031e:	fb0e 221c 	mls	r2, lr, ip, r2
 8000322:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000326:	fb04 f20c 	mul.w	r2, r4, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d907      	bls.n	800033e <__udivmoddi4+0x11e>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000334:	d202      	bcs.n	800033c <__udivmoddi4+0x11c>
 8000336:	429a      	cmp	r2, r3
 8000338:	f200 80e0 	bhi.w	80004fc <__udivmoddi4+0x2dc>
 800033c:	46c4      	mov	ip, r8
 800033e:	1a9b      	subs	r3, r3, r2
 8000340:	fbb3 f2fe 	udiv	r2, r3, lr
 8000344:	fb0e 3312 	mls	r3, lr, r2, r3
 8000348:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800034c:	fb02 f404 	mul.w	r4, r2, r4
 8000350:	429c      	cmp	r4, r3
 8000352:	d907      	bls.n	8000364 <__udivmoddi4+0x144>
 8000354:	18fb      	adds	r3, r7, r3
 8000356:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x142>
 800035c:	429c      	cmp	r4, r3
 800035e:	f200 80ca 	bhi.w	80004f6 <__udivmoddi4+0x2d6>
 8000362:	4602      	mov	r2, r0
 8000364:	1b1b      	subs	r3, r3, r4
 8000366:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800036a:	e7a5      	b.n	80002b8 <__udivmoddi4+0x98>
 800036c:	f1c1 0620 	rsb	r6, r1, #32
 8000370:	408b      	lsls	r3, r1
 8000372:	fa22 f706 	lsr.w	r7, r2, r6
 8000376:	431f      	orrs	r7, r3
 8000378:	fa0e f401 	lsl.w	r4, lr, r1
 800037c:	fa20 f306 	lsr.w	r3, r0, r6
 8000380:	fa2e fe06 	lsr.w	lr, lr, r6
 8000384:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000388:	4323      	orrs	r3, r4
 800038a:	fa00 f801 	lsl.w	r8, r0, r1
 800038e:	fa1f fc87 	uxth.w	ip, r7
 8000392:	fbbe f0f9 	udiv	r0, lr, r9
 8000396:	0c1c      	lsrs	r4, r3, #16
 8000398:	fb09 ee10 	mls	lr, r9, r0, lr
 800039c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003a0:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a4:	45a6      	cmp	lr, r4
 80003a6:	fa02 f201 	lsl.w	r2, r2, r1
 80003aa:	d909      	bls.n	80003c0 <__udivmoddi4+0x1a0>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003b2:	f080 809c 	bcs.w	80004ee <__udivmoddi4+0x2ce>
 80003b6:	45a6      	cmp	lr, r4
 80003b8:	f240 8099 	bls.w	80004ee <__udivmoddi4+0x2ce>
 80003bc:	3802      	subs	r0, #2
 80003be:	443c      	add	r4, r7
 80003c0:	eba4 040e 	sub.w	r4, r4, lr
 80003c4:	fa1f fe83 	uxth.w	lr, r3
 80003c8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003cc:	fb09 4413 	mls	r4, r9, r3, r4
 80003d0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d8:	45a4      	cmp	ip, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x1ce>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003e2:	f080 8082 	bcs.w	80004ea <__udivmoddi4+0x2ca>
 80003e6:	45a4      	cmp	ip, r4
 80003e8:	d97f      	bls.n	80004ea <__udivmoddi4+0x2ca>
 80003ea:	3b02      	subs	r3, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003f2:	eba4 040c 	sub.w	r4, r4, ip
 80003f6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003fa:	4564      	cmp	r4, ip
 80003fc:	4673      	mov	r3, lr
 80003fe:	46e1      	mov	r9, ip
 8000400:	d362      	bcc.n	80004c8 <__udivmoddi4+0x2a8>
 8000402:	d05f      	beq.n	80004c4 <__udivmoddi4+0x2a4>
 8000404:	b15d      	cbz	r5, 800041e <__udivmoddi4+0x1fe>
 8000406:	ebb8 0203 	subs.w	r2, r8, r3
 800040a:	eb64 0409 	sbc.w	r4, r4, r9
 800040e:	fa04 f606 	lsl.w	r6, r4, r6
 8000412:	fa22 f301 	lsr.w	r3, r2, r1
 8000416:	431e      	orrs	r6, r3
 8000418:	40cc      	lsrs	r4, r1
 800041a:	e9c5 6400 	strd	r6, r4, [r5]
 800041e:	2100      	movs	r1, #0
 8000420:	e74f      	b.n	80002c2 <__udivmoddi4+0xa2>
 8000422:	fbb1 fcf2 	udiv	ip, r1, r2
 8000426:	0c01      	lsrs	r1, r0, #16
 8000428:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800042c:	b280      	uxth	r0, r0
 800042e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000432:	463b      	mov	r3, r7
 8000434:	4638      	mov	r0, r7
 8000436:	463c      	mov	r4, r7
 8000438:	46b8      	mov	r8, r7
 800043a:	46be      	mov	lr, r7
 800043c:	2620      	movs	r6, #32
 800043e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000442:	eba2 0208 	sub.w	r2, r2, r8
 8000446:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800044a:	e766      	b.n	800031a <__udivmoddi4+0xfa>
 800044c:	4601      	mov	r1, r0
 800044e:	e718      	b.n	8000282 <__udivmoddi4+0x62>
 8000450:	4610      	mov	r0, r2
 8000452:	e72c      	b.n	80002ae <__udivmoddi4+0x8e>
 8000454:	f1c6 0220 	rsb	r2, r6, #32
 8000458:	fa2e f302 	lsr.w	r3, lr, r2
 800045c:	40b7      	lsls	r7, r6
 800045e:	40b1      	lsls	r1, r6
 8000460:	fa20 f202 	lsr.w	r2, r0, r2
 8000464:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000468:	430a      	orrs	r2, r1
 800046a:	fbb3 f8fe 	udiv	r8, r3, lr
 800046e:	b2bc      	uxth	r4, r7
 8000470:	fb0e 3318 	mls	r3, lr, r8, r3
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047a:	fb08 f904 	mul.w	r9, r8, r4
 800047e:	40b0      	lsls	r0, r6
 8000480:	4589      	cmp	r9, r1
 8000482:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000486:	b280      	uxth	r0, r0
 8000488:	d93e      	bls.n	8000508 <__udivmoddi4+0x2e8>
 800048a:	1879      	adds	r1, r7, r1
 800048c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000490:	d201      	bcs.n	8000496 <__udivmoddi4+0x276>
 8000492:	4589      	cmp	r9, r1
 8000494:	d81f      	bhi.n	80004d6 <__udivmoddi4+0x2b6>
 8000496:	eba1 0109 	sub.w	r1, r1, r9
 800049a:	fbb1 f9fe 	udiv	r9, r1, lr
 800049e:	fb09 f804 	mul.w	r8, r9, r4
 80004a2:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a6:	b292      	uxth	r2, r2
 80004a8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004ac:	4542      	cmp	r2, r8
 80004ae:	d229      	bcs.n	8000504 <__udivmoddi4+0x2e4>
 80004b0:	18ba      	adds	r2, r7, r2
 80004b2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004b6:	d2c4      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d2c2      	bcs.n	8000442 <__udivmoddi4+0x222>
 80004bc:	f1a9 0102 	sub.w	r1, r9, #2
 80004c0:	443a      	add	r2, r7
 80004c2:	e7be      	b.n	8000442 <__udivmoddi4+0x222>
 80004c4:	45f0      	cmp	r8, lr
 80004c6:	d29d      	bcs.n	8000404 <__udivmoddi4+0x1e4>
 80004c8:	ebbe 0302 	subs.w	r3, lr, r2
 80004cc:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004d0:	3801      	subs	r0, #1
 80004d2:	46e1      	mov	r9, ip
 80004d4:	e796      	b.n	8000404 <__udivmoddi4+0x1e4>
 80004d6:	eba7 0909 	sub.w	r9, r7, r9
 80004da:	4449      	add	r1, r9
 80004dc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004e0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e4:	fb09 f804 	mul.w	r8, r9, r4
 80004e8:	e7db      	b.n	80004a2 <__udivmoddi4+0x282>
 80004ea:	4673      	mov	r3, lr
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1ce>
 80004ee:	4650      	mov	r0, sl
 80004f0:	e766      	b.n	80003c0 <__udivmoddi4+0x1a0>
 80004f2:	4608      	mov	r0, r1
 80004f4:	e6fd      	b.n	80002f2 <__udivmoddi4+0xd2>
 80004f6:	443b      	add	r3, r7
 80004f8:	3a02      	subs	r2, #2
 80004fa:	e733      	b.n	8000364 <__udivmoddi4+0x144>
 80004fc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000500:	443b      	add	r3, r7
 8000502:	e71c      	b.n	800033e <__udivmoddi4+0x11e>
 8000504:	4649      	mov	r1, r9
 8000506:	e79c      	b.n	8000442 <__udivmoddi4+0x222>
 8000508:	eba1 0109 	sub.w	r1, r1, r9
 800050c:	46c4      	mov	ip, r8
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fb09 f804 	mul.w	r8, r9, r4
 8000516:	e7c4      	b.n	80004a2 <__udivmoddi4+0x282>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <KEY_Process>:
void M2006_SetPosRef(float pos_units)      { pos_ref_m2006 = pos_units; }
float M2006_GetPosRef(void)                { return pos_ref_m2006; }

/* 单键处理 */
static void KEY_Process(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b084      	sub	sp, #16
 8000520:	af00      	add	r7, sp, #0
  static uint8_t  key_prev = 0;
  static uint32_t t0 = 0;
  static uint8_t  long_fired = 0;

  uint32_t now = HAL_GetTick();
 8000522:	f000 ffa1 	bl	8001468 <HAL_GetTick>
 8000526:	60f8      	str	r0, [r7, #12]
  uint8_t key_now = (HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_SET) ? 1 : 0;
 8000528:	2104      	movs	r1, #4
 800052a:	484a      	ldr	r0, [pc, #296]	@ (8000654 <KEY_Process+0x138>)
 800052c:	f001 ffcc 	bl	80024c8 <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	2b01      	cmp	r3, #1
 8000534:	bf0c      	ite	eq
 8000536:	2301      	moveq	r3, #1
 8000538:	2300      	movne	r3, #0
 800053a:	b2db      	uxtb	r3, r3
 800053c:	72fb      	strb	r3, [r7, #11]

  if (key_prev == 0 && key_now == 1) {
 800053e:	4b46      	ldr	r3, [pc, #280]	@ (8000658 <KEY_Process+0x13c>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d109      	bne.n	800055a <KEY_Process+0x3e>
 8000546:	7afb      	ldrb	r3, [r7, #11]
 8000548:	2b01      	cmp	r3, #1
 800054a:	d106      	bne.n	800055a <KEY_Process+0x3e>
    t0 = now;
 800054c:	4a43      	ldr	r2, [pc, #268]	@ (800065c <KEY_Process+0x140>)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6013      	str	r3, [r2, #0]
    long_fired = 0;
 8000552:	4b43      	ldr	r3, [pc, #268]	@ (8000660 <KEY_Process+0x144>)
 8000554:	2200      	movs	r2, #0
 8000556:	701a      	strb	r2, [r3, #0]
 8000558:	e075      	b.n	8000646 <KEY_Process+0x12a>
  }
  else if (key_prev == 1 && key_now == 1) {
 800055a:	4b3f      	ldr	r3, [pc, #252]	@ (8000658 <KEY_Process+0x13c>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	2b01      	cmp	r3, #1
 8000560:	d11c      	bne.n	800059c <KEY_Process+0x80>
 8000562:	7afb      	ldrb	r3, [r7, #11]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d119      	bne.n	800059c <KEY_Process+0x80>
    uint32_t dt = now - t0;
 8000568:	4b3c      	ldr	r3, [pc, #240]	@ (800065c <KEY_Process+0x140>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	68fa      	ldr	r2, [r7, #12]
 800056e:	1ad3      	subs	r3, r2, r3
 8000570:	607b      	str	r3, [r7, #4]
    if (!long_fired && dt >= LONG_PRESS_MIN_MS) {
 8000572:	4b3b      	ldr	r3, [pc, #236]	@ (8000660 <KEY_Process+0x144>)
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	2b00      	cmp	r3, #0
 8000578:	d164      	bne.n	8000644 <KEY_Process+0x128>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000580:	d360      	bcc.n	8000644 <KEY_Process+0x128>
      /* 长按：归零角度累计，并可选地将 AS5600 置零 */
      moto_chassis[IDX_M2006].total_angle = 0;
 8000582:	4b38      	ldr	r3, [pc, #224]	@ (8000664 <KEY_Process+0x148>)
 8000584:	2200      	movs	r2, #0
 8000586:	615a      	str	r2, [r3, #20]
      moto_chassis[IDX_M3508].total_angle = 0;
 8000588:	4b36      	ldr	r3, [pc, #216]	@ (8000664 <KEY_Process+0x148>)
 800058a:	2200      	movs	r2, #0
 800058c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* 可选：长按同时把 AS5600 当前角度设为零点 */
      BSP_AS5600_SetZeroHere(&as5600_state);
 800058e:	4836      	ldr	r0, [pc, #216]	@ (8000668 <KEY_Process+0x14c>)
 8000590:	f000 f9b4 	bl	80008fc <BSP_AS5600_SetZeroHere>

      long_fired = 1;
 8000594:	4b32      	ldr	r3, [pc, #200]	@ (8000660 <KEY_Process+0x144>)
 8000596:	2201      	movs	r2, #1
 8000598:	701a      	strb	r2, [r3, #0]
  else if (key_prev == 1 && key_now == 1) {
 800059a:	e053      	b.n	8000644 <KEY_Process+0x128>
    }
  }
  else if (key_prev == 1 && key_now == 0) {
 800059c:	4b2e      	ldr	r3, [pc, #184]	@ (8000658 <KEY_Process+0x13c>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d150      	bne.n	8000646 <KEY_Process+0x12a>
 80005a4:	7afb      	ldrb	r3, [r7, #11]
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d14d      	bne.n	8000646 <KEY_Process+0x12a>
    uint32_t dt = now - t0;
 80005aa:	4b2c      	ldr	r3, [pc, #176]	@ (800065c <KEY_Process+0x140>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	68fa      	ldr	r2, [r7, #12]
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	603b      	str	r3, [r7, #0]
    if (!long_fired && dt < SHORT_PRESS_MAX_MS) {
 80005b4:	4b2a      	ldr	r3, [pc, #168]	@ (8000660 <KEY_Process+0x144>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d144      	bne.n	8000646 <KEY_Process+0x12a>
 80005bc:	683b      	ldr	r3, [r7, #0]
 80005be:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80005c2:	d240      	bcs.n	8000646 <KEY_Process+0x12a>
      /* 短按：切档/位置步进/方向切换 */
      if (m2006_mode == M2006_MODE_POSITION) {
 80005c4:	4b29      	ldr	r3, [pc, #164]	@ (800066c <KEY_Process+0x150>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	b2db      	uxtb	r3, r3
 80005ca:	2b02      	cmp	r3, #2
 80005cc:	d113      	bne.n	80005f6 <KEY_Process+0xda>
        pos_ref_m2006 += (float)dir[IDX_M2006] * M2006_POS_STEP_UNITS;
 80005ce:	4b28      	ldr	r3, [pc, #160]	@ (8000670 <KEY_Process+0x154>)
 80005d0:	f993 3000 	ldrsb.w	r3, [r3]
 80005d4:	ee07 3a90 	vmov	s15, r3
 80005d8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005dc:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8000674 <KEY_Process+0x158>
 80005e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80005e4:	4b24      	ldr	r3, [pc, #144]	@ (8000678 <KEY_Process+0x15c>)
 80005e6:	edd3 7a00 	vldr	s15, [r3]
 80005ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005ee:	4b22      	ldr	r3, [pc, #136]	@ (8000678 <KEY_Process+0x15c>)
 80005f0:	edc3 7a00 	vstr	s15, [r3]
 80005f4:	e00d      	b.n	8000612 <KEY_Process+0xf6>
      } else {
        gear_m2006 = (int8_t)((gear_m2006 + 1) % (GEAR_MAX_INDEX + 1));
 80005f6:	4b21      	ldr	r3, [pc, #132]	@ (800067c <KEY_Process+0x160>)
 80005f8:	f993 3000 	ldrsb.w	r3, [r3]
 80005fc:	3301      	adds	r3, #1
 80005fe:	425a      	negs	r2, r3
 8000600:	f003 0307 	and.w	r3, r3, #7
 8000604:	f002 0207 	and.w	r2, r2, #7
 8000608:	bf58      	it	pl
 800060a:	4253      	negpl	r3, r2
 800060c:	b25a      	sxtb	r2, r3
 800060e:	4b1b      	ldr	r3, [pc, #108]	@ (800067c <KEY_Process+0x160>)
 8000610:	701a      	strb	r2, [r3, #0]
      }
      gear_m3508 = (int8_t)((gear_m3508 + 1) % (GEAR_MAX_INDEX + 1));
 8000612:	4b1b      	ldr	r3, [pc, #108]	@ (8000680 <KEY_Process+0x164>)
 8000614:	f993 3000 	ldrsb.w	r3, [r3]
 8000618:	3301      	adds	r3, #1
 800061a:	425a      	negs	r2, r3
 800061c:	f003 0307 	and.w	r3, r3, #7
 8000620:	f002 0207 	and.w	r2, r2, #7
 8000624:	bf58      	it	pl
 8000626:	4253      	negpl	r3, r2
 8000628:	b25a      	sxtb	r2, r3
 800062a:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <KEY_Process+0x164>)
 800062c:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800062e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000632:	4814      	ldr	r0, [pc, #80]	@ (8000684 <KEY_Process+0x168>)
 8000634:	f001 ff79 	bl	800252a <HAL_GPIO_TogglePin>
      HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000638:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800063c:	4812      	ldr	r0, [pc, #72]	@ (8000688 <KEY_Process+0x16c>)
 800063e:	f001 ff74 	bl	800252a <HAL_GPIO_TogglePin>
 8000642:	e000      	b.n	8000646 <KEY_Process+0x12a>
  else if (key_prev == 1 && key_now == 1) {
 8000644:	bf00      	nop
    }
  }
  key_prev = key_now;
 8000646:	4a04      	ldr	r2, [pc, #16]	@ (8000658 <KEY_Process+0x13c>)
 8000648:	7afb      	ldrb	r3, [r7, #11]
 800064a:	7013      	strb	r3, [r2, #0]
}
 800064c:	bf00      	nop
 800064e:	3710      	adds	r7, #16
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40020400 	.word	0x40020400
 8000658:	20000180 	.word	0x20000180
 800065c:	20000184 	.word	0x20000184
 8000660:	20000188 	.word	0x20000188
 8000664:	2000018c 	.word	0x2000018c
 8000668:	20000160 	.word	0x20000160
 800066c:	20000080 	.word	0x20000080
 8000670:	20000000 	.word	0x20000000
 8000674:	47100000 	.word	0x47100000
 8000678:	20000084 	.word	0x20000084
 800067c:	20000081 	.word	0x20000081
 8000680:	20000082 	.word	0x20000082
 8000684:	40021400 	.word	0x40021400
 8000688:	40021000 	.word	0x40021000

0800068c <app_control_start>:

/* 任务入口 */
void app_control_start(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  PID_struct_init(&pid_spd[IDX_M2006], POSITION_PID, PID_MAX_OUT_M2006, PID_INT_LIM_M2006,
 8000690:	ed9f 1a24 	vldr	s2, [pc, #144]	@ 8000724 <app_control_start+0x98>
 8000694:	eddf 0a24 	vldr	s1, [pc, #144]	@ 8000728 <app_control_start+0x9c>
 8000698:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 800069c:	f241 3388 	movw	r3, #5000	@ 0x1388
 80006a0:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006a4:	2103      	movs	r1, #3
 80006a6:	4821      	ldr	r0, [pc, #132]	@ (800072c <app_control_start+0xa0>)
 80006a8:	f000 fd62 	bl	8001170 <PID_struct_init>
                  KP_M2006_SPD, KI_M2006_SPD, KD_M2006_SPD);
  PID_struct_init(&pid_spd[IDX_M3508], POSITION_PID, PID_MAX_OUT_M3508, PID_INT_LIM_M3508,
 80006ac:	ed9f 1a1d 	vldr	s2, [pc, #116]	@ 8000724 <app_control_start+0x98>
 80006b0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8000728 <app_control_start+0x9c>
 80006b4:	eeb7 0a08 	vmov.f32	s0, #120	@ 0x3fc00000  1.5
 80006b8:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80006bc:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80006c0:	2103      	movs	r1, #3
 80006c2:	481b      	ldr	r0, [pc, #108]	@ (8000730 <app_control_start+0xa4>)
 80006c4:	f000 fd54 	bl	8001170 <PID_struct_init>
                  KP_M3508_SPD, KI_M3508_SPD, KD_M3508_SPD);

  PID_struct_init(&pid_tau_counts_m2006, POSITION_PID,
 80006c8:	ed9f 1a16 	vldr	s2, [pc, #88]	@ 8000724 <app_control_start+0x98>
 80006cc:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 80006d0:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80006d4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80006d8:	f241 7270 	movw	r2, #6000	@ 0x1770
 80006dc:	2103      	movs	r1, #3
 80006de:	4815      	ldr	r0, [pc, #84]	@ (8000734 <app_control_start+0xa8>)
 80006e0:	f000 fd46 	bl	8001170 <PID_struct_init>
                  6000, 3000, 0.5f,  20.0f, 0.0f);

  PID_struct_init(&pid_pos_m2006, POSITION_PID,
 80006e4:	ed9f 1a14 	vldr	s2, [pc, #80]	@ 8000738 <app_control_start+0xac>
 80006e8:	eddf 0a0e 	vldr	s1, [pc, #56]	@ 8000724 <app_control_start+0x98>
 80006ec:	eeb1 0a08 	vmov.f32	s0, #24	@ 0x40c00000  6.0
 80006f0:	23c8      	movs	r3, #200	@ 0xc8
 80006f2:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80006f6:	2103      	movs	r1, #3
 80006f8:	4810      	ldr	r0, [pc, #64]	@ (800073c <app_control_start+0xb0>)
 80006fa:	f000 fd39 	bl	8001170 <PID_struct_init>
                  PID_POS_MAX_OUT_M2006, PID_POS_INT_LIM_M2006,
                  KP_M2006_POS, KI_M2006_POS, KD_M2006_POS);

  /* ===== AS5600 初始化（新增） ===== */
  BSP_AS5600_Init(&as5600_state, 0.2f);        /* 速度LPF系数 0.0~1.0 */
 80006fe:	ed9f 0a0e 	vldr	s0, [pc, #56]	@ 8000738 <app_control_start+0xac>
 8000702:	480f      	ldr	r0, [pc, #60]	@ (8000740 <app_control_start+0xb4>)
 8000704:	f000 f880 	bl	8000808 <BSP_AS5600_Init>
  osDelay(10);                                  /* 上电稳定一下（可选） */
 8000708:	200a      	movs	r0, #10
 800070a:	f003 fdbe 	bl	800428a <osDelay>
  BSP_AS5600_SetZeroHere(&as5600_state);        /* 把当前角度作为零点（可选） */
 800070e:	480c      	ldr	r0, [pc, #48]	@ (8000740 <app_control_start+0xb4>)
 8000710:	f000 f8f4 	bl	80008fc <BSP_AS5600_SetZeroHere>

    vTaskDelayUntil(&last, pdMS_TO_TICKS(10));
  }
#else
  for(;;) {
    KEY_Process();
 8000714:	f7ff ff02 	bl	800051c <KEY_Process>
    osDelay(10);
 8000718:	200a      	movs	r0, #10
 800071a:	f003 fdb6 	bl	800428a <osDelay>
    KEY_Process();
 800071e:	bf00      	nop
 8000720:	e7f8      	b.n	8000714 <app_control_start+0x88>
 8000722:	bf00      	nop
 8000724:	00000000 	.word	0x00000000
 8000728:	3dcccccd 	.word	0x3dcccccd
 800072c:	20000588 	.word	0x20000588
 8000730:	200005f4 	.word	0x200005f4
 8000734:	20000088 	.word	0x20000088
 8000738:	3e4ccccd 	.word	0x3e4ccccd
 800073c:	200000f4 	.word	0x200000f4
 8000740:	20000160 	.word	0x20000160

08000744 <AS5600_ReadAngle12>:
    }
    return data;
}

HAL_StatusTypeDef AS5600_ReadAngle12(u16 *angle12)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b088      	sub	sp, #32
 8000748:	af04      	add	r7, sp, #16
 800074a:	6078      	str	r0, [r7, #4]
    if (!angle12) return HAL_ERROR;
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d101      	bne.n	8000756 <AS5600_ReadAngle12+0x12>
 8000752:	2301      	movs	r3, #1
 8000754:	e036      	b.n	80007c4 <AS5600_ReadAngle12+0x80>
    uint8_t h = 0, l = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	73fb      	strb	r3, [r7, #15]
 800075a:	2300      	movs	r3, #0
 800075c:	73bb      	strb	r3, [r7, #14]
    if (HAL_I2C_Mem_Read(&AS5600_I2C_HANDLE, AS5600_ADDR_8B, 0x0E,
 800075e:	2305      	movs	r3, #5
 8000760:	9302      	str	r3, [sp, #8]
 8000762:	2301      	movs	r3, #1
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	f107 030f 	add.w	r3, r7, #15
 800076a:	9300      	str	r3, [sp, #0]
 800076c:	2301      	movs	r3, #1
 800076e:	220e      	movs	r2, #14
 8000770:	216c      	movs	r1, #108	@ 0x6c
 8000772:	4816      	ldr	r0, [pc, #88]	@ (80007cc <AS5600_ReadAngle12+0x88>)
 8000774:	f002 f838 	bl	80027e8 <HAL_I2C_Mem_Read>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <AS5600_ReadAngle12+0x3e>
                         I2C_MEMADD_SIZE_8BIT, &h, 1, 5) != HAL_OK) return HAL_ERROR;
 800077e:	2301      	movs	r3, #1
 8000780:	e020      	b.n	80007c4 <AS5600_ReadAngle12+0x80>
    if (HAL_I2C_Mem_Read(&AS5600_I2C_HANDLE, AS5600_ADDR_8B, 0x0F,
 8000782:	2305      	movs	r3, #5
 8000784:	9302      	str	r3, [sp, #8]
 8000786:	2301      	movs	r3, #1
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	f107 030e 	add.w	r3, r7, #14
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	2301      	movs	r3, #1
 8000792:	220f      	movs	r2, #15
 8000794:	216c      	movs	r1, #108	@ 0x6c
 8000796:	480d      	ldr	r0, [pc, #52]	@ (80007cc <AS5600_ReadAngle12+0x88>)
 8000798:	f002 f826 	bl	80027e8 <HAL_I2C_Mem_Read>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <AS5600_ReadAngle12+0x62>
                         I2C_MEMADD_SIZE_8BIT, &l, 1, 5) != HAL_OK) return HAL_ERROR;
 80007a2:	2301      	movs	r3, #1
 80007a4:	e00e      	b.n	80007c4 <AS5600_ReadAngle12+0x80>
    *angle12 = ((((uint16_t)h << 8) | l) & 0x0FFF);
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	b21b      	sxth	r3, r3
 80007aa:	021b      	lsls	r3, r3, #8
 80007ac:	b21a      	sxth	r2, r3
 80007ae:	7bbb      	ldrb	r3, [r7, #14]
 80007b0:	b21b      	sxth	r3, r3
 80007b2:	4313      	orrs	r3, r2
 80007b4:	b21b      	sxth	r3, r3
 80007b6:	b29b      	uxth	r3, r3
 80007b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80007bc:	b29a      	uxth	r2, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	801a      	strh	r2, [r3, #0]
    return HAL_OK;
 80007c2:	2300      	movs	r3, #0
}
 80007c4:	4618      	mov	r0, r3
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000534 	.word	0x20000534

080007d0 <AS5600_ReadStatus>:

HAL_StatusTypeDef AS5600_ReadStatus(u8 *status)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b086      	sub	sp, #24
 80007d4:	af04      	add	r7, sp, #16
 80007d6:	6078      	str	r0, [r7, #4]
    if (!status) return HAL_ERROR;
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d101      	bne.n	80007e2 <AS5600_ReadStatus+0x12>
 80007de:	2301      	movs	r3, #1
 80007e0:	e00c      	b.n	80007fc <AS5600_ReadStatus+0x2c>
    return HAL_I2C_Mem_Read(&AS5600_I2C_HANDLE, AS5600_ADDR_8B, 0x0B,
 80007e2:	2305      	movs	r3, #5
 80007e4:	9302      	str	r3, [sp, #8]
 80007e6:	2301      	movs	r3, #1
 80007e8:	9301      	str	r3, [sp, #4]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	9300      	str	r3, [sp, #0]
 80007ee:	2301      	movs	r3, #1
 80007f0:	220b      	movs	r2, #11
 80007f2:	216c      	movs	r1, #108	@ 0x6c
 80007f4:	4803      	ldr	r0, [pc, #12]	@ (8000804 <AS5600_ReadStatus+0x34>)
 80007f6:	f001 fff7 	bl	80027e8 <HAL_I2C_Mem_Read>
 80007fa:	4603      	mov	r3, r0
                            I2C_MEMADD_SIZE_8BIT, status, 1, 5);
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000534 	.word	0x20000534

08000808 <BSP_AS5600_Init>:
    while (x < -180.f) x += 360.f;
    return x;
}

void BSP_AS5600_Init(AS5600_State_t *s, float vel_lpf_alpha)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	ed87 0a00 	vstr	s0, [r7]
    if (!s) return;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b00      	cmp	r3, #0
 8000818:	d068      	beq.n	80008ec <BSP_AS5600_Init+0xe4>
    s->zero_raw = 0;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	2200      	movs	r2, #0
 800081e:	801a      	strh	r2, [r3, #0]
    s->last_raw = 0;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2200      	movs	r2, #0
 8000824:	805a      	strh	r2, [r3, #2]
    s->turns    = 0;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
    s->angle_deg= 0.f;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f04f 0200 	mov.w	r2, #0
 8000832:	609a      	str	r2, [r3, #8]
    s->vel_dps  = 0.f;
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f04f 0200 	mov.w	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
    s->lp_vel   = 0.f;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f04f 0200 	mov.w	r2, #0
 8000842:	615a      	str	r2, [r3, #20]
    if (vel_lpf_alpha < 0.f)      vel_lpf_alpha = 0.f;
 8000844:	edd7 7a00 	vldr	s15, [r7]
 8000848:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800084c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000850:	d503      	bpl.n	800085a <BSP_AS5600_Init+0x52>
 8000852:	f04f 0300 	mov.w	r3, #0
 8000856:	603b      	str	r3, [r7, #0]
 8000858:	e00b      	b.n	8000872 <BSP_AS5600_Init+0x6a>
    else if (vel_lpf_alpha > 1.f) vel_lpf_alpha = 1.f;
 800085a:	edd7 7a00 	vldr	s15, [r7]
 800085e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000862:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800086a:	dd02      	ble.n	8000872 <BSP_AS5600_Init+0x6a>
 800086c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8000870:	603b      	str	r3, [r7, #0]
    s->lp_alpha = vel_lpf_alpha;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	683a      	ldr	r2, [r7, #0]
 8000876:	619a      	str	r2, [r3, #24]
    s->_prev_unwrap_deg = 0.f;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f04f 0200 	mov.w	r2, #0
 800087e:	611a      	str	r2, [r3, #16]
    s->mag_ok  = 0;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2200      	movs	r2, #0
 8000884:	771a      	strb	r2, [r3, #28]

    // 读一次角度作为初值
    uint16_t raw = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	81fb      	strh	r3, [r7, #14]
    if (AS5600_ReadAngle12(&raw) == HAL_OK) {
 800088a:	f107 030e 	add.w	r3, r7, #14
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ff58 	bl	8000744 <AS5600_ReadAngle12>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d112      	bne.n	80008c0 <BSP_AS5600_Init+0xb8>
        s->last_raw = raw;
 800089a:	89fa      	ldrh	r2, [r7, #14]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	805a      	strh	r2, [r3, #2]
        s->_prev_unwrap_deg = (raw * 360.0f) / 4096.0f;
 80008a0:	89fb      	ldrh	r3, [r7, #14]
 80008a2:	ee07 3a90 	vmov	s15, r3
 80008a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008aa:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80008f4 <BSP_AS5600_Init+0xec>
 80008ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008b2:	eddf 6a11 	vldr	s13, [pc, #68]	@ 80008f8 <BSP_AS5600_Init+0xf0>
 80008b6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	edc3 7a04 	vstr	s15, [r3, #16]
    }
    // 读状态
    uint8_t st = 0;
 80008c0:	2300      	movs	r3, #0
 80008c2:	737b      	strb	r3, [r7, #13]
    if (AS5600_ReadStatus(&st) == HAL_OK) {
 80008c4:	f107 030d 	add.w	r3, r7, #13
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff ff81 	bl	80007d0 <AS5600_ReadStatus>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d10c      	bne.n	80008ee <BSP_AS5600_Init+0xe6>
        s->mag_ok = ((st & (1U<<5)) != 0); // MD=bit5
 80008d4:	7b7b      	ldrb	r3, [r7, #13]
 80008d6:	f003 0320 	and.w	r3, r3, #32
 80008da:	2b00      	cmp	r3, #0
 80008dc:	bf14      	ite	ne
 80008de:	2301      	movne	r3, #1
 80008e0:	2300      	moveq	r3, #0
 80008e2:	b2db      	uxtb	r3, r3
 80008e4:	461a      	mov	r2, r3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	771a      	strb	r2, [r3, #28]
 80008ea:	e000      	b.n	80008ee <BSP_AS5600_Init+0xe6>
    if (!s) return;
 80008ec:	bf00      	nop
    }
}
 80008ee:	3710      	adds	r7, #16
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	43b40000 	.word	0x43b40000
 80008f8:	45800000 	.word	0x45800000

080008fc <BSP_AS5600_SetZeroHere>:

void BSP_AS5600_SetZeroHere(AS5600_State_t *s)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
    if (!s) return;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	2b00      	cmp	r3, #0
 8000908:	d02f      	beq.n	800096a <BSP_AS5600_SetZeroHere+0x6e>
    uint16_t raw = 0;
 800090a:	2300      	movs	r3, #0
 800090c:	81fb      	strh	r3, [r7, #14]
    if (AS5600_ReadAngle12(&raw) == HAL_OK) {
 800090e:	f107 030e 	add.w	r3, r7, #14
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ff16 	bl	8000744 <AS5600_ReadAngle12>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d126      	bne.n	800096c <BSP_AS5600_SetZeroHere+0x70>
        s->zero_raw = raw;
 800091e:	89fa      	ldrh	r2, [r7, #14]
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	801a      	strh	r2, [r3, #0]
        s->last_raw = raw;
 8000924:	89fa      	ldrh	r2, [r7, #14]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	805a      	strh	r2, [r3, #2]
        s->turns    = 0;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2200      	movs	r2, #0
 800092e:	605a      	str	r2, [r3, #4]
        s->angle_deg= 0.f;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	f04f 0200 	mov.w	r2, #0
 8000936:	609a      	str	r2, [r3, #8]
        s->vel_dps  = 0.f;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	f04f 0200 	mov.w	r2, #0
 800093e:	60da      	str	r2, [r3, #12]
        s->lp_vel   = 0.f;
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f04f 0200 	mov.w	r2, #0
 8000946:	615a      	str	r2, [r3, #20]
        s->_prev_unwrap_deg = (raw * 360.0f) / 4096.0f;
 8000948:	89fb      	ldrh	r3, [r7, #14]
 800094a:	ee07 3a90 	vmov	s15, r3
 800094e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000952:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000974 <BSP_AS5600_SetZeroHere+0x78>
 8000956:	ee27 7a87 	vmul.f32	s14, s15, s14
 800095a:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000978 <BSP_AS5600_SetZeroHere+0x7c>
 800095e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	edc3 7a04 	vstr	s15, [r3, #16]
 8000968:	e000      	b.n	800096c <BSP_AS5600_SetZeroHere+0x70>
    if (!s) return;
 800096a:	bf00      	nop
    }
}
 800096c:	3710      	adds	r7, #16
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	43b40000 	.word	0x43b40000
 8000978:	45800000 	.word	0x45800000

0800097c <my_can_filter_init_recv_all>:
/* ======================================================= */

/* 过滤器初始化：接收全部，FIFO0
   注意：不在这里启动 CAN/开启中断，统一由 main.c 完成（方案A） */
void my_can_filter_init_recv_all(CAN_HandleTypeDef* hcan)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08c      	sub	sp, #48	@ 0x30
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
    CAN_FilterTypeDef f = {0};
 8000984:	f107 0308 	add.w	r3, r7, #8
 8000988:	2228      	movs	r2, #40	@ 0x28
 800098a:	2100      	movs	r1, #0
 800098c:	4618      	mov	r0, r3
 800098e:	f004 fea1 	bl	80056d4 <memset>

    if (hcan->Instance == CAN1) {
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a13      	ldr	r2, [pc, #76]	@ (80009e4 <my_can_filter_init_recv_all+0x68>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d104      	bne.n	80009a6 <my_can_filter_init_recv_all+0x2a>
        f.FilterBank = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	61fb      	str	r3, [r7, #28]
        f.SlaveStartFilterBank = 14;  // 14 以后给 CAN2
 80009a0:	230e      	movs	r3, #14
 80009a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80009a4:	e003      	b.n	80009ae <my_can_filter_init_recv_all+0x32>
    } else {
        f.FilterBank = 14;
 80009a6:	230e      	movs	r3, #14
 80009a8:	61fb      	str	r3, [r7, #28]
        f.SlaveStartFilterBank = 14;
 80009aa:	230e      	movs	r3, #14
 80009ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }

    f.FilterMode           = CAN_FILTERMODE_IDMASK;
 80009ae:	2300      	movs	r3, #0
 80009b0:	623b      	str	r3, [r7, #32]
    f.FilterScale          = CAN_FILTERSCALE_32BIT;
 80009b2:	2301      	movs	r3, #1
 80009b4:	627b      	str	r3, [r7, #36]	@ 0x24
    f.FilterIdHigh         = 0x0000;
 80009b6:	2300      	movs	r3, #0
 80009b8:	60bb      	str	r3, [r7, #8]
    f.FilterIdLow          = 0x0000;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
    f.FilterMaskIdHigh     = 0x0000;
 80009be:	2300      	movs	r3, #0
 80009c0:	613b      	str	r3, [r7, #16]
    f.FilterMaskIdLow      = 0x0000;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
    f.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 80009c6:	2300      	movs	r3, #0
 80009c8:	61bb      	str	r3, [r7, #24]
    f.FilterActivation     = ENABLE;
 80009ca:	2301      	movs	r3, #1
 80009cc:	62bb      	str	r3, [r7, #40]	@ 0x28

    (void)HAL_CAN_ConfigFilter(hcan, &f);
 80009ce:	f107 0308 	add.w	r3, r7, #8
 80009d2:	4619      	mov	r1, r3
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f000 fe4f 	bl	8001678 <HAL_CAN_ConfigFilter>

    /* 方案A：启动与中断放到 main.c，避免重复启动
       HAL_CAN_ActivateNotification(hcan, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY);
       HAL_CAN_Start(hcan);
    */
}
 80009da:	bf00      	nop
 80009dc:	3730      	adds	r7, #48	@ 0x30
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40006400 	.word	0x40006400

080009e8 <HAL_CAN_RxFifo0MsgPendingCallback>:

/* 接收回调：解析四路电机反馈，含 total_angle 累计 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b08d      	sub	sp, #52	@ 0x34
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rxHeader;
    uint8_t rxData[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) return;
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	f107 0210 	add.w	r2, r7, #16
 80009f8:	2100      	movs	r1, #0
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f000 ff5e 	bl	80018bc <HAL_CAN_GetRxMessage>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d142      	bne.n	8000a8c <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>

    switch (rxHeader.StdId) {
 8000a06:	693b      	ldr	r3, [r7, #16]
 8000a08:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000a0c:	2b03      	cmp	r3, #3
 8000a0e:	d83f      	bhi.n	8000a90 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>
    case CAN_3510Moto1_ID:
    case CAN_3510Moto2_ID:
    case CAN_3510Moto3_ID:
    case CAN_3510Moto4_ID:
    {
        uint8_t i = (uint8_t)(rxHeader.StdId - CAN_3510Moto1_ID);
 8000a10:	693b      	ldr	r3, [r7, #16]
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	3b01      	subs	r3, #1
 8000a16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (moto_chassis[i].msg_cnt++ <= 50) {
 8000a1a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000a1e:	491e      	ldr	r1, [pc, #120]	@ (8000a98 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000a20:	232c      	movs	r3, #44	@ 0x2c
 8000a22:	fb02 f303 	mul.w	r3, r2, r3
 8000a26:	440b      	add	r3, r1
 8000a28:	3328      	adds	r3, #40	@ 0x28
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	1c59      	adds	r1, r3, #1
 8000a2e:	481a      	ldr	r0, [pc, #104]	@ (8000a98 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000a30:	242c      	movs	r4, #44	@ 0x2c
 8000a32:	fb04 f202 	mul.w	r2, r4, r2
 8000a36:	4402      	add	r2, r0
 8000a38:	3228      	adds	r2, #40	@ 0x28
 8000a3a:	6011      	str	r1, [r2, #0]
 8000a3c:	2b32      	cmp	r3, #50	@ 0x32
 8000a3e:	d80e      	bhi.n	8000a5e <HAL_CAN_RxFifo0MsgPendingCallback+0x76>
            get_moto_offset(&moto_chassis[i], hcan, &rxHeader, rxData);
 8000a40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a44:	222c      	movs	r2, #44	@ 0x2c
 8000a46:	fb02 f303 	mul.w	r3, r2, r3
 8000a4a:	4a13      	ldr	r2, [pc, #76]	@ (8000a98 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000a4c:	1898      	adds	r0, r3, r2
 8000a4e:	f107 0308 	add.w	r3, r7, #8
 8000a52:	f107 0210 	add.w	r2, r7, #16
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	f000 f88c 	bl	8000b74 <get_moto_offset>
 8000a5c:	e00d      	b.n	8000a7a <HAL_CAN_RxFifo0MsgPendingCallback+0x92>
        } else {
            get_moto_measure(&moto_chassis[i], hcan, &rxHeader, rxData);
 8000a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000a62:	222c      	movs	r2, #44	@ 0x2c
 8000a64:	fb02 f303 	mul.w	r3, r2, r3
 8000a68:	4a0b      	ldr	r2, [pc, #44]	@ (8000a98 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000a6a:	1898      	adds	r0, r3, r2
 8000a6c:	f107 0308 	add.w	r3, r7, #8
 8000a70:	f107 0210 	add.w	r2, r7, #16
 8000a74:	6879      	ldr	r1, [r7, #4]
 8000a76:	f000 f813 	bl	8000aa0 <get_moto_measure>
        }
        /* 可选镜像 */
        get_moto_measure(&moto_info, hcan, &rxHeader, rxData);
 8000a7a:	f107 0308 	add.w	r3, r7, #8
 8000a7e:	f107 0210 	add.w	r2, r7, #16
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000a86:	f000 f80b 	bl	8000aa0 <get_moto_measure>
        break;
 8000a8a:	e002      	b.n	8000a92 <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rxHeader, rxData) != HAL_OK) return;
 8000a8c:	bf00      	nop
 8000a8e:	e000      	b.n	8000a92 <HAL_CAN_RxFifo0MsgPendingCallback+0xaa>
    }
    default:
        break;
 8000a90:	bf00      	nop
    }
}
 8000a92:	3734      	adds	r7, #52	@ 0x34
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd90      	pop	{r4, r7, pc}
 8000a98:	2000018c 	.word	0x2000018c
 8000a9c:	2000023c 	.word	0x2000023c

08000aa0 <get_moto_measure>:
   [0..1]=encoder(0..8191), [2..3]=speed_rpm(int16), [4..5]=iq_counts(int16), [6]=temp */
void get_moto_measure(moto_measure_t *ptr,
                      CAN_HandleTypeDef* hcan,
                      const CAN_RxHeaderTypeDef* hdr,
                      const uint8_t data[8])
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	b087      	sub	sp, #28
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	60f8      	str	r0, [r7, #12]
 8000aa8:	60b9      	str	r1, [r7, #8]
 8000aaa:	607a      	str	r2, [r7, #4]
 8000aac:	603b      	str	r3, [r7, #0]
    (void)hcan; (void)hdr;

    ptr->last_angle = ptr->angle;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	891a      	ldrh	r2, [r3, #8]
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	815a      	strh	r2, [r3, #10]

    ptr->angle         = (uint16_t)((data[0] << 8) | data[1]);     // 0~8191
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	b21b      	sxth	r3, r3
 8000abc:	021b      	lsls	r3, r3, #8
 8000abe:	b21a      	sxth	r2, r3
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	3301      	adds	r3, #1
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b21b      	sxth	r3, r3
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	b21b      	sxth	r3, r3
 8000acc:	b29a      	uxth	r2, r3
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	811a      	strh	r2, [r3, #8]
    ptr->speed_rpm     = (int16_t)((data[2] << 8) | data[3]);      // 速度（rpm）
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	781b      	ldrb	r3, [r3, #0]
 8000ad8:	b21b      	sxth	r3, r3
 8000ada:	021b      	lsls	r3, r3, #8
 8000adc:	b21a      	sxth	r2, r3
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	3303      	adds	r3, #3
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b21b      	sxth	r3, r3
 8000ae6:	4313      	orrs	r3, r2
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	801a      	strh	r2, [r3, #0]
    ptr->given_current = (int16_t)((data[4] << 8) | data[5]);      // 电流（counts，原始）
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	3304      	adds	r3, #4
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b21b      	sxth	r3, r3
 8000af6:	021b      	lsls	r3, r3, #8
 8000af8:	b21a      	sxth	r2, r3
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	3305      	adds	r3, #5
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	b21b      	sxth	r3, r3
 8000b02:	4313      	orrs	r3, r2
 8000b04:	b21a      	sxth	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	809a      	strh	r2, [r3, #4]
    ptr->real_current  = ptr->given_current;                       // 等价别名，兼容旧代码
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	805a      	strh	r2, [r3, #2]
    ptr->hall          = data[6];
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	3306      	adds	r3, #6
 8000b18:	781a      	ldrb	r2, [r3, #0]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	719a      	strb	r2, [r3, #6]

    /* 跨圈判定：维护 round_cnt */
    int32_t delta = (int32_t)ptr->angle - (int32_t)ptr->last_angle;
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	891b      	ldrh	r3, [r3, #8]
 8000b22:	461a      	mov	r2, r3
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	895b      	ldrh	r3, [r3, #10]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
    if (delta > 4096)       ptr->round_cnt--;   /* 反向跨 0 → 8191 */
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000b32:	dd05      	ble.n	8000b40 <get_moto_measure+0xa0>
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	1e5a      	subs	r2, r3, #1
 8000b3a:	68fb      	ldr	r3, [r7, #12]
 8000b3c:	611a      	str	r2, [r3, #16]
 8000b3e:	e008      	b.n	8000b52 <get_moto_measure+0xb2>
    else if (delta < -4096) ptr->round_cnt++;   /* 正向跨 8191 → 0 */
 8000b40:	697b      	ldr	r3, [r7, #20]
 8000b42:	f513 5f80 	cmn.w	r3, #4096	@ 0x1000
 8000b46:	da04      	bge.n	8000b52 <get_moto_measure+0xb2>
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	691b      	ldr	r3, [r3, #16]
 8000b4c:	1c5a      	adds	r2, r3, #1
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	611a      	str	r2, [r3, #16]

    /* 累计角度：N*8192 + (angle - offset) */
    ptr->total_angle = ptr->round_cnt * 8192
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	691b      	ldr	r3, [r3, #16]
 8000b56:	035b      	lsls	r3, r3, #13
                     + (int32_t)ptr->angle
 8000b58:	68fa      	ldr	r2, [r7, #12]
 8000b5a:	8912      	ldrh	r2, [r2, #8]
 8000b5c:	4413      	add	r3, r2
                     - (int32_t)ptr->offset_angle;
 8000b5e:	68fa      	ldr	r2, [r7, #12]
 8000b60:	8992      	ldrh	r2, [r2, #12]
 8000b62:	1a9a      	subs	r2, r3, r2
    ptr->total_angle = ptr->round_cnt * 8192
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	615a      	str	r2, [r3, #20]
}
 8000b68:	bf00      	nop
 8000b6a:	371c      	adds	r7, #28
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <get_moto_offset>:
/* 前 50 帧做原点偏置学习 */
void get_moto_offset(moto_measure_t *ptr,
                     CAN_HandleTypeDef* hcan,
                     const CAN_RxHeaderTypeDef* hdr,
                     const uint8_t data[8])
{
 8000b74:	b480      	push	{r7}
 8000b76:	b085      	sub	sp, #20
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
 8000b80:	603b      	str	r3, [r7, #0]
    (void)hcan; (void)hdr;
    ptr->angle = (uint16_t)((data[0] << 8) | data[1]);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	021b      	lsls	r3, r3, #8
 8000b8a:	b21a      	sxth	r2, r3
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	b21b      	sxth	r3, r3
 8000b94:	4313      	orrs	r3, r2
 8000b96:	b21b      	sxth	r3, r3
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	811a      	strh	r2, [r3, #8]
    ptr->offset_angle = ptr->angle;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	891a      	ldrh	r2, [r3, #8]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	819a      	strh	r2, [r3, #12]
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */
  /* 可按需改 Prescaler/时序参数以匹配总线波特率 */
  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bb8:	4b17      	ldr	r3, [pc, #92]	@ (8000c18 <MX_CAN1_Init+0x64>)
 8000bba:	4a18      	ldr	r2, [pc, #96]	@ (8000c1c <MX_CAN1_Init+0x68>)
 8000bbc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 5;
 8000bbe:	4b16      	ldr	r3, [pc, #88]	@ (8000c18 <MX_CAN1_Init+0x64>)
 8000bc0:	2205      	movs	r2, #5
 8000bc2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bc4:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <MX_CAN1_Init+0x64>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bca:	4b13      	ldr	r3, [pc, #76]	@ (8000c18 <MX_CAN1_Init+0x64>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_3TQ;
 8000bd0:	4b11      	ldr	r3, [pc, #68]	@ (8000c18 <MX_CAN1_Init+0x64>)
 8000bd2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000bd6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000c18 <MX_CAN1_Init+0x64>)
 8000bda:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000bde:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000be0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c18 <MX_CAN1_Init+0x64>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c18 <MX_CAN1_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	@ (8000c18 <MX_CAN1_Init+0x64>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	@ (8000c18 <MX_CAN1_Init+0x64>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	@ (8000c18 <MX_CAN1_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	@ (8000c18 <MX_CAN1_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	@ (8000c18 <MX_CAN1_Init+0x64>)
 8000c06:	f000 fc3b 	bl	8001480 <HAL_CAN_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000c10:	f000 fa6a 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  /* 注意：GPIO/时钟/NVIC 在 stm32f4xx_hal_msp.c 中由 Cube 自动生成 */
  /* USER CODE END CAN1_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000268 	.word	0x20000268
 8000c1c:	40006400 	.word	0x40006400

08000c20 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b08a      	sub	sp, #40	@ 0x28
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	609a      	str	r2, [r3, #8]
 8000c34:	60da      	str	r2, [r3, #12]
 8000c36:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a21      	ldr	r2, [pc, #132]	@ (8000cc4 <HAL_CAN_MspInit+0xa4>)
 8000c3e:	4293      	cmp	r3, r2
 8000c40:	d13b      	bne.n	8000cba <HAL_CAN_MspInit+0x9a>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c42:	2300      	movs	r3, #0
 8000c44:	613b      	str	r3, [r7, #16]
 8000c46:	4b20      	ldr	r3, [pc, #128]	@ (8000cc8 <HAL_CAN_MspInit+0xa8>)
 8000c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c4a:	4a1f      	ldr	r2, [pc, #124]	@ (8000cc8 <HAL_CAN_MspInit+0xa8>)
 8000c4c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000c50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000c52:	4b1d      	ldr	r3, [pc, #116]	@ (8000cc8 <HAL_CAN_MspInit+0xa8>)
 8000c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000c5a:	613b      	str	r3, [r7, #16]
 8000c5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60fb      	str	r3, [r7, #12]
 8000c62:	4b19      	ldr	r3, [pc, #100]	@ (8000cc8 <HAL_CAN_MspInit+0xa8>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	4a18      	ldr	r2, [pc, #96]	@ (8000cc8 <HAL_CAN_MspInit+0xa8>)
 8000c68:	f043 0308 	orr.w	r3, r3, #8
 8000c6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6e:	4b16      	ldr	r3, [pc, #88]	@ (8000cc8 <HAL_CAN_MspInit+0xa8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	f003 0308 	and.w	r3, r3, #8
 8000c76:	60fb      	str	r3, [r7, #12]
 8000c78:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c7a:	2303      	movs	r3, #3
 8000c7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c86:	2303      	movs	r3, #3
 8000c88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c8a:	2309      	movs	r3, #9
 8000c8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	480d      	ldr	r0, [pc, #52]	@ (8000ccc <HAL_CAN_MspInit+0xac>)
 8000c96:	f001 fa6b 	bl	8002170 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2105      	movs	r1, #5
 8000c9e:	2013      	movs	r0, #19
 8000ca0:	f001 fa3c 	bl	800211c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000ca4:	2013      	movs	r0, #19
 8000ca6:	f001 fa55 	bl	8002154 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000caa:	2200      	movs	r2, #0
 8000cac:	2105      	movs	r1, #5
 8000cae:	2014      	movs	r0, #20
 8000cb0:	f001 fa34 	bl	800211c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000cb4:	2014      	movs	r0, #20
 8000cb6:	f001 fa4d 	bl	8002154 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	@ 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40006400 	.word	0x40006400
 8000cc8:	40023800 	.word	0x40023800
 8000ccc:	40020c00 	.word	0x40020c00

08000cd0 <vApplicationGetIdleTaskMemory>:
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer,
                                    StackType_t **ppxIdleTaskStackBuffer,
                                    uint32_t *pulIdleTaskStackSize )
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b085      	sub	sp, #20
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	4a07      	ldr	r2, [pc, #28]	@ (8000cfc <vApplicationGetIdleTaskMemory+0x2c>)
 8000ce0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	4a06      	ldr	r2, [pc, #24]	@ (8000d00 <vApplicationGetIdleTaskMemory+0x30>)
 8000ce6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	2280      	movs	r2, #128	@ 0x80
 8000cec:	601a      	str	r2, [r3, #0]
}
 8000cee:	bf00      	nop
 8000cf0:	3714      	adds	r7, #20
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	20000294 	.word	0x20000294
 8000d00:	20000334 	.word	0x20000334

08000d04 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d04:	b5b0      	push	{r4, r5, r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8000d0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d34 <MX_FREERTOS_Init+0x30>)
 8000d0c:	1d3c      	adds	r4, r7, #4
 8000d0e:	461d      	mov	r5, r3
 8000d10:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d12:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d14:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d18:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4618      	mov	r0, r3
 8000d22:	f003 fa66 	bl	80041f2 <osThreadCreate>
 8000d26:	4603      	mov	r3, r0
 8000d28:	4a03      	ldr	r2, [pc, #12]	@ (8000d38 <MX_FREERTOS_Init+0x34>)
 8000d2a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* 创建默认任务，入口函数 StartDefaultTask */
  /* USER CODE END RTOS_THREADS */

}
 8000d2c:	bf00      	nop
 8000d2e:	3720      	adds	r7, #32
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bdb0      	pop	{r4, r5, r7, pc}
 8000d34:	080058bc 	.word	0x080058bc
 8000d38:	20000290 	.word	0x20000290

08000d3c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* 启动你的业务逻辑循环 */
  app_control_start();
 8000d44:	f7ff fca2 	bl	800068c <app_control_start>

  /* 如果 app_control_start() 内部包含死循环，
     这里不会再返回。如果只是初始化，可以在这继续加代码 */
  /* USER CODE END StartDefaultTask */
}
 8000d48:	bf00      	nop
 8000d4a:	3708      	adds	r7, #8
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08c      	sub	sp, #48	@ 0x30
 8000d54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 031c 	add.w	r3, r7, #28
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d66:	2300      	movs	r3, #0
 8000d68:	61bb      	str	r3, [r7, #24]
 8000d6a:	4b46      	ldr	r3, [pc, #280]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	4a45      	ldr	r2, [pc, #276]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000d70:	f043 0301 	orr.w	r3, r3, #1
 8000d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d76:	4b43      	ldr	r3, [pc, #268]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	61bb      	str	r3, [r7, #24]
 8000d80:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]
 8000d86:	4b3f      	ldr	r3, [pc, #252]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8a:	4a3e      	ldr	r2, [pc, #248]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000d8c:	f043 0308 	orr.w	r3, r3, #8
 8000d90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d92:	4b3c      	ldr	r3, [pc, #240]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d96:	f003 0308 	and.w	r3, r3, #8
 8000d9a:	617b      	str	r3, [r7, #20]
 8000d9c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	613b      	str	r3, [r7, #16]
 8000da2:	4b38      	ldr	r3, [pc, #224]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da6:	4a37      	ldr	r2, [pc, #220]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000da8:	f043 0320 	orr.w	r3, r3, #32
 8000dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dae:	4b35      	ldr	r3, [pc, #212]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db2:	f003 0320 	and.w	r3, r3, #32
 8000db6:	613b      	str	r3, [r7, #16]
 8000db8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	60fb      	str	r3, [r7, #12]
 8000dbe:	4b31      	ldr	r3, [pc, #196]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc2:	4a30      	ldr	r2, [pc, #192]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000dc4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dca:	4b2e      	ldr	r3, [pc, #184]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	4b2a      	ldr	r3, [pc, #168]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dde:	4a29      	ldr	r2, [pc, #164]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000de0:	f043 0302 	orr.w	r3, r3, #2
 8000de4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de6:	4b27      	ldr	r3, [pc, #156]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dea:	f003 0302 	and.w	r3, r3, #2
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	4b23      	ldr	r3, [pc, #140]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dfa:	4a22      	ldr	r2, [pc, #136]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000dfc:	f043 0310 	orr.w	r3, r3, #16
 8000e00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e02:	4b20      	ldr	r3, [pc, #128]	@ (8000e84 <MX_GPIO_Init+0x134>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	f003 0310 	and.w	r3, r3, #16
 8000e0a:	607b      	str	r3, [r7, #4]
 8000e0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8000e0e:	2201      	movs	r2, #1
 8000e10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e14:	481c      	ldr	r0, [pc, #112]	@ (8000e88 <MX_GPIO_Init+0x138>)
 8000e16:	f001 fb6f 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e20:	481a      	ldr	r0, [pc, #104]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000e22:	f001 fb69 	bl	80024f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8000e26:	2304      	movs	r3, #4
 8000e28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 031c 	add.w	r3, r7, #28
 8000e36:	4619      	mov	r1, r3
 8000e38:	4815      	ldr	r0, [pc, #84]	@ (8000e90 <MX_GPIO_Init+0x140>)
 8000e3a:	f001 f999 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED2_Pin */
  GPIO_InitStruct.Pin = LED2_Pin;
 8000e3e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 031c 	add.w	r3, r7, #28
 8000e54:	4619      	mov	r1, r3
 8000e56:	480c      	ldr	r0, [pc, #48]	@ (8000e88 <MX_GPIO_Init+0x138>)
 8000e58:	f001 f98a 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8000e5c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000e76:	f001 f97b 	bl	8002170 <HAL_GPIO_Init>

}
 8000e7a:	bf00      	nop
 8000e7c:	3730      	adds	r7, #48	@ 0x30
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023800 	.word	0x40023800
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40021400 	.word	0x40021400
 8000e90:	40020400 	.word	0x40020400

08000e94 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000e9a:	4a1c      	ldr	r2, [pc, #112]	@ (8000f0c <MX_I2C2_Init+0x78>)
 8000e9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ea0:	4a1b      	ldr	r2, [pc, #108]	@ (8000f10 <MX_I2C2_Init+0x7c>)
 8000ea2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000eaa:	4b17      	ldr	r3, [pc, #92]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000eb0:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000eb2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000eb6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000eb8:	4b13      	ldr	r3, [pc, #76]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ebe:	4b12      	ldr	r3, [pc, #72]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ec4:	4b10      	ldr	r3, [pc, #64]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000eca:	4b0f      	ldr	r3, [pc, #60]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ed0:	480d      	ldr	r0, [pc, #52]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ed2:	f001 fb45 	bl	8002560 <HAL_I2C_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000edc:	f000 f904 	bl	80010e8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	4809      	ldr	r0, [pc, #36]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ee4:	f002 f988 	bl	80031f8 <HAL_I2CEx_ConfigAnalogFilter>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000eee:	f000 f8fb 	bl	80010e8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4804      	ldr	r0, [pc, #16]	@ (8000f08 <MX_I2C2_Init+0x74>)
 8000ef6:	f002 f9bb 	bl	8003270 <HAL_I2CEx_ConfigDigitalFilter>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000f00:	f000 f8f2 	bl	80010e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000f04:	bf00      	nop
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000534 	.word	0x20000534
 8000f0c:	40005800 	.word	0x40005800
 8000f10:	00061a80 	.word	0x00061a80

08000f14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	@ 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C2)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a19      	ldr	r2, [pc, #100]	@ (8000f98 <HAL_I2C_MspInit+0x84>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d12b      	bne.n	8000f8e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	613b      	str	r3, [r7, #16]
 8000f3a:	4b18      	ldr	r3, [pc, #96]	@ (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a17      	ldr	r2, [pc, #92]	@ (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f40:	f043 0320 	orr.w	r3, r3, #32
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b15      	ldr	r3, [pc, #84]	@ (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0320 	and.w	r3, r3, #32
 8000f4e:	613b      	str	r3, [r7, #16]
 8000f50:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000f52:	2303      	movs	r3, #3
 8000f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f56:	2312      	movs	r3, #18
 8000f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000f62:	2304      	movs	r3, #4
 8000f64:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f66:	f107 0314 	add.w	r3, r7, #20
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480c      	ldr	r0, [pc, #48]	@ (8000fa0 <HAL_I2C_MspInit+0x8c>)
 8000f6e:	f001 f8ff 	bl	8002170 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b09      	ldr	r3, [pc, #36]	@ (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f7a:	4a08      	ldr	r2, [pc, #32]	@ (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f7c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f80:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f82:	4b06      	ldr	r3, [pc, #24]	@ (8000f9c <HAL_I2C_MspInit+0x88>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f86:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3728      	adds	r7, #40	@ 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40005800 	.word	0x40005800
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40021400 	.word	0x40021400

08000fa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa8:	f000 fa28 	bl	80013fc <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fac:	f000 f818 	bl	8000fe0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fb0:	f7ff fece 	bl	8000d50 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000fb4:	f7ff fdfe 	bl	8000bb4 <MX_CAN1_Init>
  MX_I2C2_Init();
 8000fb8:	f7ff ff6c 	bl	8000e94 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  /* —— 自定义 CAN：过滤器 + 启动 + 中断 —— */
  my_can_filter_init_recv_all(&hcan1);
 8000fbc:	4807      	ldr	r0, [pc, #28]	@ (8000fdc <main+0x38>)
 8000fbe:	f7ff fcdd 	bl	800097c <my_can_filter_init_recv_all>
  HAL_CAN_Start(&hcan1);
 8000fc2:	4806      	ldr	r0, [pc, #24]	@ (8000fdc <main+0x38>)
 8000fc4:	f000 fc36 	bl	8001834 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000fc8:	2102      	movs	r1, #2
 8000fca:	4804      	ldr	r0, [pc, #16]	@ (8000fdc <main+0x38>)
 8000fcc:	f000 fd98 	bl	8001b00 <HAL_CAN_ActivateNotification>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8000fd0:	f7ff fe98 	bl	8000d04 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000fd4:	f003 f906 	bl	80041e4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <main+0x34>
 8000fdc:	20000268 	.word	0x20000268

08000fe0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b094      	sub	sp, #80	@ 0x50
 8000fe4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fe6:	f107 0320 	add.w	r3, r7, #32
 8000fea:	2230      	movs	r2, #48	@ 0x30
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f004 fb70 	bl	80056d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
 8001008:	4b2c      	ldr	r3, [pc, #176]	@ (80010bc <SystemClock_Config+0xdc>)
 800100a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100c:	4a2b      	ldr	r2, [pc, #172]	@ (80010bc <SystemClock_Config+0xdc>)
 800100e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001012:	6413      	str	r3, [r2, #64]	@ 0x40
 8001014:	4b29      	ldr	r3, [pc, #164]	@ (80010bc <SystemClock_Config+0xdc>)
 8001016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001018:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001020:	2300      	movs	r3, #0
 8001022:	607b      	str	r3, [r7, #4]
 8001024:	4b26      	ldr	r3, [pc, #152]	@ (80010c0 <SystemClock_Config+0xe0>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a25      	ldr	r2, [pc, #148]	@ (80010c0 <SystemClock_Config+0xe0>)
 800102a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800102e:	6013      	str	r3, [r2, #0]
 8001030:	4b23      	ldr	r3, [pc, #140]	@ (80010c0 <SystemClock_Config+0xe0>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001038:	607b      	str	r3, [r7, #4]
 800103a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800103c:	2301      	movs	r3, #1
 800103e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001040:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001044:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001046:	2302      	movs	r3, #2
 8001048:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800104a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800104e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8001050:	230c      	movs	r3, #12
 8001052:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 360;
 8001054:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8001058:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800105a:	2302      	movs	r3, #2
 800105c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800105e:	2304      	movs	r3, #4
 8001060:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001062:	f107 0320 	add.w	r3, r7, #32
 8001066:	4618      	mov	r0, r3
 8001068:	f002 f992 	bl	8003390 <HAL_RCC_OscConfig>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001072:	f000 f839 	bl	80010e8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001076:	f002 f93b 	bl	80032f0 <HAL_PWREx_EnableOverDrive>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001080:	f000 f832 	bl	80010e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001084:	230f      	movs	r3, #15
 8001086:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001088:	2302      	movs	r3, #2
 800108a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001090:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001094:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001096:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800109a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800109c:	f107 030c 	add.w	r3, r7, #12
 80010a0:	2105      	movs	r1, #5
 80010a2:	4618      	mov	r0, r3
 80010a4:	f002 fbec 	bl	8003880 <HAL_RCC_ClockConfig>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80010ae:	f000 f81b 	bl	80010e8 <Error_Handler>
  }
}
 80010b2:	bf00      	nop
 80010b4:	3750      	adds	r7, #80	@ 0x50
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40007000 	.word	0x40007000

080010c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a04      	ldr	r2, [pc, #16]	@ (80010e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d101      	bne.n	80010da <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80010d6:	f000 f9b3 	bl	8001440 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40001000 	.word	0x40001000

080010e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010ec:	b672      	cpsid	i
}
 80010ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  __disable_irq();
  while (1) {
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <Error_Handler+0x8>

080010f4 <pid_param_init>:
                           uint32_t maxout,
                           uint32_t intergral_limit,
                           float kp,
                           float ki,
                           float kd)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	61f8      	str	r0, [r7, #28]
 80010fc:	61b9      	str	r1, [r7, #24]
 80010fe:	617a      	str	r2, [r7, #20]
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	ed87 0a03 	vstr	s0, [r7, #12]
 8001106:	edc7 0a02 	vstr	s1, [r7, #8]
 800110a:	ed87 1a01 	vstr	s2, [r7, #4]
    pid->IntegralLimit = intergral_limit;
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	661a      	str	r2, [r3, #96]	@ 0x60
    pid->MaxOutput     = maxout;
 8001114:	69fb      	ldr	r3, [r7, #28]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	65da      	str	r2, [r3, #92]	@ 0x5c
    pid->pid_mode      = mode;
 800111a:	69fb      	ldr	r3, [r7, #28]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	659a      	str	r2, [r3, #88]	@ 0x58

    pid->p = kp;
 8001120:	69fb      	ldr	r3, [r7, #28]
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	601a      	str	r2, [r3, #0]
    pid->i = ki;
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	68ba      	ldr	r2, [r7, #8]
 800112a:	605a      	str	r2, [r3, #4]
    pid->d = kd;
 800112c:	69fb      	ldr	r3, [r7, #28]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	609a      	str	r2, [r3, #8]
}
 8001132:	bf00      	nop
 8001134:	3724      	adds	r7, #36	@ 0x24
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <pid_reset>:

static void pid_reset(pid_t *pid, float kp, float ki, float kd)
{
 800113e:	b480      	push	{r7}
 8001140:	b085      	sub	sp, #20
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	ed87 0a02 	vstr	s0, [r7, #8]
 800114a:	edc7 0a01 	vstr	s1, [r7, #4]
 800114e:	ed87 1a00 	vstr	s2, [r7]
    pid->p = kp;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	68ba      	ldr	r2, [r7, #8]
 8001156:	601a      	str	r2, [r3, #0]
    pid->i = ki;
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	605a      	str	r2, [r3, #4]
    pid->d = kd;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	609a      	str	r2, [r3, #8]
}
 8001164:	bf00      	nop
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <PID_struct_init>:
void PID_struct_init(pid_t* pid,
                     uint32_t mode,
                     uint32_t maxout,
                     uint32_t intergral_limit,
                     float kp, float ki, float kd)
{
 8001170:	b590      	push	{r4, r7, lr}
 8001172:	b089      	sub	sp, #36	@ 0x24
 8001174:	af00      	add	r7, sp, #0
 8001176:	61f8      	str	r0, [r7, #28]
 8001178:	61b9      	str	r1, [r7, #24]
 800117a:	617a      	str	r2, [r7, #20]
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001182:	edc7 0a02 	vstr	s1, [r7, #8]
 8001186:	ed87 1a01 	vstr	s2, [r7, #4]
    pid->f_param_init = pid_param_init;
 800118a:	69fb      	ldr	r3, [r7, #28]
 800118c:	4a0a      	ldr	r2, [pc, #40]	@ (80011b8 <PID_struct_init+0x48>)
 800118e:	665a      	str	r2, [r3, #100]	@ 0x64
    pid->f_pid_reset  = pid_reset;
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	4a0a      	ldr	r2, [pc, #40]	@ (80011bc <PID_struct_init+0x4c>)
 8001194:	669a      	str	r2, [r3, #104]	@ 0x68
    pid->f_param_init(pid, mode, maxout, intergral_limit, kp, ki, kd);
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 800119a:	ed97 1a01 	vldr	s2, [r7, #4]
 800119e:	edd7 0a02 	vldr	s1, [r7, #8]
 80011a2:	ed97 0a03 	vldr	s0, [r7, #12]
 80011a6:	693b      	ldr	r3, [r7, #16]
 80011a8:	697a      	ldr	r2, [r7, #20]
 80011aa:	69b9      	ldr	r1, [r7, #24]
 80011ac:	69f8      	ldr	r0, [r7, #28]
 80011ae:	47a0      	blx	r4
}
 80011b0:	bf00      	nop
 80011b2:	3724      	adds	r7, #36	@ 0x24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd90      	pop	{r4, r7, pc}
 80011b8:	080010f5 	.word	0x080010f5
 80011bc:	0800113f 	.word	0x0800113f

080011c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	607b      	str	r3, [r7, #4]
 80011ca:	4b12      	ldr	r3, [pc, #72]	@ (8001214 <HAL_MspInit+0x54>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	4a11      	ldr	r2, [pc, #68]	@ (8001214 <HAL_MspInit+0x54>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001214 <HAL_MspInit+0x54>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011de:	607b      	str	r3, [r7, #4]
 80011e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	603b      	str	r3, [r7, #0]
 80011e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001214 <HAL_MspInit+0x54>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <HAL_MspInit+0x54>)
 80011ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011f2:	4b08      	ldr	r3, [pc, #32]	@ (8001214 <HAL_MspInit+0x54>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80011fe:	2200      	movs	r2, #0
 8001200:	210f      	movs	r1, #15
 8001202:	f06f 0001 	mvn.w	r0, #1
 8001206:	f000 ff89 	bl	800211c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40023800 	.word	0x40023800

08001218 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08e      	sub	sp, #56	@ 0x38
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001220:	2300      	movs	r3, #0
 8001222:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001224:	2300      	movs	r3, #0
 8001226:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001228:	2300      	movs	r3, #0
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	4b33      	ldr	r3, [pc, #204]	@ (80012fc <HAL_InitTick+0xe4>)
 800122e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001230:	4a32      	ldr	r2, [pc, #200]	@ (80012fc <HAL_InitTick+0xe4>)
 8001232:	f043 0310 	orr.w	r3, r3, #16
 8001236:	6413      	str	r3, [r2, #64]	@ 0x40
 8001238:	4b30      	ldr	r3, [pc, #192]	@ (80012fc <HAL_InitTick+0xe4>)
 800123a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800123c:	f003 0310 	and.w	r3, r3, #16
 8001240:	60fb      	str	r3, [r7, #12]
 8001242:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001244:	f107 0210 	add.w	r2, r7, #16
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	4611      	mov	r1, r2
 800124e:	4618      	mov	r0, r3
 8001250:	f002 fce2 	bl	8003c18 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001254:	6a3b      	ldr	r3, [r7, #32]
 8001256:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001258:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800125a:	2b00      	cmp	r3, #0
 800125c:	d103      	bne.n	8001266 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800125e:	f002 fcc7 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 8001262:	6378      	str	r0, [r7, #52]	@ 0x34
 8001264:	e004      	b.n	8001270 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001266:	f002 fcc3 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 800126a:	4603      	mov	r3, r0
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001270:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001272:	4a23      	ldr	r2, [pc, #140]	@ (8001300 <HAL_InitTick+0xe8>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	0c9b      	lsrs	r3, r3, #18
 800127a:	3b01      	subs	r3, #1
 800127c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800127e:	4b21      	ldr	r3, [pc, #132]	@ (8001304 <HAL_InitTick+0xec>)
 8001280:	4a21      	ldr	r2, [pc, #132]	@ (8001308 <HAL_InitTick+0xf0>)
 8001282:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001284:	4b1f      	ldr	r3, [pc, #124]	@ (8001304 <HAL_InitTick+0xec>)
 8001286:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800128a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800128c:	4a1d      	ldr	r2, [pc, #116]	@ (8001304 <HAL_InitTick+0xec>)
 800128e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001290:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001292:	4b1c      	ldr	r3, [pc, #112]	@ (8001304 <HAL_InitTick+0xec>)
 8001294:	2200      	movs	r2, #0
 8001296:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001298:	4b1a      	ldr	r3, [pc, #104]	@ (8001304 <HAL_InitTick+0xec>)
 800129a:	2200      	movs	r2, #0
 800129c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129e:	4b19      	ldr	r3, [pc, #100]	@ (8001304 <HAL_InitTick+0xec>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80012a4:	4817      	ldr	r0, [pc, #92]	@ (8001304 <HAL_InitTick+0xec>)
 80012a6:	f002 fce9 	bl	8003c7c <HAL_TIM_Base_Init>
 80012aa:	4603      	mov	r3, r0
 80012ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80012b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d11b      	bne.n	80012f0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012b8:	4812      	ldr	r0, [pc, #72]	@ (8001304 <HAL_InitTick+0xec>)
 80012ba:	f002 fd39 	bl	8003d30 <HAL_TIM_Base_Start_IT>
 80012be:	4603      	mov	r3, r0
 80012c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80012c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d111      	bne.n	80012f0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80012cc:	2036      	movs	r0, #54	@ 0x36
 80012ce:	f000 ff41 	bl	8002154 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2b0f      	cmp	r3, #15
 80012d6:	d808      	bhi.n	80012ea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012d8:	2200      	movs	r2, #0
 80012da:	6879      	ldr	r1, [r7, #4]
 80012dc:	2036      	movs	r0, #54	@ 0x36
 80012de:	f000 ff1d 	bl	800211c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012e2:	4a0a      	ldr	r2, [pc, #40]	@ (800130c <HAL_InitTick+0xf4>)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	e002      	b.n	80012f0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3738      	adds	r7, #56	@ 0x38
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	40023800 	.word	0x40023800
 8001300:	431bde83 	.word	0x431bde83
 8001304:	20000738 	.word	0x20000738
 8001308:	40001000 	.word	0x40001000
 800130c:	20000008 	.word	0x20000008

08001310 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001314:	bf00      	nop
 8001316:	e7fd      	b.n	8001314 <NMI_Handler+0x4>

08001318 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800131c:	bf00      	nop
 800131e:	e7fd      	b.n	800131c <HardFault_Handler+0x4>

08001320 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001324:	bf00      	nop
 8001326:	e7fd      	b.n	8001324 <MemManage_Handler+0x4>

08001328 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800132c:	bf00      	nop
 800132e:	e7fd      	b.n	800132c <BusFault_Handler+0x4>

08001330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001334:	bf00      	nop
 8001336:	e7fd      	b.n	8001334 <UsageFault_Handler+0x4>

08001338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800133c:	bf00      	nop
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
	...

08001348 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800134c:	4802      	ldr	r0, [pc, #8]	@ (8001358 <CAN1_TX_IRQHandler+0x10>)
 800134e:	f000 fbfd 	bl	8001b4c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001352:	bf00      	nop
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000268 	.word	0x20000268

0800135c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001360:	4802      	ldr	r0, [pc, #8]	@ (800136c <CAN1_RX0_IRQHandler+0x10>)
 8001362:	f000 fbf3 	bl	8001b4c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000268 	.word	0x20000268

08001370 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001374:	4802      	ldr	r0, [pc, #8]	@ (8001380 <TIM6_DAC_IRQHandler+0x10>)
 8001376:	f002 fd4b 	bl	8003e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800137a:	bf00      	nop
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	20000738 	.word	0x20000738

08001384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001388:	4b06      	ldr	r3, [pc, #24]	@ (80013a4 <SystemInit+0x20>)
 800138a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800138e:	4a05      	ldr	r2, [pc, #20]	@ (80013a4 <SystemInit+0x20>)
 8001390:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001394:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001398:	bf00      	nop
 800139a:	46bd      	mov	sp, r7
 800139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e000ed00 	.word	0xe000ed00

080013a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80013e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ac:	f7ff ffea 	bl	8001384 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013b0:	480c      	ldr	r0, [pc, #48]	@ (80013e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013b2:	490d      	ldr	r1, [pc, #52]	@ (80013e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013b4:	4a0d      	ldr	r2, [pc, #52]	@ (80013ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013b8:	e002      	b.n	80013c0 <LoopCopyDataInit>

080013ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013be:	3304      	adds	r3, #4

080013c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013c4:	d3f9      	bcc.n	80013ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013c6:	4a0a      	ldr	r2, [pc, #40]	@ (80013f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013c8:	4c0a      	ldr	r4, [pc, #40]	@ (80013f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013cc:	e001      	b.n	80013d2 <LoopFillZerobss>

080013ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013d0:	3204      	adds	r2, #4

080013d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013d4:	d3fb      	bcc.n	80013ce <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013d6:	f004 f985 	bl	80056e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013da:	f7ff fde3 	bl	8000fa4 <main>
  bx  lr    
 80013de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013e8:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80013ec:	08005908 	.word	0x08005908
  ldr r2, =_sbss
 80013f0:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80013f4:	20004618 	.word	0x20004618

080013f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013f8:	e7fe      	b.n	80013f8 <ADC_IRQHandler>
	...

080013fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001400:	4b0e      	ldr	r3, [pc, #56]	@ (800143c <HAL_Init+0x40>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a0d      	ldr	r2, [pc, #52]	@ (800143c <HAL_Init+0x40>)
 8001406:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800140a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800140c:	4b0b      	ldr	r3, [pc, #44]	@ (800143c <HAL_Init+0x40>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a0a      	ldr	r2, [pc, #40]	@ (800143c <HAL_Init+0x40>)
 8001412:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001418:	4b08      	ldr	r3, [pc, #32]	@ (800143c <HAL_Init+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a07      	ldr	r2, [pc, #28]	@ (800143c <HAL_Init+0x40>)
 800141e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001424:	2003      	movs	r0, #3
 8001426:	f000 fe6e 	bl	8002106 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142a:	200f      	movs	r0, #15
 800142c:	f7ff fef4 	bl	8001218 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001430:	f7ff fec6 	bl	80011c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023c00 	.word	0x40023c00

08001440 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001444:	4b06      	ldr	r3, [pc, #24]	@ (8001460 <HAL_IncTick+0x20>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	461a      	mov	r2, r3
 800144a:	4b06      	ldr	r3, [pc, #24]	@ (8001464 <HAL_IncTick+0x24>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4413      	add	r3, r2
 8001450:	4a04      	ldr	r2, [pc, #16]	@ (8001464 <HAL_IncTick+0x24>)
 8001452:	6013      	str	r3, [r2, #0]
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	2000000c 	.word	0x2000000c
 8001464:	20000780 	.word	0x20000780

08001468 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b03      	ldr	r3, [pc, #12]	@ (800147c <HAL_GetTick+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000780 	.word	0x20000780

08001480 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e0ed      	b.n	800166e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	2b00      	cmp	r3, #0
 800149c:	d102      	bne.n	80014a4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fbbe 	bl	8000c20 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0201 	orr.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80014b4:	f7ff ffd8 	bl	8001468 <HAL_GetTick>
 80014b8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014ba:	e012      	b.n	80014e2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80014bc:	f7ff ffd4 	bl	8001468 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b0a      	cmp	r3, #10
 80014c8:	d90b      	bls.n	80014e2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ce:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2205      	movs	r2, #5
 80014da:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e0c5      	b.n	800166e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d0e5      	beq.n	80014bc <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0202 	bic.w	r2, r2, #2
 80014fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001500:	f7ff ffb2 	bl	8001468 <HAL_GetTick>
 8001504:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001506:	e012      	b.n	800152e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001508:	f7ff ffae 	bl	8001468 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d90b      	bls.n	800152e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800151a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2205      	movs	r2, #5
 8001526:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e09f      	b.n	800166e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1e5      	bne.n	8001508 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7e1b      	ldrb	r3, [r3, #24]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d108      	bne.n	8001556 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e007      	b.n	8001566 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681a      	ldr	r2, [r3, #0]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001564:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	7e5b      	ldrb	r3, [r3, #25]
 800156a:	2b01      	cmp	r3, #1
 800156c:	d108      	bne.n	8001580 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	e007      	b.n	8001590 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800158e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	7e9b      	ldrb	r3, [r3, #26]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d108      	bne.n	80015aa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0220 	orr.w	r2, r2, #32
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	e007      	b.n	80015ba <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f022 0220 	bic.w	r2, r2, #32
 80015b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7edb      	ldrb	r3, [r3, #27]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d108      	bne.n	80015d4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f022 0210 	bic.w	r2, r2, #16
 80015d0:	601a      	str	r2, [r3, #0]
 80015d2:	e007      	b.n	80015e4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f042 0210 	orr.w	r2, r2, #16
 80015e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	7f1b      	ldrb	r3, [r3, #28]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d108      	bne.n	80015fe <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0208 	orr.w	r2, r2, #8
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e007      	b.n	800160e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0208 	bic.w	r2, r2, #8
 800160c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	7f5b      	ldrb	r3, [r3, #29]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f042 0204 	orr.w	r2, r2, #4
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	e007      	b.n	8001638 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0204 	bic.w	r2, r2, #4
 8001636:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	689a      	ldr	r2, [r3, #8]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	691b      	ldr	r3, [r3, #16]
 8001646:	431a      	orrs	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	ea42 0103 	orr.w	r1, r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	1e5a      	subs	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3710      	adds	r7, #16
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001678:	b480      	push	{r7}
 800167a:	b087      	sub	sp, #28
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001688:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 800168a:	7dfb      	ldrb	r3, [r7, #23]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d003      	beq.n	8001698 <HAL_CAN_ConfigFilter+0x20>
 8001690:	7dfb      	ldrb	r3, [r7, #23]
 8001692:	2b02      	cmp	r3, #2
 8001694:	f040 80be 	bne.w	8001814 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001698:	4b65      	ldr	r3, [pc, #404]	@ (8001830 <HAL_CAN_ConfigFilter+0x1b8>)
 800169a:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016a2:	f043 0201 	orr.w	r2, r3, #1
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80016b2:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016c6:	021b      	lsls	r3, r3, #8
 80016c8:	431a      	orrs	r2, r3
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	695b      	ldr	r3, [r3, #20]
 80016d4:	f003 031f 	and.w	r3, r3, #31
 80016d8:	2201      	movs	r2, #1
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	43db      	mvns	r3, r3
 80016ea:	401a      	ands	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d123      	bne.n	8001742 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	43db      	mvns	r3, r3
 8001704:	401a      	ands	r2, r3
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001718:	683a      	ldr	r2, [r7, #0]
 800171a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800171c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	3248      	adds	r2, #72	@ 0x48
 8001722:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	689b      	ldr	r3, [r3, #8]
 800172a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001736:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001738:	6939      	ldr	r1, [r7, #16]
 800173a:	3348      	adds	r3, #72	@ 0x48
 800173c:	00db      	lsls	r3, r3, #3
 800173e:	440b      	add	r3, r1
 8001740:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	69db      	ldr	r3, [r3, #28]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d122      	bne.n	8001790 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	431a      	orrs	r2, r3
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800176a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	3248      	adds	r2, #72	@ 0x48
 8001770:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	68db      	ldr	r3, [r3, #12]
 800177e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001784:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001786:	6939      	ldr	r1, [r7, #16]
 8001788:	3348      	adds	r3, #72	@ 0x48
 800178a:	00db      	lsls	r3, r3, #3
 800178c:	440b      	add	r3, r1
 800178e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d109      	bne.n	80017ac <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001798:	693b      	ldr	r3, [r7, #16]
 800179a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	43db      	mvns	r3, r3
 80017a2:	401a      	ands	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80017aa:	e007      	b.n	80017bc <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	431a      	orrs	r2, r3
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	691b      	ldr	r3, [r3, #16]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d109      	bne.n	80017d8 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80017c4:	693b      	ldr	r3, [r7, #16]
 80017c6:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	401a      	ands	r2, r3
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80017d6:	e007      	b.n	80017e8 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	431a      	orrs	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	6a1b      	ldr	r3, [r3, #32]
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d107      	bne.n	8001800 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	431a      	orrs	r2, r3
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001806:	f023 0201 	bic.w	r2, r3, #1
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001810:	2300      	movs	r3, #0
 8001812:	e006      	b.n	8001822 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001818:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
  }
}
 8001822:	4618      	mov	r0, r3
 8001824:	371c      	adds	r7, #28
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	40006400 	.word	0x40006400

08001834 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001842:	b2db      	uxtb	r3, r3
 8001844:	2b01      	cmp	r3, #1
 8001846:	d12e      	bne.n	80018a6 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2202      	movs	r2, #2
 800184c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 0201 	bic.w	r2, r2, #1
 800185e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001860:	f7ff fe02 	bl	8001468 <HAL_GetTick>
 8001864:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001866:	e012      	b.n	800188e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001868:	f7ff fdfe 	bl	8001468 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b0a      	cmp	r3, #10
 8001874:	d90b      	bls.n	800188e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800187a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2205      	movs	r2, #5
 8001886:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e012      	b.n	80018b4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d1e5      	bne.n	8001868 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2200      	movs	r2, #0
 80018a0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80018a2:	2300      	movs	r3, #0
 80018a4:	e006      	b.n	80018b4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018aa:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
  }
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80018bc:	b480      	push	{r7}
 80018be:	b087      	sub	sp, #28
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
 80018c8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80018d2:	7dfb      	ldrb	r3, [r7, #23]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d003      	beq.n	80018e0 <HAL_CAN_GetRxMessage+0x24>
 80018d8:	7dfb      	ldrb	r3, [r7, #23]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	f040 8103 	bne.w	8001ae6 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10e      	bne.n	8001904 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	f003 0303 	and.w	r3, r3, #3
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d116      	bne.n	8001922 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018f8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e0f7      	b.n	8001af4 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	f003 0303 	and.w	r3, r3, #3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d107      	bne.n	8001922 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001916:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e0e8      	b.n	8001af4 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	331b      	adds	r3, #27
 800192a:	011b      	lsls	r3, r3, #4
 800192c:	4413      	add	r3, r2
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 0204 	and.w	r2, r3, #4
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d10c      	bne.n	800195a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681a      	ldr	r2, [r3, #0]
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	331b      	adds	r3, #27
 8001948:	011b      	lsls	r3, r3, #4
 800194a:	4413      	add	r3, r2
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	0d5b      	lsrs	r3, r3, #21
 8001950:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	601a      	str	r2, [r3, #0]
 8001958:	e00b      	b.n	8001972 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	68bb      	ldr	r3, [r7, #8]
 8001960:	331b      	adds	r3, #27
 8001962:	011b      	lsls	r3, r3, #4
 8001964:	4413      	add	r3, r2
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	08db      	lsrs	r3, r3, #3
 800196a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	331b      	adds	r3, #27
 800197a:	011b      	lsls	r3, r3, #4
 800197c:	4413      	add	r3, r2
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0202 	and.w	r2, r3, #2
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	68bb      	ldr	r3, [r7, #8]
 800198e:	331b      	adds	r3, #27
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	4413      	add	r3, r2
 8001994:	3304      	adds	r3, #4
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f003 0308 	and.w	r3, r3, #8
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2208      	movs	r2, #8
 80019a4:	611a      	str	r2, [r3, #16]
 80019a6:	e00b      	b.n	80019c0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	331b      	adds	r3, #27
 80019b0:	011b      	lsls	r3, r3, #4
 80019b2:	4413      	add	r3, r2
 80019b4:	3304      	adds	r3, #4
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 020f 	and.w	r2, r3, #15
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	331b      	adds	r3, #27
 80019c8:	011b      	lsls	r3, r3, #4
 80019ca:	4413      	add	r3, r2
 80019cc:	3304      	adds	r3, #4
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	0a1b      	lsrs	r3, r3, #8
 80019d2:	b2da      	uxtb	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	331b      	adds	r3, #27
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	4413      	add	r3, r2
 80019e4:	3304      	adds	r3, #4
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	0c1b      	lsrs	r3, r3, #16
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4413      	add	r3, r2
 80019fa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	4413      	add	r3, r2
 8001a10:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	0a1a      	lsrs	r2, r3, #8
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	681a      	ldr	r2, [r3, #0]
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	4413      	add	r3, r2
 8001a2a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	0c1a      	lsrs	r2, r3, #16
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	3302      	adds	r3, #2
 8001a36:	b2d2      	uxtb	r2, r2
 8001a38:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	011b      	lsls	r3, r3, #4
 8001a42:	4413      	add	r3, r2
 8001a44:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	0e1a      	lsrs	r2, r3, #24
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	3303      	adds	r3, #3
 8001a50:	b2d2      	uxtb	r2, r2
 8001a52:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	4413      	add	r3, r2
 8001a5e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	3304      	adds	r3, #4
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	011b      	lsls	r3, r3, #4
 8001a74:	4413      	add	r3, r2
 8001a76:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	0a1a      	lsrs	r2, r3, #8
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	3305      	adds	r3, #5
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	4413      	add	r3, r2
 8001a90:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	0c1a      	lsrs	r2, r3, #16
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	3306      	adds	r3, #6
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681a      	ldr	r2, [r3, #0]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	011b      	lsls	r3, r3, #4
 8001aa8:	4413      	add	r3, r2
 8001aaa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	0e1a      	lsrs	r2, r3, #24
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	3307      	adds	r3, #7
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d108      	bne.n	8001ad2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	68da      	ldr	r2, [r3, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0220 	orr.w	r2, r2, #32
 8001ace:	60da      	str	r2, [r3, #12]
 8001ad0:	e007      	b.n	8001ae2 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	691a      	ldr	r2, [r3, #16]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f042 0220 	orr.w	r2, r2, #32
 8001ae0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	e006      	b.n	8001af4 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aea:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
  }
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	371c      	adds	r7, #28
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001b00:	b480      	push	{r7}
 8001b02:	b085      	sub	sp, #20
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b10:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d002      	beq.n	8001b1e <HAL_CAN_ActivateNotification+0x1e>
 8001b18:	7bfb      	ldrb	r3, [r7, #15]
 8001b1a:	2b02      	cmp	r3, #2
 8001b1c:	d109      	bne.n	8001b32 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	6959      	ldr	r1, [r3, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	e006      	b.n	8001b40 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b36:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
  }
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3714      	adds	r7, #20
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b08a      	sub	sp, #40	@ 0x28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	695b      	ldr	r3, [r3, #20]
 8001b5e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	689b      	ldr	r3, [r3, #8]
 8001b6e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	68db      	ldr	r3, [r3, #12]
 8001b76:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001b88:	6a3b      	ldr	r3, [r7, #32]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d07c      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d023      	beq.n	8001be4 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f983 	bl	8001eba <HAL_CAN_TxMailbox0CompleteCallback>
 8001bb4:	e016      	b.n	8001be4 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	f003 0304 	and.w	r3, r3, #4
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bc2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc8:	e00c      	b.n	8001be4 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d004      	beq.n	8001bde <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bd6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bdc:	e002      	b.n	8001be4 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 f989 	bl	8001ef6 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d024      	beq.n	8001c38 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001bf6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001bf8:	69bb      	ldr	r3, [r7, #24]
 8001bfa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f000 f963 	bl	8001ece <HAL_CAN_TxMailbox1CompleteCallback>
 8001c08:	e016      	b.n	8001c38 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d004      	beq.n	8001c1e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001c14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c16:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c1c:	e00c      	b.n	8001c38 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d004      	beq.n	8001c32 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c30:	e002      	b.n	8001c38 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f969 	bl	8001f0a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d024      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001c4a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f943 	bl	8001ee2 <HAL_CAN_TxMailbox2CompleteCallback>
 8001c5c:	e016      	b.n	8001c8c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d004      	beq.n	8001c72 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001c6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c70:	e00c      	b.n	8001c8c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d004      	beq.n	8001c86 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c84:	e002      	b.n	8001c8c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f000 f949 	bl	8001f1e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	f003 0308 	and.w	r3, r3, #8
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00c      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d007      	beq.n	8001cb0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ca6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2210      	movs	r2, #16
 8001cae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001cb0:	6a3b      	ldr	r3, [r7, #32]
 8001cb2:	f003 0304 	and.w	r3, r3, #4
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00b      	beq.n	8001cd2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d006      	beq.n	8001cd2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2208      	movs	r2, #8
 8001cca:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 f930 	bl	8001f32 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001cd2:	6a3b      	ldr	r3, [r7, #32]
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d009      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d002      	beq.n	8001cf0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001cea:	6878      	ldr	r0, [r7, #4]
 8001cec:	f7fe fe7c 	bl	80009e8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00c      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d007      	beq.n	8001d14 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001d0a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2210      	movs	r2, #16
 8001d12:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001d14:	6a3b      	ldr	r3, [r7, #32]
 8001d16:	f003 0320 	and.w	r3, r3, #32
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d00b      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d006      	beq.n	8001d36 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	2208      	movs	r2, #8
 8001d2e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f912 	bl	8001f5a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001d36:	6a3b      	ldr	r3, [r7, #32]
 8001d38:	f003 0310 	and.w	r3, r3, #16
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d009      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	f003 0303 	and.w	r3, r3, #3
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f8f9 	bl	8001f46 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001d54:	6a3b      	ldr	r3, [r7, #32]
 8001d56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00b      	beq.n	8001d76 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001d5e:	69fb      	ldr	r3, [r7, #28]
 8001d60:	f003 0310 	and.w	r3, r3, #16
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d006      	beq.n	8001d76 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2210      	movs	r2, #16
 8001d6e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001d70:	6878      	ldr	r0, [r7, #4]
 8001d72:	f000 f8fc 	bl	8001f6e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001d76:	6a3b      	ldr	r3, [r7, #32]
 8001d78:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00b      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	f003 0308 	and.w	r3, r3, #8
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d006      	beq.n	8001d98 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	2208      	movs	r2, #8
 8001d90:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f000 f8f5 	bl	8001f82 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001d98:	6a3b      	ldr	r3, [r7, #32]
 8001d9a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d07b      	beq.n	8001e9a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d072      	beq.n	8001e92 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dac:	6a3b      	ldr	r3, [r7, #32]
 8001dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d008      	beq.n	8001dc8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc2:	f043 0301 	orr.w	r3, r3, #1
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001dc8:	6a3b      	ldr	r3, [r7, #32]
 8001dca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d008      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dde:	f043 0302 	orr.w	r3, r3, #2
 8001de2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d008      	beq.n	8001e00 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfa:	f043 0304 	orr.w	r3, r3, #4
 8001dfe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e00:	6a3b      	ldr	r3, [r7, #32]
 8001e02:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d043      	beq.n	8001e92 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d03e      	beq.n	8001e92 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e1a:	2b60      	cmp	r3, #96	@ 0x60
 8001e1c:	d02b      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x32a>
 8001e1e:	2b60      	cmp	r3, #96	@ 0x60
 8001e20:	d82e      	bhi.n	8001e80 <HAL_CAN_IRQHandler+0x334>
 8001e22:	2b50      	cmp	r3, #80	@ 0x50
 8001e24:	d022      	beq.n	8001e6c <HAL_CAN_IRQHandler+0x320>
 8001e26:	2b50      	cmp	r3, #80	@ 0x50
 8001e28:	d82a      	bhi.n	8001e80 <HAL_CAN_IRQHandler+0x334>
 8001e2a:	2b40      	cmp	r3, #64	@ 0x40
 8001e2c:	d019      	beq.n	8001e62 <HAL_CAN_IRQHandler+0x316>
 8001e2e:	2b40      	cmp	r3, #64	@ 0x40
 8001e30:	d826      	bhi.n	8001e80 <HAL_CAN_IRQHandler+0x334>
 8001e32:	2b30      	cmp	r3, #48	@ 0x30
 8001e34:	d010      	beq.n	8001e58 <HAL_CAN_IRQHandler+0x30c>
 8001e36:	2b30      	cmp	r3, #48	@ 0x30
 8001e38:	d822      	bhi.n	8001e80 <HAL_CAN_IRQHandler+0x334>
 8001e3a:	2b10      	cmp	r3, #16
 8001e3c:	d002      	beq.n	8001e44 <HAL_CAN_IRQHandler+0x2f8>
 8001e3e:	2b20      	cmp	r3, #32
 8001e40:	d005      	beq.n	8001e4e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001e42:	e01d      	b.n	8001e80 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001e44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e46:	f043 0308 	orr.w	r3, r3, #8
 8001e4a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e4c:	e019      	b.n	8001e82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	f043 0310 	orr.w	r3, r3, #16
 8001e54:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e56:	e014      	b.n	8001e82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5a:	f043 0320 	orr.w	r3, r3, #32
 8001e5e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e60:	e00f      	b.n	8001e82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e6a:	e00a      	b.n	8001e82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e72:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e74:	e005      	b.n	8001e82 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e7c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001e7e:	e000      	b.n	8001e82 <HAL_CAN_IRQHandler+0x336>
            break;
 8001e80:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	699a      	ldr	r2, [r3, #24]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001e90:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2204      	movs	r2, #4
 8001e98:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d008      	beq.n	8001eb2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea6:	431a      	orrs	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 f872 	bl	8001f96 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001eb2:	bf00      	nop
 8001eb4:	3728      	adds	r7, #40	@ 0x28
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b083      	sub	sp, #12
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001eea:	bf00      	nop
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	b083      	sub	sp, #12
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr

08001f32 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001f46:	b480      	push	{r7}
 8001f48:	b083      	sub	sp, #12
 8001f4a:	af00      	add	r7, sp, #0
 8001f4c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001f4e:	bf00      	nop
 8001f50:	370c      	adds	r7, #12
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr

08001f5a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001f5a:	b480      	push	{r7}
 8001f5c:	b083      	sub	sp, #12
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b083      	sub	sp, #12
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001f76:	bf00      	nop
 8001f78:	370c      	adds	r7, #12
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr

08001f82 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001f82:	b480      	push	{r7}
 8001f84:	b083      	sub	sp, #12
 8001f86:	af00      	add	r7, sp, #0
 8001f88:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001f9e:	bf00      	nop
 8001fa0:	370c      	adds	r7, #12
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
	...

08001fac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fc2:	68ba      	ldr	r2, [r7, #8]
 8001fc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001fc8:	4013      	ands	r3, r2
 8001fca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fde:	4a04      	ldr	r2, [pc, #16]	@ (8001ff0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	60d3      	str	r3, [r2, #12]
}
 8001fe4:	bf00      	nop
 8001fe6:	3714      	adds	r7, #20
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff8:	4b04      	ldr	r3, [pc, #16]	@ (800200c <__NVIC_GetPriorityGrouping+0x18>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	0a1b      	lsrs	r3, r3, #8
 8001ffe:	f003 0307 	and.w	r3, r3, #7
}
 8002002:	4618      	mov	r0, r3
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr
 800200c:	e000ed00 	.word	0xe000ed00

08002010 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002010:	b480      	push	{r7}
 8002012:	b083      	sub	sp, #12
 8002014:	af00      	add	r7, sp, #0
 8002016:	4603      	mov	r3, r0
 8002018:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	2b00      	cmp	r3, #0
 8002020:	db0b      	blt.n	800203a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002022:	79fb      	ldrb	r3, [r7, #7]
 8002024:	f003 021f 	and.w	r2, r3, #31
 8002028:	4907      	ldr	r1, [pc, #28]	@ (8002048 <__NVIC_EnableIRQ+0x38>)
 800202a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800202e:	095b      	lsrs	r3, r3, #5
 8002030:	2001      	movs	r0, #1
 8002032:	fa00 f202 	lsl.w	r2, r0, r2
 8002036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	e000e100 	.word	0xe000e100

0800204c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	6039      	str	r1, [r7, #0]
 8002056:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	2b00      	cmp	r3, #0
 800205e:	db0a      	blt.n	8002076 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	b2da      	uxtb	r2, r3
 8002064:	490c      	ldr	r1, [pc, #48]	@ (8002098 <__NVIC_SetPriority+0x4c>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	0112      	lsls	r2, r2, #4
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	440b      	add	r3, r1
 8002070:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002074:	e00a      	b.n	800208c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	b2da      	uxtb	r2, r3
 800207a:	4908      	ldr	r1, [pc, #32]	@ (800209c <__NVIC_SetPriority+0x50>)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	3b04      	subs	r3, #4
 8002084:	0112      	lsls	r2, r2, #4
 8002086:	b2d2      	uxtb	r2, r2
 8002088:	440b      	add	r3, r1
 800208a:	761a      	strb	r2, [r3, #24]
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	e000e100 	.word	0xe000e100
 800209c:	e000ed00 	.word	0xe000ed00

080020a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	@ 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	f003 0307 	and.w	r3, r3, #7
 80020b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020b4:	69fb      	ldr	r3, [r7, #28]
 80020b6:	f1c3 0307 	rsb	r3, r3, #7
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	bf28      	it	cs
 80020be:	2304      	movcs	r3, #4
 80020c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3304      	adds	r3, #4
 80020c6:	2b06      	cmp	r3, #6
 80020c8:	d902      	bls.n	80020d0 <NVIC_EncodePriority+0x30>
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3b03      	subs	r3, #3
 80020ce:	e000      	b.n	80020d2 <NVIC_EncodePriority+0x32>
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43da      	mvns	r2, r3
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	401a      	ands	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa01 f303 	lsl.w	r3, r1, r3
 80020f2:	43d9      	mvns	r1, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f8:	4313      	orrs	r3, r2
         );
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3724      	adds	r7, #36	@ 0x24
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr

08002106 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800210e:	6878      	ldr	r0, [r7, #4]
 8002110:	f7ff ff4c 	bl	8001fac <__NVIC_SetPriorityGrouping>
}
 8002114:	bf00      	nop
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	4603      	mov	r3, r0
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800212e:	f7ff ff61 	bl	8001ff4 <__NVIC_GetPriorityGrouping>
 8002132:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	68b9      	ldr	r1, [r7, #8]
 8002138:	6978      	ldr	r0, [r7, #20]
 800213a:	f7ff ffb1 	bl	80020a0 <NVIC_EncodePriority>
 800213e:	4602      	mov	r2, r0
 8002140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002144:	4611      	mov	r1, r2
 8002146:	4618      	mov	r0, r3
 8002148:	f7ff ff80 	bl	800204c <__NVIC_SetPriority>
}
 800214c:	bf00      	nop
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}

08002154 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff ff54 	bl	8002010 <__NVIC_EnableIRQ>
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}

08002170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	@ 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800217e:	2300      	movs	r3, #0
 8002180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002186:	2300      	movs	r3, #0
 8002188:	61fb      	str	r3, [r7, #28]
 800218a:	e177      	b.n	800247c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800218c:	2201      	movs	r2, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	f040 8166 	bne.w	8002476 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	f003 0303 	and.w	r3, r3, #3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d005      	beq.n	80021c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d130      	bne.n	8002224 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	2203      	movs	r2, #3
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43db      	mvns	r3, r3
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	4013      	ands	r3, r2
 80021d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68da      	ldr	r2, [r3, #12]
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	69ba      	ldr	r2, [r7, #24]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	091b      	lsrs	r3, r3, #4
 800220e:	f003 0201 	and.w	r2, r3, #1
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	fa02 f303 	lsl.w	r3, r2, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4313      	orrs	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	2b03      	cmp	r3, #3
 800222e:	d017      	beq.n	8002260 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	69fb      	ldr	r3, [r7, #28]
 800224e:	005b      	lsls	r3, r3, #1
 8002250:	fa02 f303 	lsl.w	r3, r2, r3
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d123      	bne.n	80022b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	08da      	lsrs	r2, r3, #3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3208      	adds	r2, #8
 8002274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	f003 0307 	and.w	r3, r3, #7
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	220f      	movs	r2, #15
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	69ba      	ldr	r2, [r7, #24]
 800228c:	4013      	ands	r3, r2
 800228e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	691a      	ldr	r2, [r3, #16]
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	08da      	lsrs	r2, r3, #3
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	3208      	adds	r2, #8
 80022ae:	69b9      	ldr	r1, [r7, #24]
 80022b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	2203      	movs	r2, #3
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	43db      	mvns	r3, r3
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	4013      	ands	r3, r2
 80022ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0203 	and.w	r2, r3, #3
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	fa02 f303 	lsl.w	r3, r2, r3
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	4313      	orrs	r3, r2
 80022e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80c0 	beq.w	8002476 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
 80022fa:	4b66      	ldr	r3, [pc, #408]	@ (8002494 <HAL_GPIO_Init+0x324>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022fe:	4a65      	ldr	r2, [pc, #404]	@ (8002494 <HAL_GPIO_Init+0x324>)
 8002300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002304:	6453      	str	r3, [r2, #68]	@ 0x44
 8002306:	4b63      	ldr	r3, [pc, #396]	@ (8002494 <HAL_GPIO_Init+0x324>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002312:	4a61      	ldr	r2, [pc, #388]	@ (8002498 <HAL_GPIO_Init+0x328>)
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	3302      	adds	r3, #2
 800231a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002320:	69fb      	ldr	r3, [r7, #28]
 8002322:	f003 0303 	and.w	r3, r3, #3
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	220f      	movs	r2, #15
 800232a:	fa02 f303 	lsl.w	r3, r2, r3
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a58      	ldr	r2, [pc, #352]	@ (800249c <HAL_GPIO_Init+0x32c>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d037      	beq.n	80023ae <HAL_GPIO_Init+0x23e>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a57      	ldr	r2, [pc, #348]	@ (80024a0 <HAL_GPIO_Init+0x330>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d031      	beq.n	80023aa <HAL_GPIO_Init+0x23a>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4a56      	ldr	r2, [pc, #344]	@ (80024a4 <HAL_GPIO_Init+0x334>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d02b      	beq.n	80023a6 <HAL_GPIO_Init+0x236>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	4a55      	ldr	r2, [pc, #340]	@ (80024a8 <HAL_GPIO_Init+0x338>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d025      	beq.n	80023a2 <HAL_GPIO_Init+0x232>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4a54      	ldr	r2, [pc, #336]	@ (80024ac <HAL_GPIO_Init+0x33c>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d01f      	beq.n	800239e <HAL_GPIO_Init+0x22e>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4a53      	ldr	r2, [pc, #332]	@ (80024b0 <HAL_GPIO_Init+0x340>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d019      	beq.n	800239a <HAL_GPIO_Init+0x22a>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	4a52      	ldr	r2, [pc, #328]	@ (80024b4 <HAL_GPIO_Init+0x344>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d013      	beq.n	8002396 <HAL_GPIO_Init+0x226>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	4a51      	ldr	r2, [pc, #324]	@ (80024b8 <HAL_GPIO_Init+0x348>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d00d      	beq.n	8002392 <HAL_GPIO_Init+0x222>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	4a50      	ldr	r2, [pc, #320]	@ (80024bc <HAL_GPIO_Init+0x34c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d007      	beq.n	800238e <HAL_GPIO_Init+0x21e>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a4f      	ldr	r2, [pc, #316]	@ (80024c0 <HAL_GPIO_Init+0x350>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d101      	bne.n	800238a <HAL_GPIO_Init+0x21a>
 8002386:	2309      	movs	r3, #9
 8002388:	e012      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 800238a:	230a      	movs	r3, #10
 800238c:	e010      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 800238e:	2308      	movs	r3, #8
 8002390:	e00e      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 8002392:	2307      	movs	r3, #7
 8002394:	e00c      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 8002396:	2306      	movs	r3, #6
 8002398:	e00a      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 800239a:	2305      	movs	r3, #5
 800239c:	e008      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 800239e:	2304      	movs	r3, #4
 80023a0:	e006      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 80023a2:	2303      	movs	r3, #3
 80023a4:	e004      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e002      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 80023aa:	2301      	movs	r3, #1
 80023ac:	e000      	b.n	80023b0 <HAL_GPIO_Init+0x240>
 80023ae:	2300      	movs	r3, #0
 80023b0:	69fa      	ldr	r2, [r7, #28]
 80023b2:	f002 0203 	and.w	r2, r2, #3
 80023b6:	0092      	lsls	r2, r2, #2
 80023b8:	4093      	lsls	r3, r2
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	4313      	orrs	r3, r2
 80023be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023c0:	4935      	ldr	r1, [pc, #212]	@ (8002498 <HAL_GPIO_Init+0x328>)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	089b      	lsrs	r3, r3, #2
 80023c6:	3302      	adds	r3, #2
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ce:	4b3d      	ldr	r3, [pc, #244]	@ (80024c4 <HAL_GPIO_Init+0x354>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023f2:	4a34      	ldr	r2, [pc, #208]	@ (80024c4 <HAL_GPIO_Init+0x354>)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f8:	4b32      	ldr	r3, [pc, #200]	@ (80024c4 <HAL_GPIO_Init+0x354>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800241c:	4a29      	ldr	r2, [pc, #164]	@ (80024c4 <HAL_GPIO_Init+0x354>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002422:	4b28      	ldr	r3, [pc, #160]	@ (80024c4 <HAL_GPIO_Init+0x354>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	43db      	mvns	r3, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4013      	ands	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d003      	beq.n	8002446 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4313      	orrs	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002446:	4a1f      	ldr	r2, [pc, #124]	@ (80024c4 <HAL_GPIO_Init+0x354>)
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800244c:	4b1d      	ldr	r3, [pc, #116]	@ (80024c4 <HAL_GPIO_Init+0x354>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d003      	beq.n	8002470 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	4313      	orrs	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002470:	4a14      	ldr	r2, [pc, #80]	@ (80024c4 <HAL_GPIO_Init+0x354>)
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3301      	adds	r3, #1
 800247a:	61fb      	str	r3, [r7, #28]
 800247c:	69fb      	ldr	r3, [r7, #28]
 800247e:	2b0f      	cmp	r3, #15
 8002480:	f67f ae84 	bls.w	800218c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002484:	bf00      	nop
 8002486:	bf00      	nop
 8002488:	3724      	adds	r7, #36	@ 0x24
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40023800 	.word	0x40023800
 8002498:	40013800 	.word	0x40013800
 800249c:	40020000 	.word	0x40020000
 80024a0:	40020400 	.word	0x40020400
 80024a4:	40020800 	.word	0x40020800
 80024a8:	40020c00 	.word	0x40020c00
 80024ac:	40021000 	.word	0x40021000
 80024b0:	40021400 	.word	0x40021400
 80024b4:	40021800 	.word	0x40021800
 80024b8:	40021c00 	.word	0x40021c00
 80024bc:	40022000 	.word	0x40022000
 80024c0:	40022400 	.word	0x40022400
 80024c4:	40013c00 	.word	0x40013c00

080024c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	460b      	mov	r3, r1
 80024d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	691a      	ldr	r2, [r3, #16]
 80024d8:	887b      	ldrh	r3, [r7, #2]
 80024da:	4013      	ands	r3, r2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d002      	beq.n	80024e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
 80024e4:	e001      	b.n	80024ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024e6:	2300      	movs	r3, #0
 80024e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	460b      	mov	r3, r1
 8002502:	807b      	strh	r3, [r7, #2]
 8002504:	4613      	mov	r3, r2
 8002506:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002508:	787b      	ldrb	r3, [r7, #1]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800250e:	887a      	ldrh	r2, [r7, #2]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002514:	e003      	b.n	800251e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002516:	887b      	ldrh	r3, [r7, #2]
 8002518:	041a      	lsls	r2, r3, #16
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	619a      	str	r2, [r3, #24]
}
 800251e:	bf00      	nop
 8002520:	370c      	adds	r7, #12
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800252a:	b480      	push	{r7}
 800252c:	b085      	sub	sp, #20
 800252e:	af00      	add	r7, sp, #0
 8002530:	6078      	str	r0, [r7, #4]
 8002532:	460b      	mov	r3, r1
 8002534:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800253c:	887a      	ldrh	r2, [r7, #2]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4013      	ands	r3, r2
 8002542:	041a      	lsls	r2, r3, #16
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	43d9      	mvns	r1, r3
 8002548:	887b      	ldrh	r3, [r7, #2]
 800254a:	400b      	ands	r3, r1
 800254c:	431a      	orrs	r2, r3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	619a      	str	r2, [r3, #24]
}
 8002552:	bf00      	nop
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
	...

08002560 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e12b      	b.n	80027ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe fcc4 	bl	8000f14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2224      	movs	r2, #36	@ 0x24
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f022 0201 	bic.w	r2, r2, #1
 80025a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025c4:	f001 fb14 	bl	8003bf0 <HAL_RCC_GetPCLK1Freq>
 80025c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4a81      	ldr	r2, [pc, #516]	@ (80027d4 <HAL_I2C_Init+0x274>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d807      	bhi.n	80025e4 <HAL_I2C_Init+0x84>
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4a80      	ldr	r2, [pc, #512]	@ (80027d8 <HAL_I2C_Init+0x278>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	bf94      	ite	ls
 80025dc:	2301      	movls	r3, #1
 80025de:	2300      	movhi	r3, #0
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	e006      	b.n	80025f2 <HAL_I2C_Init+0x92>
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	4a7d      	ldr	r2, [pc, #500]	@ (80027dc <HAL_I2C_Init+0x27c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	bf94      	ite	ls
 80025ec:	2301      	movls	r3, #1
 80025ee:	2300      	movhi	r3, #0
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d001      	beq.n	80025fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e0e7      	b.n	80027ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	4a78      	ldr	r2, [pc, #480]	@ (80027e0 <HAL_I2C_Init+0x280>)
 80025fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002602:	0c9b      	lsrs	r3, r3, #18
 8002604:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68ba      	ldr	r2, [r7, #8]
 8002616:	430a      	orrs	r2, r1
 8002618:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6a1b      	ldr	r3, [r3, #32]
 8002620:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	4a6a      	ldr	r2, [pc, #424]	@ (80027d4 <HAL_I2C_Init+0x274>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d802      	bhi.n	8002634 <HAL_I2C_Init+0xd4>
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	3301      	adds	r3, #1
 8002632:	e009      	b.n	8002648 <HAL_I2C_Init+0xe8>
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800263a:	fb02 f303 	mul.w	r3, r2, r3
 800263e:	4a69      	ldr	r2, [pc, #420]	@ (80027e4 <HAL_I2C_Init+0x284>)
 8002640:	fba2 2303 	umull	r2, r3, r2, r3
 8002644:	099b      	lsrs	r3, r3, #6
 8002646:	3301      	adds	r3, #1
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	6812      	ldr	r2, [r2, #0]
 800264c:	430b      	orrs	r3, r1
 800264e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	69db      	ldr	r3, [r3, #28]
 8002656:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800265a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	495c      	ldr	r1, [pc, #368]	@ (80027d4 <HAL_I2C_Init+0x274>)
 8002664:	428b      	cmp	r3, r1
 8002666:	d819      	bhi.n	800269c <HAL_I2C_Init+0x13c>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1e59      	subs	r1, r3, #1
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fbb1 f3f3 	udiv	r3, r1, r3
 8002676:	1c59      	adds	r1, r3, #1
 8002678:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800267c:	400b      	ands	r3, r1
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <HAL_I2C_Init+0x138>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	1e59      	subs	r1, r3, #1
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	005b      	lsls	r3, r3, #1
 800268c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002690:	3301      	adds	r3, #1
 8002692:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002696:	e051      	b.n	800273c <HAL_I2C_Init+0x1dc>
 8002698:	2304      	movs	r3, #4
 800269a:	e04f      	b.n	800273c <HAL_I2C_Init+0x1dc>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d111      	bne.n	80026c8 <HAL_I2C_Init+0x168>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	1e58      	subs	r0, r3, #1
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6859      	ldr	r1, [r3, #4]
 80026ac:	460b      	mov	r3, r1
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	440b      	add	r3, r1
 80026b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026b6:	3301      	adds	r3, #1
 80026b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	e012      	b.n	80026ee <HAL_I2C_Init+0x18e>
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	1e58      	subs	r0, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6859      	ldr	r1, [r3, #4]
 80026d0:	460b      	mov	r3, r1
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	440b      	add	r3, r1
 80026d6:	0099      	lsls	r1, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	fbb0 f3f3 	udiv	r3, r0, r3
 80026de:	3301      	adds	r3, #1
 80026e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	bf0c      	ite	eq
 80026e8:	2301      	moveq	r3, #1
 80026ea:	2300      	movne	r3, #0
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <HAL_I2C_Init+0x196>
 80026f2:	2301      	movs	r3, #1
 80026f4:	e022      	b.n	800273c <HAL_I2C_Init+0x1dc>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d10e      	bne.n	800271c <HAL_I2C_Init+0x1bc>
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	1e58      	subs	r0, r3, #1
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6859      	ldr	r1, [r3, #4]
 8002706:	460b      	mov	r3, r1
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	440b      	add	r3, r1
 800270c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002710:	3301      	adds	r3, #1
 8002712:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002716:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800271a:	e00f      	b.n	800273c <HAL_I2C_Init+0x1dc>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	1e58      	subs	r0, r3, #1
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6859      	ldr	r1, [r3, #4]
 8002724:	460b      	mov	r3, r1
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	440b      	add	r3, r1
 800272a:	0099      	lsls	r1, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002732:	3301      	adds	r3, #1
 8002734:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002738:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	6809      	ldr	r1, [r1, #0]
 8002740:	4313      	orrs	r3, r2
 8002742:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69da      	ldr	r2, [r3, #28]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	431a      	orrs	r2, r3
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	689b      	ldr	r3, [r3, #8]
 8002766:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800276a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800276e:	687a      	ldr	r2, [r7, #4]
 8002770:	6911      	ldr	r1, [r2, #16]
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	68d2      	ldr	r2, [r2, #12]
 8002776:	4311      	orrs	r1, r2
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	430b      	orrs	r3, r1
 800277e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	695a      	ldr	r2, [r3, #20]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f042 0201 	orr.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2200      	movs	r2, #0
 80027b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	3710      	adds	r7, #16
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	000186a0 	.word	0x000186a0
 80027d8:	001e847f 	.word	0x001e847f
 80027dc:	003d08ff 	.word	0x003d08ff
 80027e0:	431bde83 	.word	0x431bde83
 80027e4:	10624dd3 	.word	0x10624dd3

080027e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08c      	sub	sp, #48	@ 0x30
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	4608      	mov	r0, r1
 80027f2:	4611      	mov	r1, r2
 80027f4:	461a      	mov	r2, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	817b      	strh	r3, [r7, #10]
 80027fa:	460b      	mov	r3, r1
 80027fc:	813b      	strh	r3, [r7, #8]
 80027fe:	4613      	mov	r3, r2
 8002800:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002802:	f7fe fe31 	bl	8001468 <HAL_GetTick>
 8002806:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800280e:	b2db      	uxtb	r3, r3
 8002810:	2b20      	cmp	r3, #32
 8002812:	f040 8214 	bne.w	8002c3e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	2319      	movs	r3, #25
 800281c:	2201      	movs	r2, #1
 800281e:	497b      	ldr	r1, [pc, #492]	@ (8002a0c <HAL_I2C_Mem_Read+0x224>)
 8002820:	68f8      	ldr	r0, [r7, #12]
 8002822:	f000 fafb 	bl	8002e1c <I2C_WaitOnFlagUntilTimeout>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800282c:	2302      	movs	r3, #2
 800282e:	e207      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002836:	2b01      	cmp	r3, #1
 8002838:	d101      	bne.n	800283e <HAL_I2C_Mem_Read+0x56>
 800283a:	2302      	movs	r3, #2
 800283c:	e200      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	2201      	movs	r2, #1
 8002842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d007      	beq.n	8002864 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002872:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2222      	movs	r2, #34	@ 0x22
 8002878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2240      	movs	r2, #64	@ 0x40
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2200      	movs	r2, #0
 8002888:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800288e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8002894:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	4a5b      	ldr	r2, [pc, #364]	@ (8002a10 <HAL_I2C_Mem_Read+0x228>)
 80028a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028a6:	88f8      	ldrh	r0, [r7, #6]
 80028a8:	893a      	ldrh	r2, [r7, #8]
 80028aa:	8979      	ldrh	r1, [r7, #10]
 80028ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ae:	9301      	str	r3, [sp, #4]
 80028b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028b2:	9300      	str	r3, [sp, #0]
 80028b4:	4603      	mov	r3, r0
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f9c8 	bl	8002c4c <I2C_RequestMemoryRead>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e1bc      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d113      	bne.n	80028f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ce:	2300      	movs	r3, #0
 80028d0:	623b      	str	r3, [r7, #32]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	623b      	str	r3, [r7, #32]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	623b      	str	r3, [r7, #32]
 80028e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f2:	601a      	str	r2, [r3, #0]
 80028f4:	e190      	b.n	8002c18 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d11b      	bne.n	8002936 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800290c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290e:	2300      	movs	r3, #0
 8002910:	61fb      	str	r3, [r7, #28]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695b      	ldr	r3, [r3, #20]
 8002918:	61fb      	str	r3, [r7, #28]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	699b      	ldr	r3, [r3, #24]
 8002920:	61fb      	str	r3, [r7, #28]
 8002922:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002932:	601a      	str	r2, [r3, #0]
 8002934:	e170      	b.n	8002c18 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293a:	2b02      	cmp	r3, #2
 800293c:	d11b      	bne.n	8002976 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800294c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800295c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800295e:	2300      	movs	r3, #0
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	61bb      	str	r3, [r7, #24]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	699b      	ldr	r3, [r3, #24]
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	e150      	b.n	8002c18 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002976:	2300      	movs	r3, #0
 8002978:	617b      	str	r3, [r7, #20]
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	695b      	ldr	r3, [r3, #20]
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	617b      	str	r3, [r7, #20]
 800298a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800298c:	e144      	b.n	8002c18 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002992:	2b03      	cmp	r3, #3
 8002994:	f200 80f1 	bhi.w	8002b7a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800299c:	2b01      	cmp	r3, #1
 800299e:	d123      	bne.n	80029e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80029a4:	68f8      	ldr	r0, [r7, #12]
 80029a6:	f000 fb9b 	bl	80030e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e145      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	691a      	ldr	r2, [r3, #16]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029be:	b2d2      	uxtb	r2, r2
 80029c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029c6:	1c5a      	adds	r2, r3, #1
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029d0:	3b01      	subs	r3, #1
 80029d2:	b29a      	uxth	r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029dc:	b29b      	uxth	r3, r3
 80029de:	3b01      	subs	r3, #1
 80029e0:	b29a      	uxth	r2, r3
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80029e6:	e117      	b.n	8002c18 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d14e      	bne.n	8002a8e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80029f6:	2200      	movs	r2, #0
 80029f8:	4906      	ldr	r1, [pc, #24]	@ (8002a14 <HAL_I2C_Mem_Read+0x22c>)
 80029fa:	68f8      	ldr	r0, [r7, #12]
 80029fc:	f000 fa0e 	bl	8002e1c <I2C_WaitOnFlagUntilTimeout>
 8002a00:	4603      	mov	r3, r0
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d008      	beq.n	8002a18 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002a06:	2301      	movs	r3, #1
 8002a08:	e11a      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
 8002a0a:	bf00      	nop
 8002a0c:	00100002 	.word	0x00100002
 8002a10:	ffff0000 	.word	0xffff0000
 8002a14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	691a      	ldr	r2, [r3, #16]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3a:	1c5a      	adds	r2, r3, #1
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	3b01      	subs	r3, #1
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	691a      	ldr	r2, [r3, #16]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a64:	b2d2      	uxtb	r2, r2
 8002a66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a76:	3b01      	subs	r3, #1
 8002a78:	b29a      	uxth	r2, r3
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a82:	b29b      	uxth	r3, r3
 8002a84:	3b01      	subs	r3, #1
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a8c:	e0c4      	b.n	8002c18 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a94:	2200      	movs	r2, #0
 8002a96:	496c      	ldr	r1, [pc, #432]	@ (8002c48 <HAL_I2C_Mem_Read+0x460>)
 8002a98:	68f8      	ldr	r0, [r7, #12]
 8002a9a:	f000 f9bf 	bl	8002e1c <I2C_WaitOnFlagUntilTimeout>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d001      	beq.n	8002aa8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e0cb      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002ab6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691a      	ldr	r2, [r3, #16]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	b29a      	uxth	r2, r3
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aec:	9300      	str	r3, [sp, #0]
 8002aee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af0:	2200      	movs	r2, #0
 8002af2:	4955      	ldr	r1, [pc, #340]	@ (8002c48 <HAL_I2C_Mem_Read+0x460>)
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f991 	bl	8002e1c <I2C_WaitOnFlagUntilTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e09d      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	681a      	ldr	r2, [r3, #0]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b12:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691a      	ldr	r2, [r3, #16]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b1e:	b2d2      	uxtb	r2, r2
 8002b20:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b30:	3b01      	subs	r3, #1
 8002b32:	b29a      	uxth	r2, r3
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b58:	1c5a      	adds	r2, r3, #1
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b62:	3b01      	subs	r3, #1
 8002b64:	b29a      	uxth	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	3b01      	subs	r3, #1
 8002b72:	b29a      	uxth	r2, r3
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b78:	e04e      	b.n	8002c18 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b7c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002b7e:	68f8      	ldr	r0, [r7, #12]
 8002b80:	f000 faae 	bl	80030e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002b84:	4603      	mov	r3, r0
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d001      	beq.n	8002b8e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e058      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b98:	b2d2      	uxtb	r2, r2
 8002b9a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba0:	1c5a      	adds	r2, r3, #1
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bb6:	b29b      	uxth	r3, r3
 8002bb8:	3b01      	subs	r3, #1
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	695b      	ldr	r3, [r3, #20]
 8002bc6:	f003 0304 	and.w	r3, r3, #4
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	d124      	bne.n	8002c18 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d107      	bne.n	8002be6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002be4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	691a      	ldr	r2, [r3, #16]
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf0:	b2d2      	uxtb	r2, r2
 8002bf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bf8:	1c5a      	adds	r2, r3, #1
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	3b01      	subs	r3, #1
 8002c12:	b29a      	uxth	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f47f aeb6 	bne.w	800298e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2220      	movs	r2, #32
 8002c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e000      	b.n	8002c40 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002c3e:	2302      	movs	r3, #2
  }
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3728      	adds	r7, #40	@ 0x28
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	00010004 	.word	0x00010004

08002c4c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b088      	sub	sp, #32
 8002c50:	af02      	add	r7, sp, #8
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	4608      	mov	r0, r1
 8002c56:	4611      	mov	r1, r2
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	817b      	strh	r3, [r7, #10]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	813b      	strh	r3, [r7, #8]
 8002c62:	4613      	mov	r3, r2
 8002c64:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002c74:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681a      	ldr	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c84:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	6a3b      	ldr	r3, [r7, #32]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f8c2 	bl	8002e1c <I2C_WaitOnFlagUntilTimeout>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00d      	beq.n	8002cba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ca8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cac:	d103      	bne.n	8002cb6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cb4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e0aa      	b.n	8002e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cba:	897b      	ldrh	r3, [r7, #10]
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cc8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ccc:	6a3a      	ldr	r2, [r7, #32]
 8002cce:	4952      	ldr	r1, [pc, #328]	@ (8002e18 <I2C_RequestMemoryRead+0x1cc>)
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 f91d 	bl	8002f10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e097      	b.n	8002e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	617b      	str	r3, [r7, #20]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	617b      	str	r3, [r7, #20]
 8002cf4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cf8:	6a39      	ldr	r1, [r7, #32]
 8002cfa:	68f8      	ldr	r0, [r7, #12]
 8002cfc:	f000 f9a8 	bl	8003050 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d00d      	beq.n	8002d22 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	d107      	bne.n	8002d1e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d1c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e076      	b.n	8002e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d105      	bne.n	8002d34 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d28:	893b      	ldrh	r3, [r7, #8]
 8002d2a:	b2da      	uxtb	r2, r3
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	611a      	str	r2, [r3, #16]
 8002d32:	e021      	b.n	8002d78 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002d34:	893b      	ldrh	r3, [r7, #8]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	b2da      	uxtb	r2, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d44:	6a39      	ldr	r1, [r7, #32]
 8002d46:	68f8      	ldr	r0, [r7, #12]
 8002d48:	f000 f982 	bl	8003050 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00d      	beq.n	8002d6e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d107      	bne.n	8002d6a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d68:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e050      	b.n	8002e10 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002d6e:	893b      	ldrh	r3, [r7, #8]
 8002d70:	b2da      	uxtb	r2, r3
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d7a:	6a39      	ldr	r1, [r7, #32]
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 f967 	bl	8003050 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d00d      	beq.n	8002da4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	2b04      	cmp	r3, #4
 8002d8e:	d107      	bne.n	8002da0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d9e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e035      	b.n	8002e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002db2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	6a3b      	ldr	r3, [r7, #32]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dc0:	68f8      	ldr	r0, [r7, #12]
 8002dc2:	f000 f82b 	bl	8002e1c <I2C_WaitOnFlagUntilTimeout>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d00d      	beq.n	8002de8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dda:	d103      	bne.n	8002de4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002de2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002de4:	2303      	movs	r3, #3
 8002de6:	e013      	b.n	8002e10 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002de8:	897b      	ldrh	r3, [r7, #10]
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	b2da      	uxtb	r2, r3
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dfa:	6a3a      	ldr	r2, [r7, #32]
 8002dfc:	4906      	ldr	r1, [pc, #24]	@ (8002e18 <I2C_RequestMemoryRead+0x1cc>)
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f000 f886 	bl	8002f10 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002e0e:	2300      	movs	r3, #0
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3718      	adds	r7, #24
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	00010002 	.word	0x00010002

08002e1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b084      	sub	sp, #16
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	603b      	str	r3, [r7, #0]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e2c:	e048      	b.n	8002ec0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e34:	d044      	beq.n	8002ec0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e36:	f7fe fb17 	bl	8001468 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d302      	bcc.n	8002e4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d139      	bne.n	8002ec0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	0c1b      	lsrs	r3, r3, #16
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	2b01      	cmp	r3, #1
 8002e54:	d10d      	bne.n	8002e72 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	695b      	ldr	r3, [r3, #20]
 8002e5c:	43da      	mvns	r2, r3
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	4013      	ands	r3, r2
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	bf0c      	ite	eq
 8002e68:	2301      	moveq	r3, #1
 8002e6a:	2300      	movne	r3, #0
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	461a      	mov	r2, r3
 8002e70:	e00c      	b.n	8002e8c <I2C_WaitOnFlagUntilTimeout+0x70>
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	699b      	ldr	r3, [r3, #24]
 8002e78:	43da      	mvns	r2, r3
 8002e7a:	68bb      	ldr	r3, [r7, #8]
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	bf0c      	ite	eq
 8002e84:	2301      	moveq	r3, #1
 8002e86:	2300      	movne	r3, #0
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	79fb      	ldrb	r3, [r7, #7]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d116      	bne.n	8002ec0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e023      	b.n	8002f08 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	0c1b      	lsrs	r3, r3, #16
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d10d      	bne.n	8002ee6 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	695b      	ldr	r3, [r3, #20]
 8002ed0:	43da      	mvns	r2, r3
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	bf0c      	ite	eq
 8002edc:	2301      	moveq	r3, #1
 8002ede:	2300      	movne	r3, #0
 8002ee0:	b2db      	uxtb	r3, r3
 8002ee2:	461a      	mov	r2, r3
 8002ee4:	e00c      	b.n	8002f00 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	43da      	mvns	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	d093      	beq.n	8002e2e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}

08002f10 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b084      	sub	sp, #16
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	60f8      	str	r0, [r7, #12]
 8002f18:	60b9      	str	r1, [r7, #8]
 8002f1a:	607a      	str	r2, [r7, #4]
 8002f1c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f1e:	e071      	b.n	8003004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f2e:	d123      	bne.n	8002f78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f3e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f48:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f64:	f043 0204 	orr.w	r2, r3, #4
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e067      	b.n	8003048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f7e:	d041      	beq.n	8003004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f80:	f7fe fa72 	bl	8001468 <HAL_GetTick>
 8002f84:	4602      	mov	r2, r0
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	1ad3      	subs	r3, r2, r3
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d302      	bcc.n	8002f96 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d136      	bne.n	8003004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	0c1b      	lsrs	r3, r3, #16
 8002f9a:	b2db      	uxtb	r3, r3
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d10c      	bne.n	8002fba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	43da      	mvns	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4013      	ands	r3, r2
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bf14      	ite	ne
 8002fb2:	2301      	movne	r3, #1
 8002fb4:	2300      	moveq	r3, #0
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	e00b      	b.n	8002fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	699b      	ldr	r3, [r3, #24]
 8002fc0:	43da      	mvns	r2, r3
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	b29b      	uxth	r3, r3
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d016      	beq.n	8003004 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	f043 0220 	orr.w	r2, r3, #32
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e021      	b.n	8003048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	0c1b      	lsrs	r3, r3, #16
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b01      	cmp	r3, #1
 800300c:	d10c      	bne.n	8003028 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	43da      	mvns	r2, r3
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	4013      	ands	r3, r2
 800301a:	b29b      	uxth	r3, r3
 800301c:	2b00      	cmp	r3, #0
 800301e:	bf14      	ite	ne
 8003020:	2301      	movne	r3, #1
 8003022:	2300      	moveq	r3, #0
 8003024:	b2db      	uxtb	r3, r3
 8003026:	e00b      	b.n	8003040 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	699b      	ldr	r3, [r3, #24]
 800302e:	43da      	mvns	r2, r3
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	4013      	ands	r3, r2
 8003034:	b29b      	uxth	r3, r3
 8003036:	2b00      	cmp	r3, #0
 8003038:	bf14      	ite	ne
 800303a:	2301      	movne	r3, #1
 800303c:	2300      	moveq	r3, #0
 800303e:	b2db      	uxtb	r3, r3
 8003040:	2b00      	cmp	r3, #0
 8003042:	f47f af6d 	bne.w	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003046:	2300      	movs	r3, #0
}
 8003048:	4618      	mov	r0, r3
 800304a:	3710      	adds	r7, #16
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}

08003050 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800305c:	e034      	b.n	80030c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800305e:	68f8      	ldr	r0, [r7, #12]
 8003060:	f000 f89b 	bl	800319a <I2C_IsAcknowledgeFailed>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
 800306c:	e034      	b.n	80030d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003074:	d028      	beq.n	80030c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003076:	f7fe f9f7 	bl	8001468 <HAL_GetTick>
 800307a:	4602      	mov	r2, r0
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	1ad3      	subs	r3, r2, r3
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	429a      	cmp	r2, r3
 8003084:	d302      	bcc.n	800308c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d11d      	bne.n	80030c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	695b      	ldr	r3, [r3, #20]
 8003092:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003096:	2b80      	cmp	r3, #128	@ 0x80
 8003098:	d016      	beq.n	80030c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2220      	movs	r2, #32
 80030a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b4:	f043 0220 	orr.w	r2, r3, #32
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e007      	b.n	80030d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	695b      	ldr	r3, [r3, #20]
 80030ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030d2:	2b80      	cmp	r3, #128	@ 0x80
 80030d4:	d1c3      	bne.n	800305e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030ec:	e049      	b.n	8003182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	695b      	ldr	r3, [r3, #20]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	2b10      	cmp	r3, #16
 80030fa:	d119      	bne.n	8003130 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f06f 0210 	mvn.w	r2, #16
 8003104:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e030      	b.n	8003192 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003130:	f7fe f99a 	bl	8001468 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	68ba      	ldr	r2, [r7, #8]
 800313c:	429a      	cmp	r2, r3
 800313e:	d302      	bcc.n	8003146 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d11d      	bne.n	8003182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	695b      	ldr	r3, [r3, #20]
 800314c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003150:	2b40      	cmp	r3, #64	@ 0x40
 8003152:	d016      	beq.n	8003182 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2220      	movs	r2, #32
 800315e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	f043 0220 	orr.w	r2, r3, #32
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e007      	b.n	8003192 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	695b      	ldr	r3, [r3, #20]
 8003188:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800318c:	2b40      	cmp	r3, #64	@ 0x40
 800318e:	d1ae      	bne.n	80030ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3710      	adds	r7, #16
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800319a:	b480      	push	{r7}
 800319c:	b083      	sub	sp, #12
 800319e:	af00      	add	r7, sp, #0
 80031a0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031b0:	d11b      	bne.n	80031ea <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80031ba:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031d6:	f043 0204 	orr.w	r2, r3, #4
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b20      	cmp	r3, #32
 800320c:	d129      	bne.n	8003262 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2224      	movs	r2, #36	@ 0x24
 8003212:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f022 0201 	bic.w	r2, r2, #1
 8003224:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f022 0210 	bic.w	r2, r2, #16
 8003234:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	683a      	ldr	r2, [r7, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f042 0201 	orr.w	r2, r2, #1
 8003254:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2220      	movs	r2, #32
 800325a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800325e:	2300      	movs	r3, #0
 8003260:	e000      	b.n	8003264 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003262:	2302      	movs	r3, #2
  }
}
 8003264:	4618      	mov	r0, r3
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800327a:	2300      	movs	r3, #0
 800327c:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b20      	cmp	r3, #32
 8003288:	d12a      	bne.n	80032e0 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2224      	movs	r2, #36	@ 0x24
 800328e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80032aa:	89fb      	ldrh	r3, [r7, #14]
 80032ac:	f023 030f 	bic.w	r3, r3, #15
 80032b0:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	89fb      	ldrh	r3, [r7, #14]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	89fa      	ldrh	r2, [r7, #14]
 80032c2:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0201 	orr.w	r2, r2, #1
 80032d2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2220      	movs	r2, #32
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80032e0:	2302      	movs	r3, #2
  }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3714      	adds	r7, #20
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
	...

080032f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80032f6:	2300      	movs	r3, #0
 80032f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	4b20      	ldr	r3, [pc, #128]	@ (8003380 <HAL_PWREx_EnableOverDrive+0x90>)
 8003300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003302:	4a1f      	ldr	r2, [pc, #124]	@ (8003380 <HAL_PWREx_EnableOverDrive+0x90>)
 8003304:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003308:	6413      	str	r3, [r2, #64]	@ 0x40
 800330a:	4b1d      	ldr	r3, [pc, #116]	@ (8003380 <HAL_PWREx_EnableOverDrive+0x90>)
 800330c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800330e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003316:	4b1b      	ldr	r3, [pc, #108]	@ (8003384 <HAL_PWREx_EnableOverDrive+0x94>)
 8003318:	2201      	movs	r2, #1
 800331a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800331c:	f7fe f8a4 	bl	8001468 <HAL_GetTick>
 8003320:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003322:	e009      	b.n	8003338 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003324:	f7fe f8a0 	bl	8001468 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003332:	d901      	bls.n	8003338 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e01f      	b.n	8003378 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003338:	4b13      	ldr	r3, [pc, #76]	@ (8003388 <HAL_PWREx_EnableOverDrive+0x98>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003344:	d1ee      	bne.n	8003324 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003346:	4b11      	ldr	r3, [pc, #68]	@ (800338c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003348:	2201      	movs	r2, #1
 800334a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800334c:	f7fe f88c 	bl	8001468 <HAL_GetTick>
 8003350:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003352:	e009      	b.n	8003368 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003354:	f7fe f888 	bl	8001468 <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003362:	d901      	bls.n	8003368 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e007      	b.n	8003378 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003368:	4b07      	ldr	r3, [pc, #28]	@ (8003388 <HAL_PWREx_EnableOverDrive+0x98>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003370:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003374:	d1ee      	bne.n	8003354 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3708      	adds	r7, #8
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40023800 	.word	0x40023800
 8003384:	420e0040 	.word	0x420e0040
 8003388:	40007000 	.word	0x40007000
 800338c:	420e0044 	.word	0x420e0044

08003390 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b086      	sub	sp, #24
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e267      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0301 	and.w	r3, r3, #1
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d075      	beq.n	800349a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033ae:	4b88      	ldr	r3, [pc, #544]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 80033b0:	689b      	ldr	r3, [r3, #8]
 80033b2:	f003 030c 	and.w	r3, r3, #12
 80033b6:	2b04      	cmp	r3, #4
 80033b8:	d00c      	beq.n	80033d4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033ba:	4b85      	ldr	r3, [pc, #532]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d112      	bne.n	80033ec <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033c6:	4b82      	ldr	r3, [pc, #520]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033d2:	d10b      	bne.n	80033ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d4:	4b7e      	ldr	r3, [pc, #504]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d05b      	beq.n	8003498 <HAL_RCC_OscConfig+0x108>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d157      	bne.n	8003498 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e242      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f4:	d106      	bne.n	8003404 <HAL_RCC_OscConfig+0x74>
 80033f6:	4b76      	ldr	r3, [pc, #472]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a75      	ldr	r2, [pc, #468]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 80033fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	e01d      	b.n	8003440 <HAL_RCC_OscConfig+0xb0>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800340c:	d10c      	bne.n	8003428 <HAL_RCC_OscConfig+0x98>
 800340e:	4b70      	ldr	r3, [pc, #448]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a6f      	ldr	r2, [pc, #444]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 8003414:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003418:	6013      	str	r3, [r2, #0]
 800341a:	4b6d      	ldr	r3, [pc, #436]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a6c      	ldr	r2, [pc, #432]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 8003420:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003424:	6013      	str	r3, [r2, #0]
 8003426:	e00b      	b.n	8003440 <HAL_RCC_OscConfig+0xb0>
 8003428:	4b69      	ldr	r3, [pc, #420]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4a68      	ldr	r2, [pc, #416]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 800342e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003432:	6013      	str	r3, [r2, #0]
 8003434:	4b66      	ldr	r3, [pc, #408]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a65      	ldr	r2, [pc, #404]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 800343a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800343e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d013      	beq.n	8003470 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003448:	f7fe f80e 	bl	8001468 <HAL_GetTick>
 800344c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003450:	f7fe f80a 	bl	8001468 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b64      	cmp	r3, #100	@ 0x64
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e207      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003462:	4b5b      	ldr	r3, [pc, #364]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0f0      	beq.n	8003450 <HAL_RCC_OscConfig+0xc0>
 800346e:	e014      	b.n	800349a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003470:	f7fd fffa 	bl	8001468 <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003476:	e008      	b.n	800348a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003478:	f7fd fff6 	bl	8001468 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	@ 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e1f3      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800348a:	4b51      	ldr	r3, [pc, #324]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1f0      	bne.n	8003478 <HAL_RCC_OscConfig+0xe8>
 8003496:	e000      	b.n	800349a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d063      	beq.n	800356e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034a6:	4b4a      	ldr	r3, [pc, #296]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00b      	beq.n	80034ca <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034b2:	4b47      	ldr	r3, [pc, #284]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80034ba:	2b08      	cmp	r3, #8
 80034bc:	d11c      	bne.n	80034f8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034be:	4b44      	ldr	r3, [pc, #272]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d116      	bne.n	80034f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ca:	4b41      	ldr	r3, [pc, #260]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_RCC_OscConfig+0x152>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d001      	beq.n	80034e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	e1c7      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034e2:	4b3b      	ldr	r3, [pc, #236]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	00db      	lsls	r3, r3, #3
 80034f0:	4937      	ldr	r1, [pc, #220]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034f6:	e03a      	b.n	800356e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d020      	beq.n	8003542 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003500:	4b34      	ldr	r3, [pc, #208]	@ (80035d4 <HAL_RCC_OscConfig+0x244>)
 8003502:	2201      	movs	r2, #1
 8003504:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003506:	f7fd ffaf 	bl	8001468 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350e:	f7fd ffab 	bl	8001468 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e1a8      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003520:	4b2b      	ldr	r3, [pc, #172]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0302 	and.w	r3, r3, #2
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352c:	4b28      	ldr	r3, [pc, #160]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	691b      	ldr	r3, [r3, #16]
 8003538:	00db      	lsls	r3, r3, #3
 800353a:	4925      	ldr	r1, [pc, #148]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 800353c:	4313      	orrs	r3, r2
 800353e:	600b      	str	r3, [r1, #0]
 8003540:	e015      	b.n	800356e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003542:	4b24      	ldr	r3, [pc, #144]	@ (80035d4 <HAL_RCC_OscConfig+0x244>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003548:	f7fd ff8e 	bl	8001468 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003550:	f7fd ff8a 	bl	8001468 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e187      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003562:	4b1b      	ldr	r3, [pc, #108]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0302 	and.w	r3, r3, #2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d036      	beq.n	80035e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	695b      	ldr	r3, [r3, #20]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003582:	4b15      	ldr	r3, [pc, #84]	@ (80035d8 <HAL_RCC_OscConfig+0x248>)
 8003584:	2201      	movs	r2, #1
 8003586:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003588:	f7fd ff6e 	bl	8001468 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003590:	f7fd ff6a 	bl	8001468 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e167      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035a2:	4b0b      	ldr	r3, [pc, #44]	@ (80035d0 <HAL_RCC_OscConfig+0x240>)
 80035a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0f0      	beq.n	8003590 <HAL_RCC_OscConfig+0x200>
 80035ae:	e01b      	b.n	80035e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035b0:	4b09      	ldr	r3, [pc, #36]	@ (80035d8 <HAL_RCC_OscConfig+0x248>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b6:	f7fd ff57 	bl	8001468 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035bc:	e00e      	b.n	80035dc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035be:	f7fd ff53 	bl	8001468 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d907      	bls.n	80035dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e150      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
 80035d0:	40023800 	.word	0x40023800
 80035d4:	42470000 	.word	0x42470000
 80035d8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035dc:	4b88      	ldr	r3, [pc, #544]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 80035de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d1ea      	bne.n	80035be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8097 	beq.w	8003724 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035f6:	2300      	movs	r3, #0
 80035f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035fa:	4b81      	ldr	r3, [pc, #516]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d10f      	bne.n	8003626 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	60bb      	str	r3, [r7, #8]
 800360a:	4b7d      	ldr	r3, [pc, #500]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 800360c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360e:	4a7c      	ldr	r2, [pc, #496]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 8003610:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003614:	6413      	str	r3, [r2, #64]	@ 0x40
 8003616:	4b7a      	ldr	r3, [pc, #488]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800361e:	60bb      	str	r3, [r7, #8]
 8003620:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003622:	2301      	movs	r3, #1
 8003624:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003626:	4b77      	ldr	r3, [pc, #476]	@ (8003804 <HAL_RCC_OscConfig+0x474>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800362e:	2b00      	cmp	r3, #0
 8003630:	d118      	bne.n	8003664 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003632:	4b74      	ldr	r3, [pc, #464]	@ (8003804 <HAL_RCC_OscConfig+0x474>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a73      	ldr	r2, [pc, #460]	@ (8003804 <HAL_RCC_OscConfig+0x474>)
 8003638:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800363c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800363e:	f7fd ff13 	bl	8001468 <HAL_GetTick>
 8003642:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003644:	e008      	b.n	8003658 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003646:	f7fd ff0f 	bl	8001468 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	1ad3      	subs	r3, r2, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d901      	bls.n	8003658 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003654:	2303      	movs	r3, #3
 8003656:	e10c      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003658:	4b6a      	ldr	r3, [pc, #424]	@ (8003804 <HAL_RCC_OscConfig+0x474>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0f0      	beq.n	8003646 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d106      	bne.n	800367a <HAL_RCC_OscConfig+0x2ea>
 800366c:	4b64      	ldr	r3, [pc, #400]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 800366e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003670:	4a63      	ldr	r2, [pc, #396]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 8003672:	f043 0301 	orr.w	r3, r3, #1
 8003676:	6713      	str	r3, [r2, #112]	@ 0x70
 8003678:	e01c      	b.n	80036b4 <HAL_RCC_OscConfig+0x324>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	2b05      	cmp	r3, #5
 8003680:	d10c      	bne.n	800369c <HAL_RCC_OscConfig+0x30c>
 8003682:	4b5f      	ldr	r3, [pc, #380]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 8003684:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003686:	4a5e      	ldr	r2, [pc, #376]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 8003688:	f043 0304 	orr.w	r3, r3, #4
 800368c:	6713      	str	r3, [r2, #112]	@ 0x70
 800368e:	4b5c      	ldr	r3, [pc, #368]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 8003690:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003692:	4a5b      	ldr	r2, [pc, #364]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 8003694:	f043 0301 	orr.w	r3, r3, #1
 8003698:	6713      	str	r3, [r2, #112]	@ 0x70
 800369a:	e00b      	b.n	80036b4 <HAL_RCC_OscConfig+0x324>
 800369c:	4b58      	ldr	r3, [pc, #352]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 800369e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036a0:	4a57      	ldr	r2, [pc, #348]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 80036a2:	f023 0301 	bic.w	r3, r3, #1
 80036a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036a8:	4b55      	ldr	r3, [pc, #340]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ac:	4a54      	ldr	r2, [pc, #336]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 80036ae:	f023 0304 	bic.w	r3, r3, #4
 80036b2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d015      	beq.n	80036e8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036bc:	f7fd fed4 	bl	8001468 <HAL_GetTick>
 80036c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c2:	e00a      	b.n	80036da <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c4:	f7fd fed0 	bl	8001468 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e0cb      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036da:	4b49      	ldr	r3, [pc, #292]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d0ee      	beq.n	80036c4 <HAL_RCC_OscConfig+0x334>
 80036e6:	e014      	b.n	8003712 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e8:	f7fd febe 	bl	8001468 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036ee:	e00a      	b.n	8003706 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f0:	f7fd feba 	bl	8001468 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036fe:	4293      	cmp	r3, r2
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e0b5      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003706:	4b3e      	ldr	r3, [pc, #248]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370a:	f003 0302 	and.w	r3, r3, #2
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1ee      	bne.n	80036f0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003712:	7dfb      	ldrb	r3, [r7, #23]
 8003714:	2b01      	cmp	r3, #1
 8003716:	d105      	bne.n	8003724 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003718:	4b39      	ldr	r3, [pc, #228]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 800371a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371c:	4a38      	ldr	r2, [pc, #224]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 800371e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003722:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	2b00      	cmp	r3, #0
 800372a:	f000 80a1 	beq.w	8003870 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800372e:	4b34      	ldr	r3, [pc, #208]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f003 030c 	and.w	r3, r3, #12
 8003736:	2b08      	cmp	r3, #8
 8003738:	d05c      	beq.n	80037f4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d141      	bne.n	80037c6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003742:	4b31      	ldr	r3, [pc, #196]	@ (8003808 <HAL_RCC_OscConfig+0x478>)
 8003744:	2200      	movs	r2, #0
 8003746:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003748:	f7fd fe8e 	bl	8001468 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374e:	e008      	b.n	8003762 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003750:	f7fd fe8a 	bl	8001468 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d901      	bls.n	8003762 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e087      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003762:	4b27      	ldr	r3, [pc, #156]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d1f0      	bne.n	8003750 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	69da      	ldr	r2, [r3, #28]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a1b      	ldr	r3, [r3, #32]
 8003776:	431a      	orrs	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800377c:	019b      	lsls	r3, r3, #6
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003784:	085b      	lsrs	r3, r3, #1
 8003786:	3b01      	subs	r3, #1
 8003788:	041b      	lsls	r3, r3, #16
 800378a:	431a      	orrs	r2, r3
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003790:	061b      	lsls	r3, r3, #24
 8003792:	491b      	ldr	r1, [pc, #108]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003798:	4b1b      	ldr	r3, [pc, #108]	@ (8003808 <HAL_RCC_OscConfig+0x478>)
 800379a:	2201      	movs	r2, #1
 800379c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800379e:	f7fd fe63 	bl	8001468 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037a6:	f7fd fe5f 	bl	8001468 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e05c      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037b8:	4b11      	ldr	r3, [pc, #68]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x416>
 80037c4:	e054      	b.n	8003870 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037c6:	4b10      	ldr	r3, [pc, #64]	@ (8003808 <HAL_RCC_OscConfig+0x478>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037cc:	f7fd fe4c 	bl	8001468 <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fd fe48 	bl	8001468 <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e045      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037e6:	4b06      	ldr	r3, [pc, #24]	@ (8003800 <HAL_RCC_OscConfig+0x470>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1f0      	bne.n	80037d4 <HAL_RCC_OscConfig+0x444>
 80037f2:	e03d      	b.n	8003870 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	699b      	ldr	r3, [r3, #24]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d107      	bne.n	800380c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e038      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
 8003800:	40023800 	.word	0x40023800
 8003804:	40007000 	.word	0x40007000
 8003808:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800380c:	4b1b      	ldr	r3, [pc, #108]	@ (800387c <HAL_RCC_OscConfig+0x4ec>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d028      	beq.n	800386c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003824:	429a      	cmp	r2, r3
 8003826:	d121      	bne.n	800386c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003832:	429a      	cmp	r2, r3
 8003834:	d11a      	bne.n	800386c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800383c:	4013      	ands	r3, r2
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003842:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003844:	4293      	cmp	r3, r2
 8003846:	d111      	bne.n	800386c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003852:	085b      	lsrs	r3, r3, #1
 8003854:	3b01      	subs	r3, #1
 8003856:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d107      	bne.n	800386c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003866:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003868:	429a      	cmp	r2, r3
 800386a:	d001      	beq.n	8003870 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40023800 	.word	0x40023800

08003880 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b084      	sub	sp, #16
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d101      	bne.n	8003894 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e0cc      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003894:	4b68      	ldr	r3, [pc, #416]	@ (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 030f 	and.w	r3, r3, #15
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d90c      	bls.n	80038bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038a2:	4b65      	ldr	r3, [pc, #404]	@ (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	b2d2      	uxtb	r2, r2
 80038a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038aa:	4b63      	ldr	r3, [pc, #396]	@ (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	683a      	ldr	r2, [r7, #0]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d001      	beq.n	80038bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e0b8      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d020      	beq.n	800390a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d005      	beq.n	80038e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038d4:	4b59      	ldr	r3, [pc, #356]	@ (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	4a58      	ldr	r2, [pc, #352]	@ (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80038da:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80038de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038ec:	4b53      	ldr	r3, [pc, #332]	@ (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	4a52      	ldr	r2, [pc, #328]	@ (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80038f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038f8:	4b50      	ldr	r3, [pc, #320]	@ (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	494d      	ldr	r1, [pc, #308]	@ (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003906:	4313      	orrs	r3, r2
 8003908:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d044      	beq.n	80039a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	685b      	ldr	r3, [r3, #4]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d107      	bne.n	800392e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391e:	4b47      	ldr	r3, [pc, #284]	@ (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003926:	2b00      	cmp	r3, #0
 8003928:	d119      	bne.n	800395e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	e07f      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	2b02      	cmp	r3, #2
 8003934:	d003      	beq.n	800393e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800393a:	2b03      	cmp	r3, #3
 800393c:	d107      	bne.n	800394e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800393e:	4b3f      	ldr	r3, [pc, #252]	@ (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003946:	2b00      	cmp	r3, #0
 8003948:	d109      	bne.n	800395e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e06f      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800394e:	4b3b      	ldr	r3, [pc, #236]	@ (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e067      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800395e:	4b37      	ldr	r3, [pc, #220]	@ (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f023 0203 	bic.w	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	4934      	ldr	r1, [pc, #208]	@ (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	4313      	orrs	r3, r2
 800396e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003970:	f7fd fd7a 	bl	8001468 <HAL_GetTick>
 8003974:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	e00a      	b.n	800398e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003978:	f7fd fd76 	bl	8001468 <HAL_GetTick>
 800397c:	4602      	mov	r2, r0
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	1ad3      	subs	r3, r2, r3
 8003982:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003986:	4293      	cmp	r3, r2
 8003988:	d901      	bls.n	800398e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e04f      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800398e:	4b2b      	ldr	r3, [pc, #172]	@ (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	f003 020c 	and.w	r2, r3, #12
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	429a      	cmp	r2, r3
 800399e:	d1eb      	bne.n	8003978 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80039a0:	4b25      	ldr	r3, [pc, #148]	@ (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f003 030f 	and.w	r3, r3, #15
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d20c      	bcs.n	80039c8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ae:	4b22      	ldr	r3, [pc, #136]	@ (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 80039b0:	683a      	ldr	r2, [r7, #0]
 80039b2:	b2d2      	uxtb	r2, r2
 80039b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039b6:	4b20      	ldr	r3, [pc, #128]	@ (8003a38 <HAL_RCC_ClockConfig+0x1b8>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f003 030f 	and.w	r3, r3, #15
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d001      	beq.n	80039c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e032      	b.n	8003a2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 0304 	and.w	r3, r3, #4
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d008      	beq.n	80039e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039d4:	4b19      	ldr	r3, [pc, #100]	@ (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	4916      	ldr	r1, [pc, #88]	@ (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80039e2:	4313      	orrs	r3, r2
 80039e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0308 	and.w	r3, r3, #8
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d009      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80039f2:	4b12      	ldr	r3, [pc, #72]	@ (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	490e      	ldr	r1, [pc, #56]	@ (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a06:	f000 f821 	bl	8003a4c <HAL_RCC_GetSysClockFreq>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a3c <HAL_RCC_ClockConfig+0x1bc>)
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	091b      	lsrs	r3, r3, #4
 8003a12:	f003 030f 	and.w	r3, r3, #15
 8003a16:	490a      	ldr	r1, [pc, #40]	@ (8003a40 <HAL_RCC_ClockConfig+0x1c0>)
 8003a18:	5ccb      	ldrb	r3, [r1, r3]
 8003a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a1e:	4a09      	ldr	r2, [pc, #36]	@ (8003a44 <HAL_RCC_ClockConfig+0x1c4>)
 8003a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a22:	4b09      	ldr	r3, [pc, #36]	@ (8003a48 <HAL_RCC_ClockConfig+0x1c8>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fd fbf6 	bl	8001218 <HAL_InitTick>

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40023c00 	.word	0x40023c00
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	080058e0 	.word	0x080058e0
 8003a44:	20000004 	.word	0x20000004
 8003a48:	20000008 	.word	0x20000008

08003a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a50:	b090      	sub	sp, #64	@ 0x40
 8003a52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003a54:	2300      	movs	r3, #0
 8003a56:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003a60:	2300      	movs	r3, #0
 8003a62:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a64:	4b59      	ldr	r3, [pc, #356]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f003 030c 	and.w	r3, r3, #12
 8003a6c:	2b08      	cmp	r3, #8
 8003a6e:	d00d      	beq.n	8003a8c <HAL_RCC_GetSysClockFreq+0x40>
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	f200 80a1 	bhi.w	8003bb8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x34>
 8003a7a:	2b04      	cmp	r3, #4
 8003a7c:	d003      	beq.n	8003a86 <HAL_RCC_GetSysClockFreq+0x3a>
 8003a7e:	e09b      	b.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a80:	4b53      	ldr	r3, [pc, #332]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003a82:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a84:	e09b      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a86:	4b53      	ldr	r3, [pc, #332]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003a88:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003a8a:	e098      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a8c:	4b4f      	ldr	r3, [pc, #316]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003a94:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a96:	4b4d      	ldr	r3, [pc, #308]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d028      	beq.n	8003af4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	099b      	lsrs	r3, r3, #6
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	623b      	str	r3, [r7, #32]
 8003aac:	627a      	str	r2, [r7, #36]	@ 0x24
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	4b47      	ldr	r3, [pc, #284]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ab8:	fb03 f201 	mul.w	r2, r3, r1
 8003abc:	2300      	movs	r3, #0
 8003abe:	fb00 f303 	mul.w	r3, r0, r3
 8003ac2:	4413      	add	r3, r2
 8003ac4:	4a43      	ldr	r2, [pc, #268]	@ (8003bd4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ac6:	fba0 1202 	umull	r1, r2, r0, r2
 8003aca:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003acc:	460a      	mov	r2, r1
 8003ace:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003ad0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ad2:	4413      	add	r3, r2
 8003ad4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ad6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ad8:	2200      	movs	r2, #0
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	61fa      	str	r2, [r7, #28]
 8003ade:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ae2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003ae6:	f7fc fb83 	bl	80001f0 <__aeabi_uldivmod>
 8003aea:	4602      	mov	r2, r0
 8003aec:	460b      	mov	r3, r1
 8003aee:	4613      	mov	r3, r2
 8003af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003af2:	e053      	b.n	8003b9c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003af4:	4b35      	ldr	r3, [pc, #212]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	099b      	lsrs	r3, r3, #6
 8003afa:	2200      	movs	r2, #0
 8003afc:	613b      	str	r3, [r7, #16]
 8003afe:	617a      	str	r2, [r7, #20]
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b06:	f04f 0b00 	mov.w	fp, #0
 8003b0a:	4652      	mov	r2, sl
 8003b0c:	465b      	mov	r3, fp
 8003b0e:	f04f 0000 	mov.w	r0, #0
 8003b12:	f04f 0100 	mov.w	r1, #0
 8003b16:	0159      	lsls	r1, r3, #5
 8003b18:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b1c:	0150      	lsls	r0, r2, #5
 8003b1e:	4602      	mov	r2, r0
 8003b20:	460b      	mov	r3, r1
 8003b22:	ebb2 080a 	subs.w	r8, r2, sl
 8003b26:	eb63 090b 	sbc.w	r9, r3, fp
 8003b2a:	f04f 0200 	mov.w	r2, #0
 8003b2e:	f04f 0300 	mov.w	r3, #0
 8003b32:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b36:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b3a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b3e:	ebb2 0408 	subs.w	r4, r2, r8
 8003b42:	eb63 0509 	sbc.w	r5, r3, r9
 8003b46:	f04f 0200 	mov.w	r2, #0
 8003b4a:	f04f 0300 	mov.w	r3, #0
 8003b4e:	00eb      	lsls	r3, r5, #3
 8003b50:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b54:	00e2      	lsls	r2, r4, #3
 8003b56:	4614      	mov	r4, r2
 8003b58:	461d      	mov	r5, r3
 8003b5a:	eb14 030a 	adds.w	r3, r4, sl
 8003b5e:	603b      	str	r3, [r7, #0]
 8003b60:	eb45 030b 	adc.w	r3, r5, fp
 8003b64:	607b      	str	r3, [r7, #4]
 8003b66:	f04f 0200 	mov.w	r2, #0
 8003b6a:	f04f 0300 	mov.w	r3, #0
 8003b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003b72:	4629      	mov	r1, r5
 8003b74:	028b      	lsls	r3, r1, #10
 8003b76:	4621      	mov	r1, r4
 8003b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b7c:	4621      	mov	r1, r4
 8003b7e:	028a      	lsls	r2, r1, #10
 8003b80:	4610      	mov	r0, r2
 8003b82:	4619      	mov	r1, r3
 8003b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b86:	2200      	movs	r2, #0
 8003b88:	60bb      	str	r3, [r7, #8]
 8003b8a:	60fa      	str	r2, [r7, #12]
 8003b8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b90:	f7fc fb2e 	bl	80001f0 <__aeabi_uldivmod>
 8003b94:	4602      	mov	r2, r0
 8003b96:	460b      	mov	r3, r1
 8003b98:	4613      	mov	r3, r2
 8003b9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <HAL_RCC_GetSysClockFreq+0x180>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	0c1b      	lsrs	r3, r3, #16
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003bac:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bb6:	e002      	b.n	8003bbe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bb8:	4b05      	ldr	r3, [pc, #20]	@ (8003bd0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3740      	adds	r7, #64	@ 0x40
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bca:	bf00      	nop
 8003bcc:	40023800 	.word	0x40023800
 8003bd0:	00f42400 	.word	0x00f42400
 8003bd4:	00b71b00 	.word	0x00b71b00

08003bd8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003bdc:	4b03      	ldr	r3, [pc, #12]	@ (8003bec <HAL_RCC_GetHCLKFreq+0x14>)
 8003bde:	681b      	ldr	r3, [r3, #0]
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be8:	4770      	bx	lr
 8003bea:	bf00      	nop
 8003bec:	20000004 	.word	0x20000004

08003bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003bf4:	f7ff fff0 	bl	8003bd8 <HAL_RCC_GetHCLKFreq>
 8003bf8:	4602      	mov	r2, r0
 8003bfa:	4b05      	ldr	r3, [pc, #20]	@ (8003c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	0a9b      	lsrs	r3, r3, #10
 8003c00:	f003 0307 	and.w	r3, r3, #7
 8003c04:	4903      	ldr	r1, [pc, #12]	@ (8003c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c06:	5ccb      	ldrb	r3, [r1, r3]
 8003c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	40023800 	.word	0x40023800
 8003c14:	080058f0 	.word	0x080058f0

08003c18 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	220f      	movs	r2, #15
 8003c26:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003c28:	4b12      	ldr	r3, [pc, #72]	@ (8003c74 <HAL_RCC_GetClockConfig+0x5c>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f003 0203 	and.w	r2, r3, #3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003c34:	4b0f      	ldr	r3, [pc, #60]	@ (8003c74 <HAL_RCC_GetClockConfig+0x5c>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003c40:	4b0c      	ldr	r3, [pc, #48]	@ (8003c74 <HAL_RCC_GetClockConfig+0x5c>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003c4c:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <HAL_RCC_GetClockConfig+0x5c>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	08db      	lsrs	r3, r3, #3
 8003c52:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003c5a:	4b07      	ldr	r3, [pc, #28]	@ (8003c78 <HAL_RCC_GetClockConfig+0x60>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 020f 	and.w	r2, r3, #15
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	601a      	str	r2, [r3, #0]
}
 8003c66:	bf00      	nop
 8003c68:	370c      	adds	r7, #12
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40023c00 	.word	0x40023c00

08003c7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d101      	bne.n	8003c8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e041      	b.n	8003d12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d106      	bne.n	8003ca8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 f839 	bl	8003d1a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2202      	movs	r2, #2
 8003cac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	3304      	adds	r3, #4
 8003cb8:	4619      	mov	r1, r3
 8003cba:	4610      	mov	r0, r2
 8003cbc:	f000 f9c0 	bl	8004040 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d10:	2300      	movs	r3, #0
}
 8003d12:	4618      	mov	r0, r3
 8003d14:	3708      	adds	r7, #8
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bd80      	pop	{r7, pc}

08003d1a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b083      	sub	sp, #12
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d001      	beq.n	8003d48 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e04e      	b.n	8003de6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2202      	movs	r2, #2
 8003d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68da      	ldr	r2, [r3, #12]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f042 0201 	orr.w	r2, r2, #1
 8003d5e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a23      	ldr	r2, [pc, #140]	@ (8003df4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d022      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d72:	d01d      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a1f      	ldr	r2, [pc, #124]	@ (8003df8 <HAL_TIM_Base_Start_IT+0xc8>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d018      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a1e      	ldr	r2, [pc, #120]	@ (8003dfc <HAL_TIM_Base_Start_IT+0xcc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d013      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a1c      	ldr	r2, [pc, #112]	@ (8003e00 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d00e      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a1b      	ldr	r2, [pc, #108]	@ (8003e04 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d009      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a19      	ldr	r2, [pc, #100]	@ (8003e08 <HAL_TIM_Base_Start_IT+0xd8>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d004      	beq.n	8003db0 <HAL_TIM_Base_Start_IT+0x80>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a18      	ldr	r2, [pc, #96]	@ (8003e0c <HAL_TIM_Base_Start_IT+0xdc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d111      	bne.n	8003dd4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	689b      	ldr	r3, [r3, #8]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2b06      	cmp	r3, #6
 8003dc0:	d010      	beq.n	8003de4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f042 0201 	orr.w	r2, r2, #1
 8003dd0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd2:	e007      	b.n	8003de4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f042 0201 	orr.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3714      	adds	r7, #20
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	40010000 	.word	0x40010000
 8003df8:	40000400 	.word	0x40000400
 8003dfc:	40000800 	.word	0x40000800
 8003e00:	40000c00 	.word	0x40000c00
 8003e04:	40010400 	.word	0x40010400
 8003e08:	40014000 	.word	0x40014000
 8003e0c:	40001800 	.word	0x40001800

08003e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b084      	sub	sp, #16
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d020      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f003 0302 	and.w	r3, r3, #2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d01b      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f06f 0202 	mvn.w	r2, #2
 8003e44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	699b      	ldr	r3, [r3, #24]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 f8d2 	bl	8004004 <HAL_TIM_IC_CaptureCallback>
 8003e60:	e005      	b.n	8003e6e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f000 f8c4 	bl	8003ff0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 f8d5 	bl	8004018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2200      	movs	r2, #0
 8003e72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d020      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	f003 0304 	and.w	r3, r3, #4
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d01b      	beq.n	8003ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f06f 0204 	mvn.w	r2, #4
 8003e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f8ac 	bl	8004004 <HAL_TIM_IC_CaptureCallback>
 8003eac:	e005      	b.n	8003eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003eae:	6878      	ldr	r0, [r7, #4]
 8003eb0:	f000 f89e 	bl	8003ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003eb4:	6878      	ldr	r0, [r7, #4]
 8003eb6:	f000 f8af 	bl	8004018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	f003 0308 	and.w	r3, r3, #8
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d020      	beq.n	8003f0c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	f003 0308 	and.w	r3, r3, #8
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d01b      	beq.n	8003f0c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0208 	mvn.w	r2, #8
 8003edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2204      	movs	r2, #4
 8003ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	69db      	ldr	r3, [r3, #28]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d003      	beq.n	8003efa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f886 	bl	8004004 <HAL_TIM_IC_CaptureCallback>
 8003ef8:	e005      	b.n	8003f06 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f878 	bl	8003ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f889 	bl	8004018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	f003 0310 	and.w	r3, r3, #16
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d020      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f003 0310 	and.w	r3, r3, #16
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d01b      	beq.n	8003f58 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f06f 0210 	mvn.w	r2, #16
 8003f28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2208      	movs	r2, #8
 8003f2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	69db      	ldr	r3, [r3, #28]
 8003f36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f860 	bl	8004004 <HAL_TIM_IC_CaptureCallback>
 8003f44:	e005      	b.n	8003f52 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f46:	6878      	ldr	r0, [r7, #4]
 8003f48:	f000 f852 	bl	8003ff0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f000 f863 	bl	8004018 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2200      	movs	r2, #0
 8003f56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00c      	beq.n	8003f7c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d007      	beq.n	8003f7c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f06f 0201 	mvn.w	r2, #1
 8003f74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f7fd f8a4 	bl	80010c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00c      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d007      	beq.n	8003fa0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f900 	bl	80041a0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00c      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d007      	beq.n	8003fc4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f834 	bl	800402c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f003 0320 	and.w	r3, r3, #32
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00c      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d007      	beq.n	8003fe8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0220 	mvn.w	r2, #32
 8003fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f8d2 	bl	800418c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003fe8:	bf00      	nop
 8003fea:	3710      	adds	r7, #16
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}

08003ff0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004020:	bf00      	nop
 8004022:	370c      	adds	r7, #12
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004034:	bf00      	nop
 8004036:	370c      	adds	r7, #12
 8004038:	46bd      	mov	sp, r7
 800403a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403e:	4770      	bx	lr

08004040 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
 8004048:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a43      	ldr	r2, [pc, #268]	@ (8004160 <TIM_Base_SetConfig+0x120>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d013      	beq.n	8004080 <TIM_Base_SetConfig+0x40>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800405e:	d00f      	beq.n	8004080 <TIM_Base_SetConfig+0x40>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a40      	ldr	r2, [pc, #256]	@ (8004164 <TIM_Base_SetConfig+0x124>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d00b      	beq.n	8004080 <TIM_Base_SetConfig+0x40>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a3f      	ldr	r2, [pc, #252]	@ (8004168 <TIM_Base_SetConfig+0x128>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d007      	beq.n	8004080 <TIM_Base_SetConfig+0x40>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	4a3e      	ldr	r2, [pc, #248]	@ (800416c <TIM_Base_SetConfig+0x12c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d003      	beq.n	8004080 <TIM_Base_SetConfig+0x40>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a3d      	ldr	r2, [pc, #244]	@ (8004170 <TIM_Base_SetConfig+0x130>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d108      	bne.n	8004092 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004086:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	68fa      	ldr	r2, [r7, #12]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a32      	ldr	r2, [pc, #200]	@ (8004160 <TIM_Base_SetConfig+0x120>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d02b      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a0:	d027      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a2f      	ldr	r2, [pc, #188]	@ (8004164 <TIM_Base_SetConfig+0x124>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d023      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a2e      	ldr	r2, [pc, #184]	@ (8004168 <TIM_Base_SetConfig+0x128>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d01f      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a2d      	ldr	r2, [pc, #180]	@ (800416c <TIM_Base_SetConfig+0x12c>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d01b      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a2c      	ldr	r2, [pc, #176]	@ (8004170 <TIM_Base_SetConfig+0x130>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d017      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a2b      	ldr	r2, [pc, #172]	@ (8004174 <TIM_Base_SetConfig+0x134>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d013      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a2a      	ldr	r2, [pc, #168]	@ (8004178 <TIM_Base_SetConfig+0x138>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d00f      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a29      	ldr	r2, [pc, #164]	@ (800417c <TIM_Base_SetConfig+0x13c>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00b      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a28      	ldr	r2, [pc, #160]	@ (8004180 <TIM_Base_SetConfig+0x140>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d007      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a27      	ldr	r2, [pc, #156]	@ (8004184 <TIM_Base_SetConfig+0x144>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d003      	beq.n	80040f2 <TIM_Base_SetConfig+0xb2>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a26      	ldr	r2, [pc, #152]	@ (8004188 <TIM_Base_SetConfig+0x148>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d108      	bne.n	8004104 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	689a      	ldr	r2, [r3, #8]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	4a0e      	ldr	r2, [pc, #56]	@ (8004160 <TIM_Base_SetConfig+0x120>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d003      	beq.n	8004132 <TIM_Base_SetConfig+0xf2>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	4a10      	ldr	r2, [pc, #64]	@ (8004170 <TIM_Base_SetConfig+0x130>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d103      	bne.n	800413a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	691a      	ldr	r2, [r3, #16]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f043 0204 	orr.w	r2, r3, #4
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	68fa      	ldr	r2, [r7, #12]
 8004150:	601a      	str	r2, [r3, #0]
}
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	40010000 	.word	0x40010000
 8004164:	40000400 	.word	0x40000400
 8004168:	40000800 	.word	0x40000800
 800416c:	40000c00 	.word	0x40000c00
 8004170:	40010400 	.word	0x40010400
 8004174:	40014000 	.word	0x40014000
 8004178:	40014400 	.word	0x40014400
 800417c:	40014800 	.word	0x40014800
 8004180:	40001800 	.word	0x40001800
 8004184:	40001c00 	.word	0x40001c00
 8004188:	40002000 	.word	0x40002000

0800418c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800418c:	b480      	push	{r7}
 800418e:	b083      	sub	sp, #12
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b085      	sub	sp, #20
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	4603      	mov	r3, r0
 80041bc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80041c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041c6:	2b84      	cmp	r3, #132	@ 0x84
 80041c8:	d005      	beq.n	80041d6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80041ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4413      	add	r3, r2
 80041d2:	3303      	adds	r3, #3
 80041d4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80041d6:	68fb      	ldr	r3, [r7, #12]
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80041e8:	f000 fafc 	bl	80047e4 <vTaskStartScheduler>
  
  return osOK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	bd80      	pop	{r7, pc}

080041f2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80041f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f4:	b089      	sub	sp, #36	@ 0x24
 80041f6:	af04      	add	r7, sp, #16
 80041f8:	6078      	str	r0, [r7, #4]
 80041fa:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	2b00      	cmp	r3, #0
 8004202:	d020      	beq.n	8004246 <osThreadCreate+0x54>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d01c      	beq.n	8004246 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685c      	ldr	r4, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	691e      	ldr	r6, [r3, #16]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff ffc8 	bl	80041b4 <makeFreeRtosPriority>
 8004224:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	695b      	ldr	r3, [r3, #20]
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800422e:	9202      	str	r2, [sp, #8]
 8004230:	9301      	str	r3, [sp, #4]
 8004232:	9100      	str	r1, [sp, #0]
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	4632      	mov	r2, r6
 8004238:	4629      	mov	r1, r5
 800423a:	4620      	mov	r0, r4
 800423c:	f000 f8ed 	bl	800441a <xTaskCreateStatic>
 8004240:	4603      	mov	r3, r0
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e01c      	b.n	8004280 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685c      	ldr	r4, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004252:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff ffaa 	bl	80041b4 <makeFreeRtosPriority>
 8004260:	4602      	mov	r2, r0
 8004262:	f107 030c 	add.w	r3, r7, #12
 8004266:	9301      	str	r3, [sp, #4]
 8004268:	9200      	str	r2, [sp, #0]
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	4632      	mov	r2, r6
 800426e:	4629      	mov	r1, r5
 8004270:	4620      	mov	r0, r4
 8004272:	f000 f932 	bl	80044da <xTaskCreate>
 8004276:	4603      	mov	r3, r0
 8004278:	2b01      	cmp	r3, #1
 800427a:	d001      	beq.n	8004280 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800427c:	2300      	movs	r3, #0
 800427e:	e000      	b.n	8004282 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004280:	68fb      	ldr	r3, [r7, #12]
}
 8004282:	4618      	mov	r0, r3
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800428a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800428a:	b580      	push	{r7, lr}
 800428c:	b084      	sub	sp, #16
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d001      	beq.n	80042a0 <osDelay+0x16>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	e000      	b.n	80042a2 <osDelay+0x18>
 80042a0:	2301      	movs	r3, #1
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fa68 	bl	8004778 <vTaskDelay>
  
  return osOK;
 80042a8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	f103 0208 	add.w	r2, r3, #8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80042ca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f103 0208 	add.w	r2, r3, #8
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f103 0208 	add.w	r2, r3, #8
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80042e6:	bf00      	nop
 80042e8:	370c      	adds	r7, #12
 80042ea:	46bd      	mov	sp, r7
 80042ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f0:	4770      	bx	lr

080042f2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2200      	movs	r2, #0
 80042fe:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800430c:	b480      	push	{r7}
 800430e:	b085      	sub	sp, #20
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	687a      	ldr	r2, [r7, #4]
 800433c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	601a      	str	r2, [r3, #0]
}
 8004348:	bf00      	nop
 800434a:	3714      	adds	r7, #20
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800436a:	d103      	bne.n	8004374 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	e00c      	b.n	800438e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3308      	adds	r3, #8
 8004378:	60fb      	str	r3, [r7, #12]
 800437a:	e002      	b.n	8004382 <vListInsert+0x2e>
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	60fb      	str	r3, [r7, #12]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	429a      	cmp	r2, r3
 800438c:	d2f6      	bcs.n	800437c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	683a      	ldr	r2, [r7, #0]
 800439c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68fa      	ldr	r2, [r7, #12]
 80043a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	683a      	ldr	r2, [r7, #0]
 80043a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	601a      	str	r2, [r3, #0]
}
 80043ba:	bf00      	nop
 80043bc:	3714      	adds	r7, #20
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80043c6:	b480      	push	{r7}
 80043c8:	b085      	sub	sp, #20
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	6892      	ldr	r2, [r2, #8]
 80043dc:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6852      	ldr	r2, [r2, #4]
 80043e6:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d103      	bne.n	80043fa <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689a      	ldr	r2, [r3, #8]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	1e5a      	subs	r2, r3, #1
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr

0800441a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800441a:	b580      	push	{r7, lr}
 800441c:	b08e      	sub	sp, #56	@ 0x38
 800441e:	af04      	add	r7, sp, #16
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	607a      	str	r2, [r7, #4]
 8004426:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004428:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10b      	bne.n	8004446 <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800442e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004432:	f383 8811 	msr	BASEPRI, r3
 8004436:	f3bf 8f6f 	isb	sy
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004440:	bf00      	nop
 8004442:	bf00      	nop
 8004444:	e7fd      	b.n	8004442 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004446:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004448:	2b00      	cmp	r3, #0
 800444a:	d10b      	bne.n	8004464 <xTaskCreateStatic+0x4a>
	__asm volatile
 800444c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004450:	f383 8811 	msr	BASEPRI, r3
 8004454:	f3bf 8f6f 	isb	sy
 8004458:	f3bf 8f4f 	dsb	sy
 800445c:	61fb      	str	r3, [r7, #28]
}
 800445e:	bf00      	nop
 8004460:	bf00      	nop
 8004462:	e7fd      	b.n	8004460 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004464:	23a0      	movs	r3, #160	@ 0xa0
 8004466:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2ba0      	cmp	r3, #160	@ 0xa0
 800446c:	d00b      	beq.n	8004486 <xTaskCreateStatic+0x6c>
	__asm volatile
 800446e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	61bb      	str	r3, [r7, #24]
}
 8004480:	bf00      	nop
 8004482:	bf00      	nop
 8004484:	e7fd      	b.n	8004482 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004486:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004488:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800448a:	2b00      	cmp	r3, #0
 800448c:	d01e      	beq.n	80044cc <xTaskCreateStatic+0xb2>
 800448e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004490:	2b00      	cmp	r3, #0
 8004492:	d01b      	beq.n	80044cc <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004496:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800449c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800449e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a0:	2202      	movs	r2, #2
 80044a2:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80044a6:	2300      	movs	r3, #0
 80044a8:	9303      	str	r3, [sp, #12]
 80044aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ac:	9302      	str	r3, [sp, #8]
 80044ae:	f107 0314 	add.w	r3, r7, #20
 80044b2:	9301      	str	r3, [sp, #4]
 80044b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b6:	9300      	str	r3, [sp, #0]
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	68b9      	ldr	r1, [r7, #8]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 f850 	bl	8004564 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80044c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80044c6:	f000 f8ed 	bl	80046a4 <prvAddNewTaskToReadyList>
 80044ca:	e001      	b.n	80044d0 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80044cc:	2300      	movs	r3, #0
 80044ce:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80044d0:	697b      	ldr	r3, [r7, #20]
	}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3728      	adds	r7, #40	@ 0x28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}

080044da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b08c      	sub	sp, #48	@ 0x30
 80044de:	af04      	add	r7, sp, #16
 80044e0:	60f8      	str	r0, [r7, #12]
 80044e2:	60b9      	str	r1, [r7, #8]
 80044e4:	603b      	str	r3, [r7, #0]
 80044e6:	4613      	mov	r3, r2
 80044e8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80044ea:	88fb      	ldrh	r3, [r7, #6]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4618      	mov	r0, r3
 80044f0:	f000 ff02 	bl	80052f8 <pvPortMalloc>
 80044f4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00e      	beq.n	800451a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80044fc:	20a0      	movs	r0, #160	@ 0xa0
 80044fe:	f000 fefb 	bl	80052f8 <pvPortMalloc>
 8004502:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d003      	beq.n	8004512 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	697a      	ldr	r2, [r7, #20]
 800450e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004510:	e005      	b.n	800451e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004512:	6978      	ldr	r0, [r7, #20]
 8004514:	f000 ffbe 	bl	8005494 <vPortFree>
 8004518:	e001      	b.n	800451e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800451a:	2300      	movs	r3, #0
 800451c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d017      	beq.n	8004554 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 209d 	strb.w	r2, [r3, #157]	@ 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800452c:	88fa      	ldrh	r2, [r7, #6]
 800452e:	2300      	movs	r3, #0
 8004530:	9303      	str	r3, [sp, #12]
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	9302      	str	r3, [sp, #8]
 8004536:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004538:	9301      	str	r3, [sp, #4]
 800453a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	68b9      	ldr	r1, [r7, #8]
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f80e 	bl	8004564 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004548:	69f8      	ldr	r0, [r7, #28]
 800454a:	f000 f8ab 	bl	80046a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800454e:	2301      	movs	r3, #1
 8004550:	61bb      	str	r3, [r7, #24]
 8004552:	e002      	b.n	800455a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004554:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004558:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800455a:	69bb      	ldr	r3, [r7, #24]
	}
 800455c:	4618      	mov	r0, r3
 800455e:	3720      	adds	r7, #32
 8004560:	46bd      	mov	sp, r7
 8004562:	bd80      	pop	{r7, pc}

08004564 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	60f8      	str	r0, [r7, #12]
 800456c:	60b9      	str	r1, [r7, #8]
 800456e:	607a      	str	r2, [r7, #4]
 8004570:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004574:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800457c:	3b01      	subs	r3, #1
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	4413      	add	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	f023 0307 	bic.w	r3, r3, #7
 800458a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800458c:	69bb      	ldr	r3, [r7, #24]
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	2b00      	cmp	r3, #0
 8004594:	d00b      	beq.n	80045ae <prvInitialiseNewTask+0x4a>
	__asm volatile
 8004596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459a:	f383 8811 	msr	BASEPRI, r3
 800459e:	f3bf 8f6f 	isb	sy
 80045a2:	f3bf 8f4f 	dsb	sy
 80045a6:	617b      	str	r3, [r7, #20]
}
 80045a8:	bf00      	nop
 80045aa:	bf00      	nop
 80045ac:	e7fd      	b.n	80045aa <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01f      	beq.n	80045f4 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045b4:	2300      	movs	r3, #0
 80045b6:	61fb      	str	r3, [r7, #28]
 80045b8:	e012      	b.n	80045e0 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	69fb      	ldr	r3, [r7, #28]
 80045be:	4413      	add	r3, r2
 80045c0:	7819      	ldrb	r1, [r3, #0]
 80045c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	4413      	add	r3, r2
 80045c8:	3334      	adds	r3, #52	@ 0x34
 80045ca:	460a      	mov	r2, r1
 80045cc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80045ce:	68ba      	ldr	r2, [r7, #8]
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	4413      	add	r3, r2
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d006      	beq.n	80045e8 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	3301      	adds	r3, #1
 80045de:	61fb      	str	r3, [r7, #28]
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	2b0f      	cmp	r3, #15
 80045e4:	d9e9      	bls.n	80045ba <prvInitialiseNewTask+0x56>
 80045e6:	e000      	b.n	80045ea <prvInitialiseNewTask+0x86>
			{
				break;
 80045e8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80045ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045f2:	e003      	b.n	80045fc <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80045f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f6:	2200      	movs	r2, #0
 80045f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80045fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045fe:	2b06      	cmp	r3, #6
 8004600:	d901      	bls.n	8004606 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004602:	2306      	movs	r3, #6
 8004604:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004606:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004608:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800460a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800460c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800460e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004610:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004614:	2200      	movs	r2, #0
 8004616:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800461a:	3304      	adds	r3, #4
 800461c:	4618      	mov	r0, r3
 800461e:	f7ff fe68 	bl	80042f2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004624:	3318      	adds	r3, #24
 8004626:	4618      	mov	r0, r3
 8004628:	f7ff fe63 	bl	80042f2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800462c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800462e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004630:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004634:	f1c3 0207 	rsb	r2, r3, #7
 8004638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800463c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800463e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004640:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004644:	2200      	movs	r2, #0
 8004646:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800464a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800464c:	2200      	movs	r2, #0
 800464e:	f883 209c 	strb.w	r2, [r3, #156]	@ 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004654:	334c      	adds	r3, #76	@ 0x4c
 8004656:	224c      	movs	r2, #76	@ 0x4c
 8004658:	2100      	movs	r1, #0
 800465a:	4618      	mov	r0, r3
 800465c:	f001 f83a 	bl	80056d4 <memset>
 8004660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004662:	4a0d      	ldr	r2, [pc, #52]	@ (8004698 <prvInitialiseNewTask+0x134>)
 8004664:	651a      	str	r2, [r3, #80]	@ 0x50
 8004666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004668:	4a0c      	ldr	r2, [pc, #48]	@ (800469c <prvInitialiseNewTask+0x138>)
 800466a:	655a      	str	r2, [r3, #84]	@ 0x54
 800466c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466e:	4a0c      	ldr	r2, [pc, #48]	@ (80046a0 <prvInitialiseNewTask+0x13c>)
 8004670:	659a      	str	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004672:	683a      	ldr	r2, [r7, #0]
 8004674:	68f9      	ldr	r1, [r7, #12]
 8004676:	69b8      	ldr	r0, [r7, #24]
 8004678:	f000 fc2a 	bl	8004ed0 <pxPortInitialiseStack>
 800467c:	4602      	mov	r2, r0
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <prvInitialiseNewTask+0x12a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800468a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800468c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800468e:	bf00      	nop
 8004690:	3720      	adds	r7, #32
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	200044d8 	.word	0x200044d8
 800469c:	20004540 	.word	0x20004540
 80046a0:	200045a8 	.word	0x200045a8

080046a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b082      	sub	sp, #8
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80046ac:	f000 fd44 	bl	8005138 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80046b0:	4b2a      	ldr	r3, [pc, #168]	@ (800475c <prvAddNewTaskToReadyList+0xb8>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3301      	adds	r3, #1
 80046b6:	4a29      	ldr	r2, [pc, #164]	@ (800475c <prvAddNewTaskToReadyList+0xb8>)
 80046b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80046ba:	4b29      	ldr	r3, [pc, #164]	@ (8004760 <prvAddNewTaskToReadyList+0xbc>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d109      	bne.n	80046d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80046c2:	4a27      	ldr	r2, [pc, #156]	@ (8004760 <prvAddNewTaskToReadyList+0xbc>)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80046c8:	4b24      	ldr	r3, [pc, #144]	@ (800475c <prvAddNewTaskToReadyList+0xb8>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d110      	bne.n	80046f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80046d0:	f000 fad4 	bl	8004c7c <prvInitialiseTaskLists>
 80046d4:	e00d      	b.n	80046f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80046d6:	4b23      	ldr	r3, [pc, #140]	@ (8004764 <prvAddNewTaskToReadyList+0xc0>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d109      	bne.n	80046f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80046de:	4b20      	ldr	r3, [pc, #128]	@ (8004760 <prvAddNewTaskToReadyList+0xbc>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d802      	bhi.n	80046f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80046ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004760 <prvAddNewTaskToReadyList+0xbc>)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80046f2:	4b1d      	ldr	r3, [pc, #116]	@ (8004768 <prvAddNewTaskToReadyList+0xc4>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3301      	adds	r3, #1
 80046f8:	4a1b      	ldr	r2, [pc, #108]	@ (8004768 <prvAddNewTaskToReadyList+0xc4>)
 80046fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004700:	2201      	movs	r2, #1
 8004702:	409a      	lsls	r2, r3
 8004704:	4b19      	ldr	r3, [pc, #100]	@ (800476c <prvAddNewTaskToReadyList+0xc8>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4313      	orrs	r3, r2
 800470a:	4a18      	ldr	r2, [pc, #96]	@ (800476c <prvAddNewTaskToReadyList+0xc8>)
 800470c:	6013      	str	r3, [r2, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004712:	4613      	mov	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	009b      	lsls	r3, r3, #2
 800471a:	4a15      	ldr	r2, [pc, #84]	@ (8004770 <prvAddNewTaskToReadyList+0xcc>)
 800471c:	441a      	add	r2, r3
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3304      	adds	r3, #4
 8004722:	4619      	mov	r1, r3
 8004724:	4610      	mov	r0, r2
 8004726:	f7ff fdf1 	bl	800430c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800472a:	f000 fd37 	bl	800519c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800472e:	4b0d      	ldr	r3, [pc, #52]	@ (8004764 <prvAddNewTaskToReadyList+0xc0>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00e      	beq.n	8004754 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004736:	4b0a      	ldr	r3, [pc, #40]	@ (8004760 <prvAddNewTaskToReadyList+0xbc>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004740:	429a      	cmp	r2, r3
 8004742:	d207      	bcs.n	8004754 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004744:	4b0b      	ldr	r3, [pc, #44]	@ (8004774 <prvAddNewTaskToReadyList+0xd0>)
 8004746:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800474a:	601a      	str	r2, [r3, #0]
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004754:	bf00      	nop
 8004756:	3708      	adds	r7, #8
 8004758:	46bd      	mov	sp, r7
 800475a:	bd80      	pop	{r7, pc}
 800475c:	20000884 	.word	0x20000884
 8004760:	20000784 	.word	0x20000784
 8004764:	20000890 	.word	0x20000890
 8004768:	200008a0 	.word	0x200008a0
 800476c:	2000088c 	.word	0x2000088c
 8004770:	20000788 	.word	0x20000788
 8004774:	e000ed04 	.word	0xe000ed04

08004778 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004778:	b580      	push	{r7, lr}
 800477a:	b084      	sub	sp, #16
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004780:	2300      	movs	r3, #0
 8004782:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d018      	beq.n	80047bc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800478a:	4b14      	ldr	r3, [pc, #80]	@ (80047dc <vTaskDelay+0x64>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00b      	beq.n	80047aa <vTaskDelay+0x32>
	__asm volatile
 8004792:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004796:	f383 8811 	msr	BASEPRI, r3
 800479a:	f3bf 8f6f 	isb	sy
 800479e:	f3bf 8f4f 	dsb	sy
 80047a2:	60bb      	str	r3, [r7, #8]
}
 80047a4:	bf00      	nop
 80047a6:	bf00      	nop
 80047a8:	e7fd      	b.n	80047a6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80047aa:	f000 f885 	bl	80048b8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80047ae:	2100      	movs	r1, #0
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f000 fb27 	bl	8004e04 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80047b6:	f000 f88d 	bl	80048d4 <xTaskResumeAll>
 80047ba:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d107      	bne.n	80047d2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80047c2:	4b07      	ldr	r3, [pc, #28]	@ (80047e0 <vTaskDelay+0x68>)
 80047c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047c8:	601a      	str	r2, [r3, #0]
 80047ca:	f3bf 8f4f 	dsb	sy
 80047ce:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047d2:	bf00      	nop
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	200008ac 	.word	0x200008ac
 80047e0:	e000ed04 	.word	0xe000ed04

080047e4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b08a      	sub	sp, #40	@ 0x28
 80047e8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80047ee:	2300      	movs	r3, #0
 80047f0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80047f2:	463a      	mov	r2, r7
 80047f4:	1d39      	adds	r1, r7, #4
 80047f6:	f107 0308 	add.w	r3, r7, #8
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fc fa68 	bl	8000cd0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004800:	6839      	ldr	r1, [r7, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	9202      	str	r2, [sp, #8]
 8004808:	9301      	str	r3, [sp, #4]
 800480a:	2300      	movs	r3, #0
 800480c:	9300      	str	r3, [sp, #0]
 800480e:	2300      	movs	r3, #0
 8004810:	460a      	mov	r2, r1
 8004812:	4921      	ldr	r1, [pc, #132]	@ (8004898 <vTaskStartScheduler+0xb4>)
 8004814:	4821      	ldr	r0, [pc, #132]	@ (800489c <vTaskStartScheduler+0xb8>)
 8004816:	f7ff fe00 	bl	800441a <xTaskCreateStatic>
 800481a:	4603      	mov	r3, r0
 800481c:	4a20      	ldr	r2, [pc, #128]	@ (80048a0 <vTaskStartScheduler+0xbc>)
 800481e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004820:	4b1f      	ldr	r3, [pc, #124]	@ (80048a0 <vTaskStartScheduler+0xbc>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004828:	2301      	movs	r3, #1
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	e001      	b.n	8004832 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800482e:	2300      	movs	r3, #0
 8004830:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d11b      	bne.n	8004870 <vTaskStartScheduler+0x8c>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	613b      	str	r3, [r7, #16]
}
 800484a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800484c:	4b15      	ldr	r3, [pc, #84]	@ (80048a4 <vTaskStartScheduler+0xc0>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	334c      	adds	r3, #76	@ 0x4c
 8004852:	4a15      	ldr	r2, [pc, #84]	@ (80048a8 <vTaskStartScheduler+0xc4>)
 8004854:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004856:	4b15      	ldr	r3, [pc, #84]	@ (80048ac <vTaskStartScheduler+0xc8>)
 8004858:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800485c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800485e:	4b14      	ldr	r3, [pc, #80]	@ (80048b0 <vTaskStartScheduler+0xcc>)
 8004860:	2201      	movs	r2, #1
 8004862:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004864:	4b13      	ldr	r3, [pc, #76]	@ (80048b4 <vTaskStartScheduler+0xd0>)
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800486a:	f000 fbc1 	bl	8004ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800486e:	e00f      	b.n	8004890 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004876:	d10b      	bne.n	8004890 <vTaskStartScheduler+0xac>
	__asm volatile
 8004878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	60fb      	str	r3, [r7, #12]
}
 800488a:	bf00      	nop
 800488c:	bf00      	nop
 800488e:	e7fd      	b.n	800488c <vTaskStartScheduler+0xa8>
}
 8004890:	bf00      	nop
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	080058d8 	.word	0x080058d8
 800489c:	08004c4d 	.word	0x08004c4d
 80048a0:	200008a8 	.word	0x200008a8
 80048a4:	20000784 	.word	0x20000784
 80048a8:	20000014 	.word	0x20000014
 80048ac:	200008a4 	.word	0x200008a4
 80048b0:	20000890 	.word	0x20000890
 80048b4:	20000888 	.word	0x20000888

080048b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80048bc:	4b04      	ldr	r3, [pc, #16]	@ (80048d0 <vTaskSuspendAll+0x18>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	3301      	adds	r3, #1
 80048c2:	4a03      	ldr	r2, [pc, #12]	@ (80048d0 <vTaskSuspendAll+0x18>)
 80048c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80048c6:	bf00      	nop
 80048c8:	46bd      	mov	sp, r7
 80048ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ce:	4770      	bx	lr
 80048d0:	200008ac 	.word	0x200008ac

080048d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b084      	sub	sp, #16
 80048d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048de:	2300      	movs	r3, #0
 80048e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048e2:	4b42      	ldr	r3, [pc, #264]	@ (80049ec <xTaskResumeAll+0x118>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10b      	bne.n	8004902 <xTaskResumeAll+0x2e>
	__asm volatile
 80048ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ee:	f383 8811 	msr	BASEPRI, r3
 80048f2:	f3bf 8f6f 	isb	sy
 80048f6:	f3bf 8f4f 	dsb	sy
 80048fa:	603b      	str	r3, [r7, #0]
}
 80048fc:	bf00      	nop
 80048fe:	bf00      	nop
 8004900:	e7fd      	b.n	80048fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004902:	f000 fc19 	bl	8005138 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004906:	4b39      	ldr	r3, [pc, #228]	@ (80049ec <xTaskResumeAll+0x118>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	3b01      	subs	r3, #1
 800490c:	4a37      	ldr	r2, [pc, #220]	@ (80049ec <xTaskResumeAll+0x118>)
 800490e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004910:	4b36      	ldr	r3, [pc, #216]	@ (80049ec <xTaskResumeAll+0x118>)
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d161      	bne.n	80049dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004918:	4b35      	ldr	r3, [pc, #212]	@ (80049f0 <xTaskResumeAll+0x11c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d05d      	beq.n	80049dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004920:	e02e      	b.n	8004980 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004922:	4b34      	ldr	r3, [pc, #208]	@ (80049f4 <xTaskResumeAll+0x120>)
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	3318      	adds	r3, #24
 800492e:	4618      	mov	r0, r3
 8004930:	f7ff fd49 	bl	80043c6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	3304      	adds	r3, #4
 8004938:	4618      	mov	r0, r3
 800493a:	f7ff fd44 	bl	80043c6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004942:	2201      	movs	r2, #1
 8004944:	409a      	lsls	r2, r3
 8004946:	4b2c      	ldr	r3, [pc, #176]	@ (80049f8 <xTaskResumeAll+0x124>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4313      	orrs	r3, r2
 800494c:	4a2a      	ldr	r2, [pc, #168]	@ (80049f8 <xTaskResumeAll+0x124>)
 800494e:	6013      	str	r3, [r2, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004954:	4613      	mov	r3, r2
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4413      	add	r3, r2
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4a27      	ldr	r2, [pc, #156]	@ (80049fc <xTaskResumeAll+0x128>)
 800495e:	441a      	add	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	3304      	adds	r3, #4
 8004964:	4619      	mov	r1, r3
 8004966:	4610      	mov	r0, r2
 8004968:	f7ff fcd0 	bl	800430c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004970:	4b23      	ldr	r3, [pc, #140]	@ (8004a00 <xTaskResumeAll+0x12c>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004976:	429a      	cmp	r2, r3
 8004978:	d302      	bcc.n	8004980 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800497a:	4b22      	ldr	r3, [pc, #136]	@ (8004a04 <xTaskResumeAll+0x130>)
 800497c:	2201      	movs	r2, #1
 800497e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004980:	4b1c      	ldr	r3, [pc, #112]	@ (80049f4 <xTaskResumeAll+0x120>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1cc      	bne.n	8004922 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d001      	beq.n	8004992 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800498e:	f000 fa19 	bl	8004dc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004992:	4b1d      	ldr	r3, [pc, #116]	@ (8004a08 <xTaskResumeAll+0x134>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d010      	beq.n	80049c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800499e:	f000 f837 	bl	8004a10 <xTaskIncrementTick>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d002      	beq.n	80049ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80049a8:	4b16      	ldr	r3, [pc, #88]	@ (8004a04 <xTaskResumeAll+0x130>)
 80049aa:	2201      	movs	r2, #1
 80049ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	3b01      	subs	r3, #1
 80049b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1f1      	bne.n	800499e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80049ba:	4b13      	ldr	r3, [pc, #76]	@ (8004a08 <xTaskResumeAll+0x134>)
 80049bc:	2200      	movs	r2, #0
 80049be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049c0:	4b10      	ldr	r3, [pc, #64]	@ (8004a04 <xTaskResumeAll+0x130>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d009      	beq.n	80049dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049c8:	2301      	movs	r3, #1
 80049ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049cc:	4b0f      	ldr	r3, [pc, #60]	@ (8004a0c <xTaskResumeAll+0x138>)
 80049ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	f3bf 8f4f 	dsb	sy
 80049d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049dc:	f000 fbde 	bl	800519c <vPortExitCritical>

	return xAlreadyYielded;
 80049e0:	68bb      	ldr	r3, [r7, #8]
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3710      	adds	r7, #16
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	200008ac 	.word	0x200008ac
 80049f0:	20000884 	.word	0x20000884
 80049f4:	20000844 	.word	0x20000844
 80049f8:	2000088c 	.word	0x2000088c
 80049fc:	20000788 	.word	0x20000788
 8004a00:	20000784 	.word	0x20000784
 8004a04:	20000898 	.word	0x20000898
 8004a08:	20000894 	.word	0x20000894
 8004a0c:	e000ed04 	.word	0xe000ed04

08004a10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b086      	sub	sp, #24
 8004a14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a16:	2300      	movs	r3, #0
 8004a18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a1a:	4b4f      	ldr	r3, [pc, #316]	@ (8004b58 <xTaskIncrementTick+0x148>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	f040 808f 	bne.w	8004b42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a24:	4b4d      	ldr	r3, [pc, #308]	@ (8004b5c <xTaskIncrementTick+0x14c>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a2c:	4a4b      	ldr	r2, [pc, #300]	@ (8004b5c <xTaskIncrementTick+0x14c>)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d121      	bne.n	8004a7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a38:	4b49      	ldr	r3, [pc, #292]	@ (8004b60 <xTaskIncrementTick+0x150>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00b      	beq.n	8004a5a <xTaskIncrementTick+0x4a>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	603b      	str	r3, [r7, #0]
}
 8004a54:	bf00      	nop
 8004a56:	bf00      	nop
 8004a58:	e7fd      	b.n	8004a56 <xTaskIncrementTick+0x46>
 8004a5a:	4b41      	ldr	r3, [pc, #260]	@ (8004b60 <xTaskIncrementTick+0x150>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	60fb      	str	r3, [r7, #12]
 8004a60:	4b40      	ldr	r3, [pc, #256]	@ (8004b64 <xTaskIncrementTick+0x154>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a3e      	ldr	r2, [pc, #248]	@ (8004b60 <xTaskIncrementTick+0x150>)
 8004a66:	6013      	str	r3, [r2, #0]
 8004a68:	4a3e      	ldr	r2, [pc, #248]	@ (8004b64 <xTaskIncrementTick+0x154>)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6013      	str	r3, [r2, #0]
 8004a6e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b68 <xTaskIncrementTick+0x158>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	3301      	adds	r3, #1
 8004a74:	4a3c      	ldr	r2, [pc, #240]	@ (8004b68 <xTaskIncrementTick+0x158>)
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	f000 f9a4 	bl	8004dc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a7c:	4b3b      	ldr	r3, [pc, #236]	@ (8004b6c <xTaskIncrementTick+0x15c>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d348      	bcc.n	8004b18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a86:	4b36      	ldr	r3, [pc, #216]	@ (8004b60 <xTaskIncrementTick+0x150>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a90:	4b36      	ldr	r3, [pc, #216]	@ (8004b6c <xTaskIncrementTick+0x15c>)
 8004a92:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a96:	601a      	str	r2, [r3, #0]
					break;
 8004a98:	e03e      	b.n	8004b18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a9a:	4b31      	ldr	r3, [pc, #196]	@ (8004b60 <xTaskIncrementTick+0x150>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d203      	bcs.n	8004aba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004ab2:	4a2e      	ldr	r2, [pc, #184]	@ (8004b6c <xTaskIncrementTick+0x15c>)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004ab8:	e02e      	b.n	8004b18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	3304      	adds	r3, #4
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7ff fc81 	bl	80043c6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d004      	beq.n	8004ad6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	3318      	adds	r3, #24
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f7ff fc78 	bl	80043c6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ada:	2201      	movs	r2, #1
 8004adc:	409a      	lsls	r2, r3
 8004ade:	4b24      	ldr	r3, [pc, #144]	@ (8004b70 <xTaskIncrementTick+0x160>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	4a22      	ldr	r2, [pc, #136]	@ (8004b70 <xTaskIncrementTick+0x160>)
 8004ae6:	6013      	str	r3, [r2, #0]
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aec:	4613      	mov	r3, r2
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4a1f      	ldr	r2, [pc, #124]	@ (8004b74 <xTaskIncrementTick+0x164>)
 8004af6:	441a      	add	r2, r3
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	3304      	adds	r3, #4
 8004afc:	4619      	mov	r1, r3
 8004afe:	4610      	mov	r0, r2
 8004b00:	f7ff fc04 	bl	800430c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b08:	4b1b      	ldr	r3, [pc, #108]	@ (8004b78 <xTaskIncrementTick+0x168>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b0e:	429a      	cmp	r2, r3
 8004b10:	d3b9      	bcc.n	8004a86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004b12:	2301      	movs	r3, #1
 8004b14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b16:	e7b6      	b.n	8004a86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b18:	4b17      	ldr	r3, [pc, #92]	@ (8004b78 <xTaskIncrementTick+0x168>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b1e:	4915      	ldr	r1, [pc, #84]	@ (8004b74 <xTaskIncrementTick+0x164>)
 8004b20:	4613      	mov	r3, r2
 8004b22:	009b      	lsls	r3, r3, #2
 8004b24:	4413      	add	r3, r2
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	440b      	add	r3, r1
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d901      	bls.n	8004b34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004b30:	2301      	movs	r3, #1
 8004b32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004b34:	4b11      	ldr	r3, [pc, #68]	@ (8004b7c <xTaskIncrementTick+0x16c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d007      	beq.n	8004b4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	e004      	b.n	8004b4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004b42:	4b0f      	ldr	r3, [pc, #60]	@ (8004b80 <xTaskIncrementTick+0x170>)
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	3301      	adds	r3, #1
 8004b48:	4a0d      	ldr	r2, [pc, #52]	@ (8004b80 <xTaskIncrementTick+0x170>)
 8004b4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004b4c:	697b      	ldr	r3, [r7, #20]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	200008ac 	.word	0x200008ac
 8004b5c:	20000888 	.word	0x20000888
 8004b60:	2000083c 	.word	0x2000083c
 8004b64:	20000840 	.word	0x20000840
 8004b68:	2000089c 	.word	0x2000089c
 8004b6c:	200008a4 	.word	0x200008a4
 8004b70:	2000088c 	.word	0x2000088c
 8004b74:	20000788 	.word	0x20000788
 8004b78:	20000784 	.word	0x20000784
 8004b7c:	20000898 	.word	0x20000898
 8004b80:	20000894 	.word	0x20000894

08004b84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b84:	b480      	push	{r7}
 8004b86:	b087      	sub	sp, #28
 8004b88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b8a:	4b2a      	ldr	r3, [pc, #168]	@ (8004c34 <vTaskSwitchContext+0xb0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d003      	beq.n	8004b9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b92:	4b29      	ldr	r3, [pc, #164]	@ (8004c38 <vTaskSwitchContext+0xb4>)
 8004b94:	2201      	movs	r2, #1
 8004b96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b98:	e045      	b.n	8004c26 <vTaskSwitchContext+0xa2>
		xYieldPending = pdFALSE;
 8004b9a:	4b27      	ldr	r3, [pc, #156]	@ (8004c38 <vTaskSwitchContext+0xb4>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ba0:	4b26      	ldr	r3, [pc, #152]	@ (8004c3c <vTaskSwitchContext+0xb8>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	fab3 f383 	clz	r3, r3
 8004bac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004bae:	7afb      	ldrb	r3, [r7, #11]
 8004bb0:	f1c3 031f 	rsb	r3, r3, #31
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	4922      	ldr	r1, [pc, #136]	@ (8004c40 <vTaskSwitchContext+0xbc>)
 8004bb8:	697a      	ldr	r2, [r7, #20]
 8004bba:	4613      	mov	r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	4413      	add	r3, r2
 8004bc0:	009b      	lsls	r3, r3, #2
 8004bc2:	440b      	add	r3, r1
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d10b      	bne.n	8004be2 <vTaskSwitchContext+0x5e>
	__asm volatile
 8004bca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	607b      	str	r3, [r7, #4]
}
 8004bdc:	bf00      	nop
 8004bde:	bf00      	nop
 8004be0:	e7fd      	b.n	8004bde <vTaskSwitchContext+0x5a>
 8004be2:	697a      	ldr	r2, [r7, #20]
 8004be4:	4613      	mov	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	4413      	add	r3, r2
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4a14      	ldr	r2, [pc, #80]	@ (8004c40 <vTaskSwitchContext+0xbc>)
 8004bee:	4413      	add	r3, r2
 8004bf0:	613b      	str	r3, [r7, #16]
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	685a      	ldr	r2, [r3, #4]
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	605a      	str	r2, [r3, #4]
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	3308      	adds	r3, #8
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d104      	bne.n	8004c12 <vTaskSwitchContext+0x8e>
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	685a      	ldr	r2, [r3, #4]
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	605a      	str	r2, [r3, #4]
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	4a0a      	ldr	r2, [pc, #40]	@ (8004c44 <vTaskSwitchContext+0xc0>)
 8004c1a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004c1c:	4b09      	ldr	r3, [pc, #36]	@ (8004c44 <vTaskSwitchContext+0xc0>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	334c      	adds	r3, #76	@ 0x4c
 8004c22:	4a09      	ldr	r2, [pc, #36]	@ (8004c48 <vTaskSwitchContext+0xc4>)
 8004c24:	6013      	str	r3, [r2, #0]
}
 8004c26:	bf00      	nop
 8004c28:	371c      	adds	r7, #28
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c30:	4770      	bx	lr
 8004c32:	bf00      	nop
 8004c34:	200008ac 	.word	0x200008ac
 8004c38:	20000898 	.word	0x20000898
 8004c3c:	2000088c 	.word	0x2000088c
 8004c40:	20000788 	.word	0x20000788
 8004c44:	20000784 	.word	0x20000784
 8004c48:	20000014 	.word	0x20000014

08004c4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004c54:	f000 f852 	bl	8004cfc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004c58:	4b06      	ldr	r3, [pc, #24]	@ (8004c74 <prvIdleTask+0x28>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d9f9      	bls.n	8004c54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004c60:	4b05      	ldr	r3, [pc, #20]	@ (8004c78 <prvIdleTask+0x2c>)
 8004c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004c70:	e7f0      	b.n	8004c54 <prvIdleTask+0x8>
 8004c72:	bf00      	nop
 8004c74:	20000788 	.word	0x20000788
 8004c78:	e000ed04 	.word	0xe000ed04

08004c7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b082      	sub	sp, #8
 8004c80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c82:	2300      	movs	r3, #0
 8004c84:	607b      	str	r3, [r7, #4]
 8004c86:	e00c      	b.n	8004ca2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	4a12      	ldr	r2, [pc, #72]	@ (8004cdc <prvInitialiseTaskLists+0x60>)
 8004c94:	4413      	add	r3, r2
 8004c96:	4618      	mov	r0, r3
 8004c98:	f7ff fb0b 	bl	80042b2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	607b      	str	r3, [r7, #4]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2b06      	cmp	r3, #6
 8004ca6:	d9ef      	bls.n	8004c88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004ca8:	480d      	ldr	r0, [pc, #52]	@ (8004ce0 <prvInitialiseTaskLists+0x64>)
 8004caa:	f7ff fb02 	bl	80042b2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004cae:	480d      	ldr	r0, [pc, #52]	@ (8004ce4 <prvInitialiseTaskLists+0x68>)
 8004cb0:	f7ff faff 	bl	80042b2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004cb4:	480c      	ldr	r0, [pc, #48]	@ (8004ce8 <prvInitialiseTaskLists+0x6c>)
 8004cb6:	f7ff fafc 	bl	80042b2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004cba:	480c      	ldr	r0, [pc, #48]	@ (8004cec <prvInitialiseTaskLists+0x70>)
 8004cbc:	f7ff faf9 	bl	80042b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004cc0:	480b      	ldr	r0, [pc, #44]	@ (8004cf0 <prvInitialiseTaskLists+0x74>)
 8004cc2:	f7ff faf6 	bl	80042b2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf4 <prvInitialiseTaskLists+0x78>)
 8004cc8:	4a05      	ldr	r2, [pc, #20]	@ (8004ce0 <prvInitialiseTaskLists+0x64>)
 8004cca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf8 <prvInitialiseTaskLists+0x7c>)
 8004cce:	4a05      	ldr	r2, [pc, #20]	@ (8004ce4 <prvInitialiseTaskLists+0x68>)
 8004cd0:	601a      	str	r2, [r3, #0]
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	20000788 	.word	0x20000788
 8004ce0:	20000814 	.word	0x20000814
 8004ce4:	20000828 	.word	0x20000828
 8004ce8:	20000844 	.word	0x20000844
 8004cec:	20000858 	.word	0x20000858
 8004cf0:	20000870 	.word	0x20000870
 8004cf4:	2000083c 	.word	0x2000083c
 8004cf8:	20000840 	.word	0x20000840

08004cfc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b082      	sub	sp, #8
 8004d00:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d02:	e019      	b.n	8004d38 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004d04:	f000 fa18 	bl	8005138 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d08:	4b10      	ldr	r3, [pc, #64]	@ (8004d4c <prvCheckTasksWaitingTermination+0x50>)
 8004d0a:	68db      	ldr	r3, [r3, #12]
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	3304      	adds	r3, #4
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7ff fb56 	bl	80043c6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004d1a:	4b0d      	ldr	r3, [pc, #52]	@ (8004d50 <prvCheckTasksWaitingTermination+0x54>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	3b01      	subs	r3, #1
 8004d20:	4a0b      	ldr	r2, [pc, #44]	@ (8004d50 <prvCheckTasksWaitingTermination+0x54>)
 8004d22:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004d24:	4b0b      	ldr	r3, [pc, #44]	@ (8004d54 <prvCheckTasksWaitingTermination+0x58>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	3b01      	subs	r3, #1
 8004d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d54 <prvCheckTasksWaitingTermination+0x58>)
 8004d2c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004d2e:	f000 fa35 	bl	800519c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f810 	bl	8004d58 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004d38:	4b06      	ldr	r3, [pc, #24]	@ (8004d54 <prvCheckTasksWaitingTermination+0x58>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1e1      	bne.n	8004d04 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004d40:	bf00      	nop
 8004d42:	bf00      	nop
 8004d44:	3708      	adds	r7, #8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	20000858 	.word	0x20000858
 8004d50:	20000884 	.word	0x20000884
 8004d54:	2000086c 	.word	0x2000086c

08004d58 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b084      	sub	sp, #16
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	334c      	adds	r3, #76	@ 0x4c
 8004d64:	4618      	mov	r0, r3
 8004d66:	f000 fce3 	bl	8005730 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d108      	bne.n	8004d86 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 fb8b 	bl	8005494 <vPortFree>
				vPortFree( pxTCB );
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fb88 	bl	8005494 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004d84:	e019      	b.n	8004dba <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d103      	bne.n	8004d98 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 fb7f 	bl	8005494 <vPortFree>
	}
 8004d96:	e010      	b.n	8004dba <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f893 309d 	ldrb.w	r3, [r3, #157]	@ 0x9d
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d00b      	beq.n	8004dba <prvDeleteTCB+0x62>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	60fb      	str	r3, [r7, #12]
}
 8004db4:	bf00      	nop
 8004db6:	bf00      	nop
 8004db8:	e7fd      	b.n	8004db6 <prvDeleteTCB+0x5e>
	}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004dca:	4b0c      	ldr	r3, [pc, #48]	@ (8004dfc <prvResetNextTaskUnblockTime+0x38>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d104      	bne.n	8004dde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8004e00 <prvResetNextTaskUnblockTime+0x3c>)
 8004dd6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004dda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ddc:	e008      	b.n	8004df0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dde:	4b07      	ldr	r3, [pc, #28]	@ (8004dfc <prvResetNextTaskUnblockTime+0x38>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	4a04      	ldr	r2, [pc, #16]	@ (8004e00 <prvResetNextTaskUnblockTime+0x3c>)
 8004dee:	6013      	str	r3, [r2, #0]
}
 8004df0:	bf00      	nop
 8004df2:	370c      	adds	r7, #12
 8004df4:	46bd      	mov	sp, r7
 8004df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfa:	4770      	bx	lr
 8004dfc:	2000083c 	.word	0x2000083c
 8004e00:	200008a4 	.word	0x200008a4

08004e04 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004e0e:	4b29      	ldr	r3, [pc, #164]	@ (8004eb4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004e14:	4b28      	ldr	r3, [pc, #160]	@ (8004eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7ff fad3 	bl	80043c6 <uxListRemove>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10b      	bne.n	8004e3e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004e26:	4b24      	ldr	r3, [pc, #144]	@ (8004eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e32:	43da      	mvns	r2, r3
 8004e34:	4b21      	ldr	r3, [pc, #132]	@ (8004ebc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	4a20      	ldr	r2, [pc, #128]	@ (8004ebc <prvAddCurrentTaskToDelayedList+0xb8>)
 8004e3c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e44:	d10a      	bne.n	8004e5c <prvAddCurrentTaskToDelayedList+0x58>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d007      	beq.n	8004e5c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8004eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3304      	adds	r3, #4
 8004e52:	4619      	mov	r1, r3
 8004e54:	481a      	ldr	r0, [pc, #104]	@ (8004ec0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8004e56:	f7ff fa59 	bl	800430c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004e5a:	e026      	b.n	8004eaa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004e5c:	68fa      	ldr	r2, [r7, #12]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4413      	add	r3, r2
 8004e62:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004e64:	4b14      	ldr	r3, [pc, #80]	@ (8004eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68ba      	ldr	r2, [r7, #8]
 8004e6a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004e6c:	68ba      	ldr	r2, [r7, #8]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d209      	bcs.n	8004e88 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e74:	4b13      	ldr	r3, [pc, #76]	@ (8004ec4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	4b0f      	ldr	r3, [pc, #60]	@ (8004eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3304      	adds	r3, #4
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4610      	mov	r0, r2
 8004e82:	f7ff fa67 	bl	8004354 <vListInsert>
}
 8004e86:	e010      	b.n	8004eaa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004e88:	4b0f      	ldr	r3, [pc, #60]	@ (8004ec8 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3304      	adds	r3, #4
 8004e92:	4619      	mov	r1, r3
 8004e94:	4610      	mov	r0, r2
 8004e96:	f7ff fa5d 	bl	8004354 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8004ecc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68ba      	ldr	r2, [r7, #8]
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d202      	bcs.n	8004eaa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004ea4:	4a09      	ldr	r2, [pc, #36]	@ (8004ecc <prvAddCurrentTaskToDelayedList+0xc8>)
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	6013      	str	r3, [r2, #0]
}
 8004eaa:	bf00      	nop
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	20000888 	.word	0x20000888
 8004eb8:	20000784 	.word	0x20000784
 8004ebc:	2000088c 	.word	0x2000088c
 8004ec0:	20000870 	.word	0x20000870
 8004ec4:	20000840 	.word	0x20000840
 8004ec8:	2000083c 	.word	0x2000083c
 8004ecc:	200008a4 	.word	0x200008a4

08004ed0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b085      	sub	sp, #20
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	3b04      	subs	r3, #4
 8004ee0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	3b04      	subs	r3, #4
 8004eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	f023 0201 	bic.w	r2, r3, #1
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	3b04      	subs	r3, #4
 8004efe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f00:	4a0c      	ldr	r2, [pc, #48]	@ (8004f34 <pxPortInitialiseStack+0x64>)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	3b14      	subs	r3, #20
 8004f0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	3b04      	subs	r3, #4
 8004f16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f06f 0202 	mvn.w	r2, #2
 8004f1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	3b20      	subs	r3, #32
 8004f24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f26:	68fb      	ldr	r3, [r7, #12]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3714      	adds	r7, #20
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f32:	4770      	bx	lr
 8004f34:	08004f39 	.word	0x08004f39

08004f38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f38:	b480      	push	{r7}
 8004f3a:	b085      	sub	sp, #20
 8004f3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f42:	4b13      	ldr	r3, [pc, #76]	@ (8004f90 <prvTaskExitError+0x58>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f4a:	d00b      	beq.n	8004f64 <prvTaskExitError+0x2c>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	60fb      	str	r3, [r7, #12]
}
 8004f5e:	bf00      	nop
 8004f60:	bf00      	nop
 8004f62:	e7fd      	b.n	8004f60 <prvTaskExitError+0x28>
	__asm volatile
 8004f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f68:	f383 8811 	msr	BASEPRI, r3
 8004f6c:	f3bf 8f6f 	isb	sy
 8004f70:	f3bf 8f4f 	dsb	sy
 8004f74:	60bb      	str	r3, [r7, #8]
}
 8004f76:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f78:	bf00      	nop
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d0fc      	beq.n	8004f7a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004f80:	bf00      	nop
 8004f82:	bf00      	nop
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	20000010 	.word	0x20000010
	...

08004fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fa0:	4b07      	ldr	r3, [pc, #28]	@ (8004fc0 <pxCurrentTCBConst2>)
 8004fa2:	6819      	ldr	r1, [r3, #0]
 8004fa4:	6808      	ldr	r0, [r1, #0]
 8004fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004faa:	f380 8809 	msr	PSP, r0
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	f04f 0000 	mov.w	r0, #0
 8004fb6:	f380 8811 	msr	BASEPRI, r0
 8004fba:	4770      	bx	lr
 8004fbc:	f3af 8000 	nop.w

08004fc0 <pxCurrentTCBConst2>:
 8004fc0:	20000784 	.word	0x20000784
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fc4:	bf00      	nop
 8004fc6:	bf00      	nop

08004fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004fc8:	4808      	ldr	r0, [pc, #32]	@ (8004fec <prvPortStartFirstTask+0x24>)
 8004fca:	6800      	ldr	r0, [r0, #0]
 8004fcc:	6800      	ldr	r0, [r0, #0]
 8004fce:	f380 8808 	msr	MSP, r0
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f380 8814 	msr	CONTROL, r0
 8004fda:	b662      	cpsie	i
 8004fdc:	b661      	cpsie	f
 8004fde:	f3bf 8f4f 	dsb	sy
 8004fe2:	f3bf 8f6f 	isb	sy
 8004fe6:	df00      	svc	0
 8004fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004fea:	bf00      	nop
 8004fec:	e000ed08 	.word	0xe000ed08

08004ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ff6:	4b47      	ldr	r3, [pc, #284]	@ (8005114 <xPortStartScheduler+0x124>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a47      	ldr	r2, [pc, #284]	@ (8005118 <xPortStartScheduler+0x128>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d10b      	bne.n	8005018 <xPortStartScheduler+0x28>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	60fb      	str	r3, [r7, #12]
}
 8005012:	bf00      	nop
 8005014:	bf00      	nop
 8005016:	e7fd      	b.n	8005014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005018:	4b3e      	ldr	r3, [pc, #248]	@ (8005114 <xPortStartScheduler+0x124>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a3f      	ldr	r2, [pc, #252]	@ (800511c <xPortStartScheduler+0x12c>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d10b      	bne.n	800503a <xPortStartScheduler+0x4a>
	__asm volatile
 8005022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005026:	f383 8811 	msr	BASEPRI, r3
 800502a:	f3bf 8f6f 	isb	sy
 800502e:	f3bf 8f4f 	dsb	sy
 8005032:	613b      	str	r3, [r7, #16]
}
 8005034:	bf00      	nop
 8005036:	bf00      	nop
 8005038:	e7fd      	b.n	8005036 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800503a:	4b39      	ldr	r3, [pc, #228]	@ (8005120 <xPortStartScheduler+0x130>)
 800503c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	22ff      	movs	r2, #255	@ 0xff
 800504a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	b2db      	uxtb	r3, r3
 8005052:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005054:	78fb      	ldrb	r3, [r7, #3]
 8005056:	b2db      	uxtb	r3, r3
 8005058:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800505c:	b2da      	uxtb	r2, r3
 800505e:	4b31      	ldr	r3, [pc, #196]	@ (8005124 <xPortStartScheduler+0x134>)
 8005060:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005062:	4b31      	ldr	r3, [pc, #196]	@ (8005128 <xPortStartScheduler+0x138>)
 8005064:	2207      	movs	r2, #7
 8005066:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005068:	e009      	b.n	800507e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800506a:	4b2f      	ldr	r3, [pc, #188]	@ (8005128 <xPortStartScheduler+0x138>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3b01      	subs	r3, #1
 8005070:	4a2d      	ldr	r2, [pc, #180]	@ (8005128 <xPortStartScheduler+0x138>)
 8005072:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005074:	78fb      	ldrb	r3, [r7, #3]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	b2db      	uxtb	r3, r3
 800507c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800507e:	78fb      	ldrb	r3, [r7, #3]
 8005080:	b2db      	uxtb	r3, r3
 8005082:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005086:	2b80      	cmp	r3, #128	@ 0x80
 8005088:	d0ef      	beq.n	800506a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800508a:	4b27      	ldr	r3, [pc, #156]	@ (8005128 <xPortStartScheduler+0x138>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f1c3 0307 	rsb	r3, r3, #7
 8005092:	2b04      	cmp	r3, #4
 8005094:	d00b      	beq.n	80050ae <xPortStartScheduler+0xbe>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	60bb      	str	r3, [r7, #8]
}
 80050a8:	bf00      	nop
 80050aa:	bf00      	nop
 80050ac:	e7fd      	b.n	80050aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80050ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005128 <xPortStartScheduler+0x138>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005128 <xPortStartScheduler+0x138>)
 80050b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80050b8:	4b1b      	ldr	r3, [pc, #108]	@ (8005128 <xPortStartScheduler+0x138>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050c0:	4a19      	ldr	r2, [pc, #100]	@ (8005128 <xPortStartScheduler+0x138>)
 80050c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	b2da      	uxtb	r2, r3
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050cc:	4b17      	ldr	r3, [pc, #92]	@ (800512c <xPortStartScheduler+0x13c>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a16      	ldr	r2, [pc, #88]	@ (800512c <xPortStartScheduler+0x13c>)
 80050d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80050d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050d8:	4b14      	ldr	r3, [pc, #80]	@ (800512c <xPortStartScheduler+0x13c>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a13      	ldr	r2, [pc, #76]	@ (800512c <xPortStartScheduler+0x13c>)
 80050de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80050e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050e4:	f000 f8da 	bl	800529c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050e8:	4b11      	ldr	r3, [pc, #68]	@ (8005130 <xPortStartScheduler+0x140>)
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80050ee:	f000 f8f9 	bl	80052e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80050f2:	4b10      	ldr	r3, [pc, #64]	@ (8005134 <xPortStartScheduler+0x144>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a0f      	ldr	r2, [pc, #60]	@ (8005134 <xPortStartScheduler+0x144>)
 80050f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80050fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050fe:	f7ff ff63 	bl	8004fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005102:	f7ff fd3f 	bl	8004b84 <vTaskSwitchContext>
	prvTaskExitError();
 8005106:	f7ff ff17 	bl	8004f38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}
 8005114:	e000ed00 	.word	0xe000ed00
 8005118:	410fc271 	.word	0x410fc271
 800511c:	410fc270 	.word	0x410fc270
 8005120:	e000e400 	.word	0xe000e400
 8005124:	200008b0 	.word	0x200008b0
 8005128:	200008b4 	.word	0x200008b4
 800512c:	e000ed20 	.word	0xe000ed20
 8005130:	20000010 	.word	0x20000010
 8005134:	e000ef34 	.word	0xe000ef34

08005138 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
	__asm volatile
 800513e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005142:	f383 8811 	msr	BASEPRI, r3
 8005146:	f3bf 8f6f 	isb	sy
 800514a:	f3bf 8f4f 	dsb	sy
 800514e:	607b      	str	r3, [r7, #4]
}
 8005150:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005152:	4b10      	ldr	r3, [pc, #64]	@ (8005194 <vPortEnterCritical+0x5c>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3301      	adds	r3, #1
 8005158:	4a0e      	ldr	r2, [pc, #56]	@ (8005194 <vPortEnterCritical+0x5c>)
 800515a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800515c:	4b0d      	ldr	r3, [pc, #52]	@ (8005194 <vPortEnterCritical+0x5c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d110      	bne.n	8005186 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005164:	4b0c      	ldr	r3, [pc, #48]	@ (8005198 <vPortEnterCritical+0x60>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00b      	beq.n	8005186 <vPortEnterCritical+0x4e>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	603b      	str	r3, [r7, #0]
}
 8005180:	bf00      	nop
 8005182:	bf00      	nop
 8005184:	e7fd      	b.n	8005182 <vPortEnterCritical+0x4a>
	}
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	20000010 	.word	0x20000010
 8005198:	e000ed04 	.word	0xe000ed04

0800519c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80051a2:	4b12      	ldr	r3, [pc, #72]	@ (80051ec <vPortExitCritical+0x50>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10b      	bne.n	80051c2 <vPortExitCritical+0x26>
	__asm volatile
 80051aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ae:	f383 8811 	msr	BASEPRI, r3
 80051b2:	f3bf 8f6f 	isb	sy
 80051b6:	f3bf 8f4f 	dsb	sy
 80051ba:	607b      	str	r3, [r7, #4]
}
 80051bc:	bf00      	nop
 80051be:	bf00      	nop
 80051c0:	e7fd      	b.n	80051be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80051c2:	4b0a      	ldr	r3, [pc, #40]	@ (80051ec <vPortExitCritical+0x50>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	4a08      	ldr	r2, [pc, #32]	@ (80051ec <vPortExitCritical+0x50>)
 80051ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80051cc:	4b07      	ldr	r3, [pc, #28]	@ (80051ec <vPortExitCritical+0x50>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d105      	bne.n	80051e0 <vPortExitCritical+0x44>
 80051d4:	2300      	movs	r3, #0
 80051d6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80051de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	20000010 	.word	0x20000010

080051f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051f0:	f3ef 8009 	mrs	r0, PSP
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	4b15      	ldr	r3, [pc, #84]	@ (8005250 <pxCurrentTCBConst>)
 80051fa:	681a      	ldr	r2, [r3, #0]
 80051fc:	f01e 0f10 	tst.w	lr, #16
 8005200:	bf08      	it	eq
 8005202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800520a:	6010      	str	r0, [r2, #0]
 800520c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005210:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005214:	f380 8811 	msr	BASEPRI, r0
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f7ff fcb0 	bl	8004b84 <vTaskSwitchContext>
 8005224:	f04f 0000 	mov.w	r0, #0
 8005228:	f380 8811 	msr	BASEPRI, r0
 800522c:	bc09      	pop	{r0, r3}
 800522e:	6819      	ldr	r1, [r3, #0]
 8005230:	6808      	ldr	r0, [r1, #0]
 8005232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005236:	f01e 0f10 	tst.w	lr, #16
 800523a:	bf08      	it	eq
 800523c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005240:	f380 8809 	msr	PSP, r0
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	f3af 8000 	nop.w

08005250 <pxCurrentTCBConst>:
 8005250:	20000784 	.word	0x20000784
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005254:	bf00      	nop
 8005256:	bf00      	nop

08005258 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
	__asm volatile
 800525e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005262:	f383 8811 	msr	BASEPRI, r3
 8005266:	f3bf 8f6f 	isb	sy
 800526a:	f3bf 8f4f 	dsb	sy
 800526e:	607b      	str	r3, [r7, #4]
}
 8005270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005272:	f7ff fbcd 	bl	8004a10 <xTaskIncrementTick>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800527c:	4b06      	ldr	r3, [pc, #24]	@ (8005298 <SysTick_Handler+0x40>)
 800527e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005282:	601a      	str	r2, [r3, #0]
 8005284:	2300      	movs	r3, #0
 8005286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	f383 8811 	msr	BASEPRI, r3
}
 800528e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}
 8005298:	e000ed04 	.word	0xe000ed04

0800529c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800529c:	b480      	push	{r7}
 800529e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80052a0:	4b0b      	ldr	r3, [pc, #44]	@ (80052d0 <vPortSetupTimerInterrupt+0x34>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80052a6:	4b0b      	ldr	r3, [pc, #44]	@ (80052d4 <vPortSetupTimerInterrupt+0x38>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80052ac:	4b0a      	ldr	r3, [pc, #40]	@ (80052d8 <vPortSetupTimerInterrupt+0x3c>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a0a      	ldr	r2, [pc, #40]	@ (80052dc <vPortSetupTimerInterrupt+0x40>)
 80052b2:	fba2 2303 	umull	r2, r3, r2, r3
 80052b6:	099b      	lsrs	r3, r3, #6
 80052b8:	4a09      	ldr	r2, [pc, #36]	@ (80052e0 <vPortSetupTimerInterrupt+0x44>)
 80052ba:	3b01      	subs	r3, #1
 80052bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80052be:	4b04      	ldr	r3, [pc, #16]	@ (80052d0 <vPortSetupTimerInterrupt+0x34>)
 80052c0:	2207      	movs	r2, #7
 80052c2:	601a      	str	r2, [r3, #0]
}
 80052c4:	bf00      	nop
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	e000e010 	.word	0xe000e010
 80052d4:	e000e018 	.word	0xe000e018
 80052d8:	20000004 	.word	0x20000004
 80052dc:	10624dd3 	.word	0x10624dd3
 80052e0:	e000e014 	.word	0xe000e014

080052e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80052e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80052f4 <vPortEnableVFP+0x10>
 80052e8:	6801      	ldr	r1, [r0, #0]
 80052ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80052ee:	6001      	str	r1, [r0, #0]
 80052f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80052f2:	bf00      	nop
 80052f4:	e000ed88 	.word	0xe000ed88

080052f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08a      	sub	sp, #40	@ 0x28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005300:	2300      	movs	r3, #0
 8005302:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005304:	f7ff fad8 	bl	80048b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005308:	4b5c      	ldr	r3, [pc, #368]	@ (800547c <pvPortMalloc+0x184>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005310:	f000 f924 	bl	800555c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005314:	4b5a      	ldr	r3, [pc, #360]	@ (8005480 <pvPortMalloc+0x188>)
 8005316:	681a      	ldr	r2, [r3, #0]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4013      	ands	r3, r2
 800531c:	2b00      	cmp	r3, #0
 800531e:	f040 8095 	bne.w	800544c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d01e      	beq.n	8005366 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005328:	2208      	movs	r2, #8
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4413      	add	r3, r2
 800532e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	2b00      	cmp	r3, #0
 8005338:	d015      	beq.n	8005366 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f023 0307 	bic.w	r3, r3, #7
 8005340:	3308      	adds	r3, #8
 8005342:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f003 0307 	and.w	r3, r3, #7
 800534a:	2b00      	cmp	r3, #0
 800534c:	d00b      	beq.n	8005366 <pvPortMalloc+0x6e>
	__asm volatile
 800534e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005352:	f383 8811 	msr	BASEPRI, r3
 8005356:	f3bf 8f6f 	isb	sy
 800535a:	f3bf 8f4f 	dsb	sy
 800535e:	617b      	str	r3, [r7, #20]
}
 8005360:	bf00      	nop
 8005362:	bf00      	nop
 8005364:	e7fd      	b.n	8005362 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d06f      	beq.n	800544c <pvPortMalloc+0x154>
 800536c:	4b45      	ldr	r3, [pc, #276]	@ (8005484 <pvPortMalloc+0x18c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	429a      	cmp	r2, r3
 8005374:	d86a      	bhi.n	800544c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005376:	4b44      	ldr	r3, [pc, #272]	@ (8005488 <pvPortMalloc+0x190>)
 8005378:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800537a:	4b43      	ldr	r3, [pc, #268]	@ (8005488 <pvPortMalloc+0x190>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005380:	e004      	b.n	800538c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005384:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800538c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	687a      	ldr	r2, [r7, #4]
 8005392:	429a      	cmp	r2, r3
 8005394:	d903      	bls.n	800539e <pvPortMalloc+0xa6>
 8005396:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d1f1      	bne.n	8005382 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800539e:	4b37      	ldr	r3, [pc, #220]	@ (800547c <pvPortMalloc+0x184>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a4:	429a      	cmp	r2, r3
 80053a6:	d051      	beq.n	800544c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	2208      	movs	r2, #8
 80053ae:	4413      	add	r3, r2
 80053b0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	681a      	ldr	r2, [r3, #0]
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053bc:	685a      	ldr	r2, [r3, #4]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	1ad2      	subs	r2, r2, r3
 80053c2:	2308      	movs	r3, #8
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d920      	bls.n	800540c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	4413      	add	r3, r2
 80053d0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	f003 0307 	and.w	r3, r3, #7
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00b      	beq.n	80053f4 <pvPortMalloc+0xfc>
	__asm volatile
 80053dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e0:	f383 8811 	msr	BASEPRI, r3
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	f3bf 8f4f 	dsb	sy
 80053ec:	613b      	str	r3, [r7, #16]
}
 80053ee:	bf00      	nop
 80053f0:	bf00      	nop
 80053f2:	e7fd      	b.n	80053f0 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f6:	685a      	ldr	r2, [r3, #4]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	1ad2      	subs	r2, r2, r3
 80053fc:	69bb      	ldr	r3, [r7, #24]
 80053fe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005402:	687a      	ldr	r2, [r7, #4]
 8005404:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005406:	69b8      	ldr	r0, [r7, #24]
 8005408:	f000 f90a 	bl	8005620 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800540c:	4b1d      	ldr	r3, [pc, #116]	@ (8005484 <pvPortMalloc+0x18c>)
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	4a1b      	ldr	r2, [pc, #108]	@ (8005484 <pvPortMalloc+0x18c>)
 8005418:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800541a:	4b1a      	ldr	r3, [pc, #104]	@ (8005484 <pvPortMalloc+0x18c>)
 800541c:	681a      	ldr	r2, [r3, #0]
 800541e:	4b1b      	ldr	r3, [pc, #108]	@ (800548c <pvPortMalloc+0x194>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	429a      	cmp	r2, r3
 8005424:	d203      	bcs.n	800542e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005426:	4b17      	ldr	r3, [pc, #92]	@ (8005484 <pvPortMalloc+0x18c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a18      	ldr	r2, [pc, #96]	@ (800548c <pvPortMalloc+0x194>)
 800542c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800542e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	4b13      	ldr	r3, [pc, #76]	@ (8005480 <pvPortMalloc+0x188>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	431a      	orrs	r2, r3
 8005438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800543c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005442:	4b13      	ldr	r3, [pc, #76]	@ (8005490 <pvPortMalloc+0x198>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	3301      	adds	r3, #1
 8005448:	4a11      	ldr	r2, [pc, #68]	@ (8005490 <pvPortMalloc+0x198>)
 800544a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800544c:	f7ff fa42 	bl	80048d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f003 0307 	and.w	r3, r3, #7
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <pvPortMalloc+0x17a>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	60fb      	str	r3, [r7, #12]
}
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	e7fd      	b.n	800546e <pvPortMalloc+0x176>
	return pvReturn;
 8005472:	69fb      	ldr	r3, [r7, #28]
}
 8005474:	4618      	mov	r0, r3
 8005476:	3728      	adds	r7, #40	@ 0x28
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	200044c0 	.word	0x200044c0
 8005480:	200044d4 	.word	0x200044d4
 8005484:	200044c4 	.word	0x200044c4
 8005488:	200044b8 	.word	0x200044b8
 800548c:	200044c8 	.word	0x200044c8
 8005490:	200044cc 	.word	0x200044cc

08005494 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d04f      	beq.n	8005546 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054a6:	2308      	movs	r3, #8
 80054a8:	425b      	negs	r3, r3
 80054aa:	697a      	ldr	r2, [r7, #20]
 80054ac:	4413      	add	r3, r2
 80054ae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	4b25      	ldr	r3, [pc, #148]	@ (8005550 <vPortFree+0xbc>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4013      	ands	r3, r2
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10b      	bne.n	80054da <vPortFree+0x46>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	60fb      	str	r3, [r7, #12]
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop
 80054d8:	e7fd      	b.n	80054d6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00b      	beq.n	80054fa <vPortFree+0x66>
	__asm volatile
 80054e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e6:	f383 8811 	msr	BASEPRI, r3
 80054ea:	f3bf 8f6f 	isb	sy
 80054ee:	f3bf 8f4f 	dsb	sy
 80054f2:	60bb      	str	r3, [r7, #8]
}
 80054f4:	bf00      	nop
 80054f6:	bf00      	nop
 80054f8:	e7fd      	b.n	80054f6 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	685a      	ldr	r2, [r3, #4]
 80054fe:	4b14      	ldr	r3, [pc, #80]	@ (8005550 <vPortFree+0xbc>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4013      	ands	r3, r2
 8005504:	2b00      	cmp	r3, #0
 8005506:	d01e      	beq.n	8005546 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d11a      	bne.n	8005546 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	4b0e      	ldr	r3, [pc, #56]	@ (8005550 <vPortFree+0xbc>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	43db      	mvns	r3, r3
 800551a:	401a      	ands	r2, r3
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005520:	f7ff f9ca 	bl	80048b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	685a      	ldr	r2, [r3, #4]
 8005528:	4b0a      	ldr	r3, [pc, #40]	@ (8005554 <vPortFree+0xc0>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4413      	add	r3, r2
 800552e:	4a09      	ldr	r2, [pc, #36]	@ (8005554 <vPortFree+0xc0>)
 8005530:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005532:	6938      	ldr	r0, [r7, #16]
 8005534:	f000 f874 	bl	8005620 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005538:	4b07      	ldr	r3, [pc, #28]	@ (8005558 <vPortFree+0xc4>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3301      	adds	r3, #1
 800553e:	4a06      	ldr	r2, [pc, #24]	@ (8005558 <vPortFree+0xc4>)
 8005540:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005542:	f7ff f9c7 	bl	80048d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005546:	bf00      	nop
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	200044d4 	.word	0x200044d4
 8005554:	200044c4 	.word	0x200044c4
 8005558:	200044d0 	.word	0x200044d0

0800555c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800555c:	b480      	push	{r7}
 800555e:	b085      	sub	sp, #20
 8005560:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005562:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005566:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005568:	4b27      	ldr	r3, [pc, #156]	@ (8005608 <prvHeapInit+0xac>)
 800556a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00c      	beq.n	8005590 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	3307      	adds	r3, #7
 800557a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f023 0307 	bic.w	r3, r3, #7
 8005582:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	4a1f      	ldr	r2, [pc, #124]	@ (8005608 <prvHeapInit+0xac>)
 800558c:	4413      	add	r3, r2
 800558e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005594:	4a1d      	ldr	r2, [pc, #116]	@ (800560c <prvHeapInit+0xb0>)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800559a:	4b1c      	ldr	r3, [pc, #112]	@ (800560c <prvHeapInit+0xb0>)
 800559c:	2200      	movs	r2, #0
 800559e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	4413      	add	r3, r2
 80055a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80055a8:	2208      	movs	r2, #8
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	1a9b      	subs	r3, r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f023 0307 	bic.w	r3, r3, #7
 80055b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4a15      	ldr	r2, [pc, #84]	@ (8005610 <prvHeapInit+0xb4>)
 80055bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80055be:	4b14      	ldr	r3, [pc, #80]	@ (8005610 <prvHeapInit+0xb4>)
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	2200      	movs	r2, #0
 80055c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055c6:	4b12      	ldr	r3, [pc, #72]	@ (8005610 <prvHeapInit+0xb4>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	1ad2      	subs	r2, r2, r3
 80055d8:	683b      	ldr	r3, [r7, #0]
 80055da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005610 <prvHeapInit+0xb4>)
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	4a0a      	ldr	r2, [pc, #40]	@ (8005614 <prvHeapInit+0xb8>)
 80055ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	4a09      	ldr	r2, [pc, #36]	@ (8005618 <prvHeapInit+0xbc>)
 80055f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055f4:	4b09      	ldr	r3, [pc, #36]	@ (800561c <prvHeapInit+0xc0>)
 80055f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80055fa:	601a      	str	r2, [r3, #0]
}
 80055fc:	bf00      	nop
 80055fe:	3714      	adds	r7, #20
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr
 8005608:	200008b8 	.word	0x200008b8
 800560c:	200044b8 	.word	0x200044b8
 8005610:	200044c0 	.word	0x200044c0
 8005614:	200044c8 	.word	0x200044c8
 8005618:	200044c4 	.word	0x200044c4
 800561c:	200044d4 	.word	0x200044d4

08005620 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005620:	b480      	push	{r7}
 8005622:	b085      	sub	sp, #20
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005628:	4b28      	ldr	r3, [pc, #160]	@ (80056cc <prvInsertBlockIntoFreeList+0xac>)
 800562a:	60fb      	str	r3, [r7, #12]
 800562c:	e002      	b.n	8005634 <prvInsertBlockIntoFreeList+0x14>
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	60fb      	str	r3, [r7, #12]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	429a      	cmp	r2, r3
 800563c:	d8f7      	bhi.n	800562e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	4413      	add	r3, r2
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	429a      	cmp	r2, r3
 800564e:	d108      	bne.n	8005662 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	685a      	ldr	r2, [r3, #4]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	441a      	add	r2, r3
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	685b      	ldr	r3, [r3, #4]
 800566a:	68ba      	ldr	r2, [r7, #8]
 800566c:	441a      	add	r2, r3
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d118      	bne.n	80056a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681a      	ldr	r2, [r3, #0]
 800567a:	4b15      	ldr	r3, [pc, #84]	@ (80056d0 <prvInsertBlockIntoFreeList+0xb0>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	429a      	cmp	r2, r3
 8005680:	d00d      	beq.n	800569e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	441a      	add	r2, r3
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	601a      	str	r2, [r3, #0]
 800569c:	e008      	b.n	80056b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800569e:	4b0c      	ldr	r3, [pc, #48]	@ (80056d0 <prvInsertBlockIntoFreeList+0xb0>)
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	601a      	str	r2, [r3, #0]
 80056a6:	e003      	b.n	80056b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d002      	beq.n	80056be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80056be:	bf00      	nop
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	200044b8 	.word	0x200044b8
 80056d0:	200044c0 	.word	0x200044c0

080056d4 <memset>:
 80056d4:	4402      	add	r2, r0
 80056d6:	4603      	mov	r3, r0
 80056d8:	4293      	cmp	r3, r2
 80056da:	d100      	bne.n	80056de <memset+0xa>
 80056dc:	4770      	bx	lr
 80056de:	f803 1b01 	strb.w	r1, [r3], #1
 80056e2:	e7f9      	b.n	80056d8 <memset+0x4>

080056e4 <__libc_init_array>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	4d0d      	ldr	r5, [pc, #52]	@ (800571c <__libc_init_array+0x38>)
 80056e8:	4c0d      	ldr	r4, [pc, #52]	@ (8005720 <__libc_init_array+0x3c>)
 80056ea:	1b64      	subs	r4, r4, r5
 80056ec:	10a4      	asrs	r4, r4, #2
 80056ee:	2600      	movs	r6, #0
 80056f0:	42a6      	cmp	r6, r4
 80056f2:	d109      	bne.n	8005708 <__libc_init_array+0x24>
 80056f4:	4d0b      	ldr	r5, [pc, #44]	@ (8005724 <__libc_init_array+0x40>)
 80056f6:	4c0c      	ldr	r4, [pc, #48]	@ (8005728 <__libc_init_array+0x44>)
 80056f8:	f000 f8ce 	bl	8005898 <_init>
 80056fc:	1b64      	subs	r4, r4, r5
 80056fe:	10a4      	asrs	r4, r4, #2
 8005700:	2600      	movs	r6, #0
 8005702:	42a6      	cmp	r6, r4
 8005704:	d105      	bne.n	8005712 <__libc_init_array+0x2e>
 8005706:	bd70      	pop	{r4, r5, r6, pc}
 8005708:	f855 3b04 	ldr.w	r3, [r5], #4
 800570c:	4798      	blx	r3
 800570e:	3601      	adds	r6, #1
 8005710:	e7ee      	b.n	80056f0 <__libc_init_array+0xc>
 8005712:	f855 3b04 	ldr.w	r3, [r5], #4
 8005716:	4798      	blx	r3
 8005718:	3601      	adds	r6, #1
 800571a:	e7f2      	b.n	8005702 <__libc_init_array+0x1e>
 800571c:	08005900 	.word	0x08005900
 8005720:	08005900 	.word	0x08005900
 8005724:	08005900 	.word	0x08005900
 8005728:	08005904 	.word	0x08005904

0800572c <__retarget_lock_acquire_recursive>:
 800572c:	4770      	bx	lr

0800572e <__retarget_lock_release_recursive>:
 800572e:	4770      	bx	lr

08005730 <_reclaim_reent>:
 8005730:	4b2d      	ldr	r3, [pc, #180]	@ (80057e8 <_reclaim_reent+0xb8>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4283      	cmp	r3, r0
 8005736:	b570      	push	{r4, r5, r6, lr}
 8005738:	4604      	mov	r4, r0
 800573a:	d053      	beq.n	80057e4 <_reclaim_reent+0xb4>
 800573c:	69c3      	ldr	r3, [r0, #28]
 800573e:	b31b      	cbz	r3, 8005788 <_reclaim_reent+0x58>
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	b163      	cbz	r3, 800575e <_reclaim_reent+0x2e>
 8005744:	2500      	movs	r5, #0
 8005746:	69e3      	ldr	r3, [r4, #28]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	5959      	ldr	r1, [r3, r5]
 800574c:	b9b1      	cbnz	r1, 800577c <_reclaim_reent+0x4c>
 800574e:	3504      	adds	r5, #4
 8005750:	2d80      	cmp	r5, #128	@ 0x80
 8005752:	d1f8      	bne.n	8005746 <_reclaim_reent+0x16>
 8005754:	69e3      	ldr	r3, [r4, #28]
 8005756:	4620      	mov	r0, r4
 8005758:	68d9      	ldr	r1, [r3, #12]
 800575a:	f000 f847 	bl	80057ec <_free_r>
 800575e:	69e3      	ldr	r3, [r4, #28]
 8005760:	6819      	ldr	r1, [r3, #0]
 8005762:	b111      	cbz	r1, 800576a <_reclaim_reent+0x3a>
 8005764:	4620      	mov	r0, r4
 8005766:	f000 f841 	bl	80057ec <_free_r>
 800576a:	69e3      	ldr	r3, [r4, #28]
 800576c:	689d      	ldr	r5, [r3, #8]
 800576e:	b15d      	cbz	r5, 8005788 <_reclaim_reent+0x58>
 8005770:	4629      	mov	r1, r5
 8005772:	4620      	mov	r0, r4
 8005774:	682d      	ldr	r5, [r5, #0]
 8005776:	f000 f839 	bl	80057ec <_free_r>
 800577a:	e7f8      	b.n	800576e <_reclaim_reent+0x3e>
 800577c:	680e      	ldr	r6, [r1, #0]
 800577e:	4620      	mov	r0, r4
 8005780:	f000 f834 	bl	80057ec <_free_r>
 8005784:	4631      	mov	r1, r6
 8005786:	e7e1      	b.n	800574c <_reclaim_reent+0x1c>
 8005788:	6961      	ldr	r1, [r4, #20]
 800578a:	b111      	cbz	r1, 8005792 <_reclaim_reent+0x62>
 800578c:	4620      	mov	r0, r4
 800578e:	f000 f82d 	bl	80057ec <_free_r>
 8005792:	69e1      	ldr	r1, [r4, #28]
 8005794:	b111      	cbz	r1, 800579c <_reclaim_reent+0x6c>
 8005796:	4620      	mov	r0, r4
 8005798:	f000 f828 	bl	80057ec <_free_r>
 800579c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800579e:	b111      	cbz	r1, 80057a6 <_reclaim_reent+0x76>
 80057a0:	4620      	mov	r0, r4
 80057a2:	f000 f823 	bl	80057ec <_free_r>
 80057a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80057a8:	b111      	cbz	r1, 80057b0 <_reclaim_reent+0x80>
 80057aa:	4620      	mov	r0, r4
 80057ac:	f000 f81e 	bl	80057ec <_free_r>
 80057b0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80057b2:	b111      	cbz	r1, 80057ba <_reclaim_reent+0x8a>
 80057b4:	4620      	mov	r0, r4
 80057b6:	f000 f819 	bl	80057ec <_free_r>
 80057ba:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80057bc:	b111      	cbz	r1, 80057c4 <_reclaim_reent+0x94>
 80057be:	4620      	mov	r0, r4
 80057c0:	f000 f814 	bl	80057ec <_free_r>
 80057c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80057c6:	b111      	cbz	r1, 80057ce <_reclaim_reent+0x9e>
 80057c8:	4620      	mov	r0, r4
 80057ca:	f000 f80f 	bl	80057ec <_free_r>
 80057ce:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80057d0:	b111      	cbz	r1, 80057d8 <_reclaim_reent+0xa8>
 80057d2:	4620      	mov	r0, r4
 80057d4:	f000 f80a 	bl	80057ec <_free_r>
 80057d8:	6a23      	ldr	r3, [r4, #32]
 80057da:	b11b      	cbz	r3, 80057e4 <_reclaim_reent+0xb4>
 80057dc:	4620      	mov	r0, r4
 80057de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80057e2:	4718      	bx	r3
 80057e4:	bd70      	pop	{r4, r5, r6, pc}
 80057e6:	bf00      	nop
 80057e8:	20000014 	.word	0x20000014

080057ec <_free_r>:
 80057ec:	b538      	push	{r3, r4, r5, lr}
 80057ee:	4605      	mov	r5, r0
 80057f0:	2900      	cmp	r1, #0
 80057f2:	d041      	beq.n	8005878 <_free_r+0x8c>
 80057f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057f8:	1f0c      	subs	r4, r1, #4
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	bfb8      	it	lt
 80057fe:	18e4      	addlt	r4, r4, r3
 8005800:	f000 f83e 	bl	8005880 <__malloc_lock>
 8005804:	4a1d      	ldr	r2, [pc, #116]	@ (800587c <_free_r+0x90>)
 8005806:	6813      	ldr	r3, [r2, #0]
 8005808:	b933      	cbnz	r3, 8005818 <_free_r+0x2c>
 800580a:	6063      	str	r3, [r4, #4]
 800580c:	6014      	str	r4, [r2, #0]
 800580e:	4628      	mov	r0, r5
 8005810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005814:	f000 b83a 	b.w	800588c <__malloc_unlock>
 8005818:	42a3      	cmp	r3, r4
 800581a:	d908      	bls.n	800582e <_free_r+0x42>
 800581c:	6820      	ldr	r0, [r4, #0]
 800581e:	1821      	adds	r1, r4, r0
 8005820:	428b      	cmp	r3, r1
 8005822:	bf01      	itttt	eq
 8005824:	6819      	ldreq	r1, [r3, #0]
 8005826:	685b      	ldreq	r3, [r3, #4]
 8005828:	1809      	addeq	r1, r1, r0
 800582a:	6021      	streq	r1, [r4, #0]
 800582c:	e7ed      	b.n	800580a <_free_r+0x1e>
 800582e:	461a      	mov	r2, r3
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	b10b      	cbz	r3, 8005838 <_free_r+0x4c>
 8005834:	42a3      	cmp	r3, r4
 8005836:	d9fa      	bls.n	800582e <_free_r+0x42>
 8005838:	6811      	ldr	r1, [r2, #0]
 800583a:	1850      	adds	r0, r2, r1
 800583c:	42a0      	cmp	r0, r4
 800583e:	d10b      	bne.n	8005858 <_free_r+0x6c>
 8005840:	6820      	ldr	r0, [r4, #0]
 8005842:	4401      	add	r1, r0
 8005844:	1850      	adds	r0, r2, r1
 8005846:	4283      	cmp	r3, r0
 8005848:	6011      	str	r1, [r2, #0]
 800584a:	d1e0      	bne.n	800580e <_free_r+0x22>
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	6053      	str	r3, [r2, #4]
 8005852:	4408      	add	r0, r1
 8005854:	6010      	str	r0, [r2, #0]
 8005856:	e7da      	b.n	800580e <_free_r+0x22>
 8005858:	d902      	bls.n	8005860 <_free_r+0x74>
 800585a:	230c      	movs	r3, #12
 800585c:	602b      	str	r3, [r5, #0]
 800585e:	e7d6      	b.n	800580e <_free_r+0x22>
 8005860:	6820      	ldr	r0, [r4, #0]
 8005862:	1821      	adds	r1, r4, r0
 8005864:	428b      	cmp	r3, r1
 8005866:	bf04      	itt	eq
 8005868:	6819      	ldreq	r1, [r3, #0]
 800586a:	685b      	ldreq	r3, [r3, #4]
 800586c:	6063      	str	r3, [r4, #4]
 800586e:	bf04      	itt	eq
 8005870:	1809      	addeq	r1, r1, r0
 8005872:	6021      	streq	r1, [r4, #0]
 8005874:	6054      	str	r4, [r2, #4]
 8005876:	e7ca      	b.n	800580e <_free_r+0x22>
 8005878:	bd38      	pop	{r3, r4, r5, pc}
 800587a:	bf00      	nop
 800587c:	20004614 	.word	0x20004614

08005880 <__malloc_lock>:
 8005880:	4801      	ldr	r0, [pc, #4]	@ (8005888 <__malloc_lock+0x8>)
 8005882:	f7ff bf53 	b.w	800572c <__retarget_lock_acquire_recursive>
 8005886:	bf00      	nop
 8005888:	20004610 	.word	0x20004610

0800588c <__malloc_unlock>:
 800588c:	4801      	ldr	r0, [pc, #4]	@ (8005894 <__malloc_unlock+0x8>)
 800588e:	f7ff bf4e 	b.w	800572e <__retarget_lock_release_recursive>
 8005892:	bf00      	nop
 8005894:	20004610 	.word	0x20004610

08005898 <_init>:
 8005898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800589a:	bf00      	nop
 800589c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800589e:	bc08      	pop	{r3}
 80058a0:	469e      	mov	lr, r3
 80058a2:	4770      	bx	lr

080058a4 <_fini>:
 80058a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058a6:	bf00      	nop
 80058a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058aa:	bc08      	pop	{r3}
 80058ac:	469e      	mov	lr, r3
 80058ae:	4770      	bx	lr
